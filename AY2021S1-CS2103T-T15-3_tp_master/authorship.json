[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T15-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# About Warenager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Warenager** is an **inventory application** to help tech-savvy warehouse managers"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "to keep track of items in their warehouse. It **optimizes management tasks for warehouse"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "managers** including but not exhaustive of updating, searching and ordering supplies,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## User interface"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * as an inventory manager (as opposed to physical tracking of your stocks on paper)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * as a locator for items in inventory"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* adding stocks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* deleting stocks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* searching for stocks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* updating stocks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "If you are interested in using Warenager, head over to the Quick Start section of the [User Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "If you are interested in developing Warenager, head over to our [Developer Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/DeveloperGuide.html) for a start."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "amylzting": 15,
      "AudreyFelicio": 1,
      "Ashley-Lau": 6,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "mainClassName \u003d \u0027seedu.stock.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    archiveName \u003d \u0027warenager.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 1,
      "kc-98": 1,
      "Ashley-Lau": 2,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "### Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003cimg src\u003d\"images/amylzting.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[github](https://github.com/amylzting)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[portfolio](team/amy.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* Responsibilities: Documentation manager - Responsible for the quality of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "project documents, Coding standards, format of deliverables"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Ang Kai Chao"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003cimg src\u003d\"images/kc-98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "[[github](https://github.com/kc-98)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "[[portfolio](team/kaichao.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Responsibilities: Team Leader, Overall code quality, Testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "### Audrey Felicio Anwar"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003cimg src\u003d\"images/audreyfelicio.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[github](https://github.com/AudreyFelicio)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[portfolio](team/audrey.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* Responsibilities: Project repository manager and maintainer, main PR reviewer and merger, Update feature,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Git \u0026 GitHub expert."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "### Lau Jun Hao Ashley"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cimg src\u003d\"images/ashley-lau.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "[[github](https://github.com/ashley-lau)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "[[portfolio](team/ashley.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* Responsibilities: Scheduling and tracking manager - In charge of defining, assigning, and tracking project tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "### Lim Ze Wei Dennis"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cimg src\u003d\"images/limzeweidennis.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[github](https://github.com/LimZeWeiDennis)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[portfolio](team/dennis.md)]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* Responsibilities: Deadline and Deliverables manager - in charge of making sure that"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "members completes tasks and submit deliverables on time"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 2,
      "kc-98": 6,
      "Ashley-Lau": 8,
      "-": 32,
      "LimZeWeiDennis": 15
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 78
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T15-3/tp/blob/master/src/main/java/seedu/stock/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T15-3/tp/blob/master/src/main/java/seedu/stock/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T15-3/tp/blob/master/src/main/java/seedu/stock/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1. `Logic` uses the `StockBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a stock)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T15-3/tp/blob/master/src/main/java/seedu/stock/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* stores the stock book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T15-3/tp/blob/master/src/main/java/seedu/stock/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* can save the stock book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Classes used by multiple components are in the `seedu.stock.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### General Features"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "General features that are used in many of the implemented features are defined here."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### StockBookParser"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The `StockBookParser` is used to parse a full user input to determine if the user input corresponds to any of the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`COMMAND_WORD` in the various command classes. If the the user input does not conform the any of the expected format"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "required, Warenager will produce an error message."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Suggestion Feature"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The mechanism for suggestion feature is facilitated by `SuggestionCommandParser, SuggestionCommand, SuggestionUtil`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### SuggestionCommand"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`SuggestionCommand` class extends `Command` interface. `SuggestionCommand` class is tasked with creating a new `CommandResult`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "with the suggestion message to be displayed to the user as its argument. The suggestion message to be displayed"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "is gathered from the result of the parsing stage for suggestion."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Some of the important operations implemented here are:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommand#execute()`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates a new `CommandResult` with the suggestion message as its argument."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### SuggestionCommandParser"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`SugestionCommandParser` class extends `Parser` interface. `SuggestionCommandParser` class is tasked with parsing the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "user inputs and generate a new `SuggestionCommand`. The main logic of the suggestion feature is encapsulated here."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`SuggestionCommandParser` receives the user input, along with either the faulty command word or parsing error messages"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "from another `Parser` object. The `parse` method inside the `SuggestionCommandParser` will then try to infer the best"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "possible correct command format using the minimum edit distance heuristic provided inside `SuggestionUtil`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Some of the important operations implemented here are:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#parse()` \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Parses the user input and parsing error messages thrown from another `Parser` and returns a new `SuggestionCommand`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  with the suggestion to be shown as its argument. The inference for the command word to be suggested is made in here."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  After the correct command word is inferred, then it will call helper functions to generate the suggestion messages."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateAddSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for an add command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateListSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for a list command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateHelpSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for a help command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateExitSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  Generates the suggestion message for a exit command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateUpdateSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for an update command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateDeleteSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for a delete command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateFindSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for a find command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateFindExactSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for a find exact command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionCommandParser#generateStatisticsSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Generates the suggestion message for a stats command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* `SuggestionCommandParser#generateNoteSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  Generates the suggestion message for a note command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* `SuggestionCommandParser#generateNoteDeleteSuggestion()` \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  Generates the suggestion message for a note delete command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### SuggestionUtil"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`SuggestionUtil` class contains the utilities needed to infer the suggestion to be displayed to the user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The utilities provided inside are:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionUtil#min()` \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Computes the minimum of three integers."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `SuggestionUtil#minimumEditDistance()` \u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Computes the minimum edit distance between 2 strings."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Example Usage Scenario"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Given below are some example usage scenarios and how the suggestion mechanism behaves at each step."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Example 1: Unknown command word**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 1. The user enters `updt n/Milk s/Fairprice` which contains an unknown command word `updt`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 2. The command word `updt` is extracted out in `StockBookParser` and checked if it matches any valid command word."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 3. The command word `updt` does not match any valid command word. It is then passed down to `SuggestionCommandParser`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "along with `n/Milk s/Fairprice` and `SuggestionCommandParser#parse()` is invoked."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 4. Inside `SuggestionCommandParser#parse()` method, the closest command word to `updt` will be inferred."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The inference uses the minimum edit distance heuristic. `SuggestionCommandParser#parse()` will"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "count the minimum edit distance from `updt` to every other valid command word."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 5. The new valid command word generated is the one with the smallest edit distance to `updt`. The command word"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to be suggested in this case is `update`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 6. `SuggestionCommandParser#parse()` method will call `SuggestionCommandParser#generateUpdateSuggestion()`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to generate the suggestion message to be displayed to the user."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 7. During the generation of suggestion message, `SuggestionCommandParser#generateUpdateSuggestion()` will check"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "first if the compulsory prefix exist. In this case the compulsory prefix which is `sn/` does not exist."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`sn/\u003cserial number\u003e` is then added to the suggestion message."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 8. All prefixes the user entered that is valid for `update` command and its arguments are nonempty will then"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "be appended to the suggestion message. If there exist prefix whose argument is empty, then `SuggestionCommandParser#generateUpdateSuggestion()`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "will fill the argument with a default value. In this case, prefixes `n/ s/` are present and their arguments are nonempty."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`n/Milk s/Fairprice` is then added to the suggestion message."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 9. Lastly `SuggestionCommandParser#generateUpdateSuggestion()` will append the usage message for `update` command."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 10. `SuggestionCommandParser#parse()` method returns a new `SuggestionCommand` with the suggestion message"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to be displayed as its argument."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 11. `SuggestionCommand` is executed and produces a new `CommandResult` to display the message to the user."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 12. The suggestion `update sn/\u003cserial number\u003e n/Milk s/Fairprice` is displayed to the user along with what kind of"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "error and the message usage information. In this case the error is `unknown command` and the message usage is from"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`UpdateCommand`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Example 2: Invalid command format**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 1. The user enters `update n/Milk s/` which contains a valid command word `update`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 2. The command word `update` is extracted out in `StockBookParser` and checked if it matches any valid command word."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 3. The command word `update` is a valid command word. Input is then passed to `UpdateCommandParser#parse()`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 4. Inside `UpdateCommandParser#parse()`, the user input is then parsed to create a new `UpdateCommand`. However,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "since the compulsory prefix `sn/` is not provided, a `ParseException` will be thrown."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 5. `ParseException` thrown will be caught in `StockBookParser`. The user input along with parsing error messages"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "will then be passed into `SuggestionCommandParser#parse()`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 6. Constructor of `SuggestionCommandParser` will separate the parsing error messages header and body and then"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`SuggestionCommandParser#parse()` is invoked."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 7. Inside `SuggestionCommandParser#parse()` method, the closest command word to `update` will be inferred."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The inference uses the minimum edit distance heuristic. `SuggestionCommandParser#parse()` will"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "count the minimum edit distance from `update` to every other valid command word."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 8. Since `update` is already a valid command, the inference will generate `update` again."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 9. `SuggestionCommandParser#parse()` method will call `SuggestionCommandParser#generateUpdateSuggestion()`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to generate the suggestion message to be displayed to the user."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 10. During the generation of suggestion message, `SuggestionCommandParser#generateUpdateSuggestion()` will check"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "first if the compulsory prefix exist. In this case the compulsory prefix which is `sn/` does not exist."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`sn/\u003cserial number\u003e` is then added to the suggestion message."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 11. All prefixes the user entered that is valid for `update` command and its arguments are nonempty will then"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "be appended to the suggestion message. If there exist prefix whose argument is empty, then `SuggestionCommandParser#generateUpdateSuggestion()`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "will fill the argument with a default value. In this case, the prefix `n/` is present and its argument is nonempty."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`n/Milk` is then added to the suggestion message. The prefix `s/` is present, but its argument is empty."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`s/\u003csource\u003e` is then added to the suggestion message."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 9. Lastly `SuggestionCommandParser#generateUpdateSuggestion()` will append the usage message for `update` command."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 10. `SuggestionCommandParser#parse()` method returns a new `SuggestionCommand` with the suggestion message"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to be displayed as its argument."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 11. `SuggestionCommand` is executed and produces a new `CommandResult` to display the message to the user."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Step 12. The suggestion `update sn/\u003cserial number\u003e n/Milk s/\u003csource\u003e` is displayed to the user along with what kind of"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "error and the message usage information. In this case the error is `Invalid command format` and the message usage is from"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`UpdateCommand`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Sequence Diagram"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The following sequence diagram shows how the suggestion feature works for **Example 1**:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "![Suggestion Example 1](images/SuggestionSequenceDiagramExample1.png)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The following sequence diagram shows how the suggestion feature works for **Example 2**:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "![Suggestion Example 2](images/SuggestionSequenceDiagramExample2.png)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Minimum Edit Distance Heuristic"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The minimum edit distance between two strings is defined as the minimum cost needed to transform one into the other."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The transformation cost comes from the types of editing operations performed and how many of those operations performed."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "There are three types of editing operations:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Insertion**: \u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Inserts a new character in the string. Insertion has a cost of 1. \u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Example: `apple -\u003e apples` and `sly -\u003e slay`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Deletion**: \u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Deletes a character from the string. Deletion has a cost of 1. \u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Example: `oranges -\u003e orange` and `bandana -\u003e banana`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Substitution**: \u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Change a character in the string into another different character. Substitution has a cost of 3. It is more expensive"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  to substitute than inserting or deleting a character. \u003cbr\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Example: `prey -\u003e pray` and `like -\u003e lime`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The smaller the minimum edit distance between two strings, the more similar they are."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The algorithm to compute the minimum edit distance between two strings is implemented on `SuggestionUtil#minimumEditDistance()`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Algorithm Explanation**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Suppose there are two strings:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `X` with length `n`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `Y` with length `m`."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Define `D(i, j)` to be the minimum edit distance between the first `i` characters of `X` and the first `j` characters of `Y`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Consider doing all possible editing operations:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Insertion**: \u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  If `i \u003e j`, then we can insert the character at position `j + 1` in `X` to position `j + 1` at `Y`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Hence, `D(i, j) + 1 \u003d D(i, j + 1)` in this case. \u003cbr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  If `i \u003c j`, then we can insert the character at position `i + 1` in `Y` to position `i + 1` at `X`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Hence, `D(i, j) + 1 \u003d D(i + 1, j)` in this case. \u003cbr\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Deletion**: \u003cbr\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  If `i \u003e j`, then we can delete the character at position `i` in `X`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Hence, `D(i, j) \u003d D(i - 1, j) + 1` in this case. \u003cbr\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  If `i \u003c j`, then we can delete the character at position `j` in `Y`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Hence, `D(i, j) \u003d D(i, j - 1) + 1` in this case. \u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Substitution**: \u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  We can change the character at position `i` in X to match the character at position `j` in `Y`, or"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  we can change the character at position `j` in `Y` to match the character at position `i` in `X`. \u003cbr\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Hence, `D(i, j) \u003d D(i - 1, j - 1) + 3` in this case. \u003cbr\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The base cases for the recursion are:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `D(i, 0) \u003d i` since the best way is to delete everything from `X` or inserting every character in `X` to `Y`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `D(0, j) \u003d j` since the best way is to delete everything from `Y` or inserting every character in `Y` to `X`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "In all possible editing operations, the value `D(i, j)` can only change to:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `D(i - 1, j) + 1`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `D(i, j - 1) + 1`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `D(i - 1, j - 1) + 3`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Since we want to find the minimum edit distance,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`D(i, j) \u003d min(D(i - 1, j) + 1, D(i, j - 1) + 1, D(i - 1, j - 1) + 3)`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Since it is a recursion, the algorithm is implemented using dynamic programming to improve speed by remembering already"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "computed states. The current implementation do the following steps:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1. Creates a table to store computed states (2D `dp` array)."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2. Fill up the base cases in the table."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3. Using a double for loop, fill up the table according to the recursion formula above."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4. Returns the minimum edit distance between the two strings compared."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Time complexity**: `O(n * n)` due to the double for loop."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Space complexity**: `O(n * n)` due to the table."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The following activity diagram summarizes what happens when the suggestion feature is triggered:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "![SuggestionActivityDiagram](images/SuggestionActivityDiagram.png)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Design Consideration"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "##### Aspect: String Comparison Heuristics"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Alternative 1 (current implementation):** minimum edit distance heuristic"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Pros: Provides a good estimate how far apart two strings are. A standard dynamic programming algorithm."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Cons: Maybe hard to be understood to people who don\u0027t understand dynamic programming."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Alternative 2:** substring comparison"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Pros: Very simple to implement. A brute force algorithm that checks every substring."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Cons: The distance estimate between two strings is quite bad, especially if no substring overlaps. Slow in speed"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    compared to minimum edit distance. Generates worse suggestion compared to minimum edit distance."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Statistics Feature"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The backend mechanism for statistics feature is facilitated by `StockBookParser, StatisticsCommandParser, StatisticsCommand`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kc-98"
        },
        "content": "and one of the child command classes of StatisticsCommand that includes (as of documentation):"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `SourceStatisticsCommand`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `SourceQuantityDistributionStatisticsCommand`  "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The frontend mechanism for statistics feature mainly facilitated by the controller class `StatisticsWindow` for"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`StatisticsWindow.fxml`. The choice of display is `JavaFX Piechart` from the `JavaFX Charts`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### StatisticsCommandParser"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`StatisticsCommandParser` class extends `Parser` interface. `StatisticsCommandParser` class is tasked with parsing the"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kc-98"
        },
        "content": "user inputs (without the command word) and generates a new `StatisticsCommand` object. The `StatisticsCommand` will be one of the"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kc-98"
        },
        "content": "existing child commands stated above."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Upon successful parsing, the `StatisticsCommand` object will then be passed on to the respective child command classes"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kc-98"
        },
        "content": "for logical execution."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kc-98"
        },
        "content": "If the user inputs do not correspond to any of the `STATISTICS_TYPE` words in the child command classes, an error message"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kc-98"
        },
        "content": "will be shown and no `StatisticsCommand` object will be created."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Some of the more important operations implemented here are:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `StatisticsCommandParser#parse()` \u003cbr\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  Parses the user input and returns a new `StatisticsCommand` object that can be belongs to either one of the"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  child classes of `StatisticsCommand`. This is aided by the `StatisticsCommandParser#getStatisticsType()` method."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `StatisticsCommandParser#getStatisticsType()` \u003cbr\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  This is a further abstracted method that reads the input string and determines what is the correct statistical type"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  command that the user wants."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kc-98"
        },
        "content": ":warning: It is to note that some child classes requires parameters in their constructors for their respective purposes."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### StatisticsCommand"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`StatisticsCommand` abstract class extends `Command` interface. While the `StatisticsCommand` class contains minimal"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kc-98"
        },
        "content": "functionality, it serves as an inheritance bridge between the various types of statistics command, to comply with"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`SOLID` principles."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The respective child classes will be tasked with consolidating the required data and storing it in a `CommandResult` object."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### SourceStatisticsCommand"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`SourceStatisticsCommand` class extends `StatisticsCommand` class. The `SourceStatisticsCommand` class is tasked with"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kc-98"
        },
        "content": "consolidating the required data and storing it in a `CommandResult` object. The statistics shown by this class"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kc-98"
        },
        "content": "describes the **percentage of the different sources** existing in Warenager."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The format for this command is fixed and is ensured by the parser. Any errors arising from this command will be an"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kc-98"
        },
        "content": "assertion error."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The main operation implemented in `SourceStatisticsCommand` class is:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `SourceStatisticsCommand#execute()`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  Generates a new `CommandResult`. Some key attributes of this object consists of:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. `statisticsData` The statistics data to be displayed."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   2. `otherStatisticsDetails` that includes:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        * Statistics type"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### SourceQuantityDistributionStatisticsCommand"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`SourceQuantityDistributionStatisticsCommand` class extends `StatisticsCommand` class. The"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`SourceQuantityDistributionStatisticsCommand` requires a single parameter: `targetSource`. The statistics shown by this class"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kc-98"
        },
        "content": "describes the **distribution among the different stocks** of the given `targetSource`."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kc-98"
        },
        "content": "If the `targetSource` is not found by Warenager, this will result in an error message to be shown to prompt the"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kc-98"
        },
        "content": "user that Warenager cannot find the target source company."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The main operation implemented in `SourceQuantityDistributionStatisticsCommand` class is:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `SourceQuantityDistributionStatisticsCommand#execute()`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  Generates a new `CommandResult`. The key attributes of this object consists of:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. `statisticsData` The statistics data to be displayed."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   2. `otherStatisticsDetails` that includes:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        * Statistics type"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        * Target source"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### StatisticsWindow"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`StatisticsWindow` is the controller class for the `StatisticsWindow.fxml`. Here, the piechart in the class is updated"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kc-98"
        },
        "content": "with the correct data corresponding to the command the user inputs. The title will also be customised to the"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kc-98"
        },
        "content": "type of statistics the user wants to display. The compiled data from the `CommandResult` returned by the `#execute`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kc-98"
        },
        "content": "methods will be read here and supplied to the pie chart."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Some of the more important operations implemented here are:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `StatisticsWindow#refreshData()` \u003cbr\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  This method clears all the current data in the piechart and inserts the correct data depending on the Statistics type"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  from `otherStatisticsDetails` in the `CommandResult` object. It then calls the respective methods needed to extract"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  the compiled data."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `StatisticsCommandParser#updateDataForSourceQuantityDistributionStatistics()` \u003cbr\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  This method is called if the type of statistics is `SourceQuantityDistribution Statistics`. Some calculations are done"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  here to provide users with more data."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* `StatisticsCommandParser#updateDataForSourceStatistics()` \u003cbr\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  This method is called if the type of statistics is `Source Statistics`. Some calculations are done here to provide users"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  with more data."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### Example Usage Scenario"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Given below are some example usage scenarios and how the statistics mechanism behaves at each step."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Example 1: Calling statistics for Source Companies**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 1. The user enters `stats st/source`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 2. The command word `stats` is extracted out in `StockBookParser`, in this case, it matches the `COMMAND_WORD`,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        which is `stats` in the `StatisticsCommand` class."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 3. The remaining user input is the given to the `StatisticsCommandParser` to determine which type of statistics"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        the user wants."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 4. Inside `StatisticsCommandParser#parse()` method, the header will be dropped, resulting in the remaining user"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        input to be `source`. This matches to the criteria for `SourceStatisticsCommand`, and returning a"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        `SourceStatisticsCommand` object."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 5. The `SourceStatisticsCommand#execute()` is then called by the `Logic Manager`. Data extraction and compilation"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        will be done and stored in the returning `CommandResult` object. The `CommandResult` object will also store"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        the type of statistics in `otherStatisticsDetails`, in this case will be `source`, for later usage."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 6. When the `UiManager` calls the `SourceQuantityDistributionStatisticsCommand#execute()` method, this will invoke"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        `MainWindow#execute()`. This `CommandResult` is of the statistics class, leading to the `MainWindow#handleStatistics()`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kc-98"
        },
        "content": "         method call. This leads to the `StatisticsWindow#show()` method call."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 7. `StatisticsWindow#show()` will then call the `StatisticsWindow#refreshData()` which in turn will determine display the"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        data in the desired format, based on the type of statistics from `otherStatisticsDetails` in `CommandResult` from Step 5."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        In this case, `Source Statistics` will be displayed."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 8. This will then update the pie chart with both the relevant data, format, and title to suit the type of statistics"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        to be shown. The UI of the window to be shown is customised by the styling based on the `StatisticsWindow.fxml` file."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 9. The updated piechart will be shown in a popup window."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Example 2: Calling statistics for Source Quantity Distribution**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 1. The user enters `stats st/source-qt-ntuc`. `ntuc` is a valid source that exists in Warenager."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 2. The command word `stats` is extracted out in `StockBookParser`, in this case, it matches the `COMMAND_WORD`,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        which is `stats` in the `StatisticsCommand` class."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 3. The remaining user input is the given to the `StatisticsCommandParser` to determine which type of statistics"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        the user wants."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 4. Inside `StatisticsCommandParser#parse()` method, the header will be dropped, resulting in the remaining user"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        input to be `source-qt-ntuc`. This matches to the criteria for `SourceQuantityDistributionStatisticsCommand`,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        and returning a `SourceQuantityDistributionStatisticsCommand` object."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 5. The `SourceQuantityDistributionStatisticsCommand#execute()` is then called by the `Logic Manager`. Data"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        extraction and compilation will be done and stored in the returning `CommandResult` object. The `CommandResult` object"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        will also store the type of statistics in `otherStatisticsDetails`, in this case will be `source-qt-`, for later usage."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        For this command, the `targetSource` will also be stored in `otherStatisticsDetails` as it is needed to customise the"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        title for the piechart."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 6. When the `UiManager` calls the `SourceQuantityDistributionStatisticsCommand#execute()` method, this will invoke"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        `MainWindow#execute()`. This `CommandResult` is of the statistics class, leading to the `MainWindow#handleStatistics()`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        method call. This leads to the `StatisticsWindow#show()` method call."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 7. `StatisticsWindow#show()` will then call the `StatisticsWindow#refreshData()` which in turn will determine display the"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        data in the desired format, based on the type of statistics from `otherStatisticsDetails` in `CommandResult` from Step 5."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        In this case, `Source Quantity Distribution Statistics` will be displayed."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 8. This will then update the pie chart with both the relevant data, format, and title to suit the type of statistics"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        to be shown. The UI of the window to be shown is customised by the styling based on the `StatisticsWindow.fxml` file."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Step 9. The updated piechart will be shown in a popup window."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### Sequence Diagram"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The following sequence diagram shows how the Logic aspect of the statistics feature works for **Example 1**:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kc-98"
        },
        "content": "![Statistics-Logic Example 1](images/StatisticsCommandSequenceDiagramLogicExample1.png)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The following sequence diagram shows how the Ui aspect of the statistics feature works for **Example 1**:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kc-98"
        },
        "content": "![Statistics-Ui Example 1](images/StatisticsCommandSequenceDiagramUiExample1.png"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kc-98"
        },
        "content": "The following activity diagram summarizes what happens when the statistics feature is triggered:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kc-98"
        },
        "content": "![StatisticsActivityDiagram](images/StatisticsActivityDiagram.png)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kc-98"
        },
        "content": "##### Aspect: UI view for statistics"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Alternative 1 (current implementation):** Pop up window."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Pros: Window can be resized for clearer view. Reduces panel usage since it does not share a common space"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kc-98"
        },
        "content": "          with the stockcards display."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Cons: May impede typing speed if statistics are viewed very often."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Alternative 2:** Side-by-side view beside the stock cards."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Pros: Reduce interruption between typing."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Cons: Statistical views are not often used but rather, only after huge changes over time. In order to display the"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kc-98"
        },
        "content": "          piechart properly, there needs to be a sufficiently large area. This leads to a huge portion of display space"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kc-98"
        },
        "content": "          not being utilised efficiently when other commands are being used."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kc-98"
        },
        "content": "##### Aspect: Choice of charts as the primary display for statistics"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Pie chart is being used as the choice of statistical display to aid the lack of relativity between stocks"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kc-98"
        },
        "content": "in Warenager. Absolute numbers of each stock is already displayed by the stockcards in Warenager. Pie charts"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kc-98"
        },
        "content": "are more useful when working out the compositions of the data."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### Future statistical features"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kc-98"
        },
        "content": "With the expansion of more data fields for each stock, there will be more varieties of statistics that can be"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kc-98"
        },
        "content": "shown based on these new fields."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* has a need to manage a significant number of stocks"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**Value proposition**: Allows users to manage stocks faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Includes higher level features such as ability to bookmark mostly used products and highlights stocks"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "that are low in quantity to improve user experience."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| Priority | As a …​                                                     | I want…​                                                                             | So that…​                                                              |"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| -------- | ----------------------------------------------------------- | ------------------------------------------------------------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | delivery assistant                                          | to be able to edit the stocks in the inventory in bulk                               | I can save time and do deliveries more efficiently                     |"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to be able to add my stock to the application                                        | I can record new stocks                                                |"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager who can type fast              | to be able to delete my stock in the application                                     | I can remove unwanted stock                                            |"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to be able to search for stocks easily                                               | I can refer to them quickly                                            |"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | admin                                                       | to print out all the stocks in the inventory                                         | I can keep records of the inventory                                    |"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to be able to view all the stocks there are in the warehouse clearly                 | I can make decisions better                                            |"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | forgetful manager                                           | to list the features and the way to use them                                         | I can refer to this feature when I forget how to use certain features  |"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | multi-device user                                           | to transport data from one device to another                                         | I will not have to key in items one by one again                       |"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech-savvy warehouse manager                                | to easily type shorter commands                                                      | I am able to execute functions quickly                                 |"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | collaborative user                                          | my inventory to be able to be shared with my collaborators                           | my collaborators can only read and find data                           |"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to be able to change the information of my existing stock in the application         | I can keep my existing inventories updated                             |"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | major shareholder                                           | to easily understand how inventory count works                                       | I can determine if the investment is worthy                            |"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | manager                                                     | to be able to gather the statistics (eg. profit) of the items in inventory           | I can report the profitability of products                             |"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "| `* *`    | forgetful stock                                            | to add optional notes at certain stocks                                              | I can be reminded of important information                             |"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | busy manager                                                | to be able to see or highlight low stocks at a glance                                | I can replenish them in time                                           |"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | busy manager                                                | to automate the calculation of how much stock to restock based on the current stocks | I do not need to spend time manually calculating                       |"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | tech savvy warehouse manager                                | to be able to bookmark certain items in the warehouse                                | I can access and augment their information easily                      |"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | beginner user                                               | have an easy-to-understand interface                                                 |                                                                        |"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | multi-OS user                                               | to run the application on popular operating systems in the market                    |                                                                        |"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to have a smooth flowing platform                                                    | I can track my inventories easily (Good UX)                            |"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | new user                                                    | to read the documentation                                                            | I will be able to know how to use the program                          |"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | offline user                                                | to run the application offline without the need to connect to the internet           |                                                                        |"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to store my data in a digitalised platform                                           | I do not have to fear for data loss                                    |"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | impatient user                                              | to run the appli cation and execute commands without lag                             |                                                                        |"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to have the capacity to store all my inventory data                                  | I am able to expand my range of inventory                              |"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager that can type fast             | to have a platform                                                                   | I can track my stocks through typing                                   |"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to digitalize my inventory                                                           | I do not have to find a physical space to store my inventory details   |"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to be able to easily teach my subordinates how to use the software                   | they can cover my role when I am not around                            |"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "(For all use cases below, the **System** is the `Warenager` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 1: Adding a stock"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1.  User requests to add a stock"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "2.  Warenager adds the stock into the inventory"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1a. The given format is missing any field header."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1b. The argument for any field header is empty."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1c. The argument to the field header is invalid."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1c1. Warenager shows an error message."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1d. The given input has multiple required field headers."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1d1. Warenager shows an error message."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 2: Deleting stocks"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kc-98"
        },
        "content": "2.  Warenager shows a list of stocks."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kc-98"
        },
        "content": "3.  User requests to delete stocks in the list."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kc-98"
        },
        "content": "4.  Warenager deletes the stock."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 3a1. Warenager shows an error message and tells user to use the proper format."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 3b. All inputted serial numbers are not found."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 3b1. Warenager shows an error message and tells user which serial numbers are not found."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 3c. Some inputted serial numbers are not found."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * 3c1. Warenager deletes the found stocks and tells user which serial numbers are not found."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "       Use case resumes at step 2."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 3: Find a stock by name"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock with name \"umbrella\"."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows a list of stocks with names that"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    contain the keyword \"umbrella\"."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header n/."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given command is invalid (wrong find command)."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with name that matches keyword."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 4: Find a stock by serial number"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock with serial number 111111."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows the stock with serial number 111111."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header sn/."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 1b. The given command is invalid (wrong find command)."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with serial number that matches keyword."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 5: Find a stock by location stored"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock stored at location \"Section 312\"."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows all stocks stored at location \"Section 312\"."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header l/."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given command is invalid (wrong find command)."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with storage location that matches keyword."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 6: Find a stock by source of stock"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock which source is \"Company ABC\"."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows all stocks with source \"Company ABC\"."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header s/."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given command is invalid (wrong find command)."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with source that matches keyword."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 7: Increment or decrement a stock\u0027s quantity"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to increment or decrement a specific stock\u0027s quantity."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s quantity."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header q/."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3d. The given increment or decrement value is not an integer."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3d1. Warenager shows an error message."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " "
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3e. The given increment or decrement value exceeds the integer limit."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3e1. Warenager shows an error message."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3f. The given increment value plus the stock\u0027s current quantity exceeds the integer limit."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3f1. Warenager shows an error message."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3g. The stock\u0027s current quantity minus the given decrement value results in a negative value."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3g1. Warenager shows an error message."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 8: Rewrite a stock\u0027s quantity"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s quantity."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s quantity."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header nq/."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3d. The given quantity value is not an integer."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3d1. Warenager shows an error message."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3e. The given quantity value exceeds the integer limit."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3e1. Warenager shows an error message."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3f. The given quantity value is negative."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3f1. Warenager shows an error message."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 9: Update the name of a stock."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s name."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s name."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header n/."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 10: Update the location of a stock"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s location."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s location."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header l/."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 11: Update the source of a stock"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s source."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s source."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header s/."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 12: Using the stats command"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1.  User requests stats from Warenager."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "kc-98"
        },
        "content": "2.  Warenager shows the statistics of the desired field as a pop up."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "kc-98"
        },
        "content": "3.  User views the statistics in the pie chart."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 1a. The given input has an additional header."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 1b. The given input has a wrong header."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 1c. The given input has a missing header."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 1c1. Warenager shows an error message."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1d. The given input is empty."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 1d1. Warenager shows an error message."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1e. The given input contains fields that cannot be found."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1e1. Warenager shows an error message."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 13: Adding a note to a stock"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to add a note to a stock."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager adds the note to the stock."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given input has an additional header."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given input has a wrong header."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1c. The given input has a missing header."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1c1. Warenager shows an error message."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1d. The given input is empty."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1d1. Warenager shows an error message."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1e. The stock cannot be found based on given input."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1e1. Warenager shows an error message."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 14: Deleting a note from a stock"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to delete a note from a stock."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager deletes the note from the stock."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given input has an additional header."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given input has a wrong header."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1c. The given input has a missing header."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1c1. Warenager shows an error message."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1d. The given input is empty."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1d1. Warenager shows an error message."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1e. The stock cannot be found based on given input."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1e1. Warenager shows an error message."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1f. The note cannot be found based on given input."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1f1. Warenager shows an error message."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 15: Deleting all notes from a stock"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to delete all notes from a stock."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager deletes all notes from the stock."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given input has an additional header."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given input has a wrong header."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1c. The given input has a missing header."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1c1. Warenager shows an error message."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1d. The given input is empty."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1d1. Warenager shows an error message."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1e. The stock cannot be found based on given input."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1e1. Warenager shows an error message."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1f. The stock specified has no notes."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1f1. Warenager shows an error message."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     "
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 16: Generating a csv file that contains all stocks"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1.  User requests to print stocks in stock book."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "2.  Warenager generates a csv file containing all stocks."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1a. The given input contains has the wrong format."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1a1. Warenager shows an error message and suggested command."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1b. There is an error when creating the csv file."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 17: Generating a csv file that contains all stocks sorted in desired order"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " **MSS**"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " 1.  User sort stocks in stock book (Use case..) in their desired order."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " 2.  User request to generate csv file based on the existing stock book (Use case 16)."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " 3.  Warenager generates a csv file containing all stocks."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " "
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 18: Using the help command"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "1.  User requests helps from Warenager."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "2.  Warenager shows the user guide as a pop up."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "3.  User views the user guide."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* 1a. The given format has an additional header."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 19: Suggestion feature"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1. User types in command."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2. Warenager detects command format is invalid."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3. Warenager shows command suggestion to the user."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The command word user provided is not valid."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 2a1. Warenager calculates the most related command word to suggest."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2b. The command word provided is valid, but the prefixes are not."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 2b1. Warenager prepares to suggest the command word along with only the valid prefixes."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2c. The command word provided is valid, but the some prefixes are missing."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 2c1. Warenager prepares to suggest the command word along with only the missing prefixes."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case 20: Exit Warenager"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "1.  User requests to exit Warenager."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "2.  Warenager shows exit message."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "3.  User exits Warenager."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* 1a. The given format has an additional header."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "kc-98"
        },
        "content": "2.  Should be able to hold up to 1000 stocks without a noticeable sluggishness in performance for smooth typical usage."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "kc-98"
        },
        "content": "4.  A user without online connection should still be able to run the application."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "kc-98"
        },
        "content": "5.  Should be easy to pickup so that a user of managerial role can quickly teach their employees should he/she be absent."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "amylzting"
        },
        "content": "6.  Should have an easy-to-understand interface, for beginner users to use the application comfortably."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Stock**: Item in the inventory."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Field**: (name, serial number, quantity, location stored, source) of the stock in inventory"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "### Adding a stock"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Adding a stock into the inventory."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Test case: `n/Banana s/NUS q/9999 l/Fruit Section`\u003cbr\u003e"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: New stock added: Banana SerialNumber: NUS1 Source: NUS Quantity: 9999 Location: Fruit Section."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Details of the added stock shown in the status message."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Test case: `add n/Banana s/NUS q/9999 l/`\u003cbr\u003e"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Expected: Locations can take any values, and it should not be blank."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Test case: ` add n/Banana s/NUS q/9999`\u003cbr\u003e"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Expected: Invalid command format!"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      add: Adds a stock to the stock book. Parameters: n/NAME s/SOURCE q/QUANTITY l/LOCATION"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Example: add n/Umbrella s/Kc company q/100 l/section B,"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Other incorrect delete commands to try: `add`, `add sn/absdsa` \u003cbr\u003e"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Deleting stocks"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Deleting stocks from a given list."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Prerequisites: List all stocks by default or use the `find` command. Multiple stocks in the list."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: Stock with the serial number 1111111 is deleted from the inventory."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Details of the deleted stock shown in the status message."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111 sn/11111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: Stock with the serial number 1111111 is deleted from the inventory."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Duplicate serial number(s) is/are ignored. Details of the deleted stock shown in the status message."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111 sn/22222222`\u003cbr\u003e"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: Both stocks with the serial numbers 1111111 and 22222222 are deleted from the inventory."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Details of the deleted stock shown in the status message."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111 sn/33333333` (no stock has the serial number `33333333`) \u003cbr\u003e"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Expected: Only the existing stock with the serial number 1111111 is deleted."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Details of this deleted stock shown in the status message."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Serial number `33333333` which does not belong to any stock will be shown in status message as well."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete 1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock deleted due to invalid format from missing sn/."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete sn/absdsa`"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      (where serial number is not an integer or is a negative integer)\u003cbr\u003e"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Finding a stock"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1. Finding a stock from the inventory."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Prerequisites: Multiple stocks in the list. Stock exists in inventory."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find sn/1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: Stock of the serial number 1111111 is displayed from the inventory."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find n/umbrella`\u003cbr\u003e"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with name containing \"umbrella\" are displayed from the inventory."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find l/section 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with storage location containing \"section\" and \"3\" are displayed from the inventory."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find s/company abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with field source containing \"company\" and \"abc\" are displayed from the inventory."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find n/umbrella l/section 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         Expected: All stocks with field name containing \"umbrella\" OR field location containing \"section\" and \"3\""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         are displayed from the inventory."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         Status message shows success of command."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   "
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find 1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: No stock found due to invalid format from missing field header"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      either n/, sn/, l/ or s/."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find n/umbrella n/company abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to invalid format from duplicate field header of n/."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find`\u003cbr\u003e"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to missing field headers."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find q/1111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to invalid field header q/."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find n/`\u003cbr\u003e"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to empty input for field name."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Advanced finding a stock"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1. Finding a stock from the inventory."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Prerequisites: Multiple stocks in the list. Stock exists in inventory."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact sn/1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: Stock of the serial number 1111111 is displayed from the inventory."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact n/umbrella`\u003cbr\u003e"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with name containing \"umbrella\" are displayed from the inventory."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact l/section 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with storage location containing \"section\" and \"3\" are displayed from the inventory."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact s/company abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with field source containing \"company\" and \"abc\" are displayed from the inventory."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact n/umbrella l/section 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         Expected: All stocks with field name containing \"umbrella\" AND field location containing \"section\" and \"3\""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         are displayed from the inventory."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         Status message shows success of command."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   "
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact 1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to invalid format from missing field header"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      either n/, sn/, l/ or s/."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact n/umbrella n/company abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to invalid format from duplicate field header of n/."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact`\u003cbr\u003e"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to missing field headers."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact q/1111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to invalid field header q/."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `findexact n/`\u003cbr\u003e"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock found due to empty input for field name."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Updating a stock"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1. Updating a stock from the inventory."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Prerequisites: Multiple stocks in the list. Stocks exists in inventory."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 iq/+50`\u003cbr\u003e"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have an increase of quantity by 50."
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 iq/-50`\u003cbr\u003e"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a decrease of quantity by 50."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/Flower11 nq/2103`\u003cbr\u003e"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new quantity 2103."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/Flower11 n/Rose`"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new name Rose."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/Flower11 l/Vase 3`"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new location Vase 3."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/2103 s/Flower Distributor Association`"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new source Flower Distributor Association."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 iq/+50 n/Rose l/Vase 3 s/Flower Distributor Association`"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have an increase of quantity by 50, a new name Rose,"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       a new location Vase3, a new source Flower Distributor Association."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 sn/Flower12 iq/+50 n/Rose l/Vase 3 s/Flower Distributor Association`"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 and Flower12 will have an increase of quantity by 50, a new name Rose,"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       a new location Vase3, a new source Flower Distributor Association."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Generate statistics"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Generating statistics for a target field."
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Test case: `stats st/source`\u003cbr\u003e"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "kc-98"
        },
        "content": "       Expected: A pie chart describing the distribution of source companies for the entire inventory is popped up."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "kc-98"
        },
        "content": "       Details of the successful generation of statistics are shown in the status message."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Test case: `stats st/source-qd-ntuc` (the source company `ntuc` exists) \u003cbr\u003e"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "kc-98"
        },
        "content": "       Expected: A pie chart describing the distribution of stocks in `ntuc` is popped up."
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "kc-98"
        },
        "content": "       Details of the successful generation of statistics are shown in the status message."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Test case: `stats st/source-qd-fair price` (the source company `fair price` does not exist)\u003cbr\u003e"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "kc-98"
        },
        "content": "       Expected: No pop ups describing the statistics will be given or shown."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "kc-98"
        },
        "content": "       Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Other incorrect statistics commands to try: `stats`, `stats st/absdsa`, `stats st/source st/source`"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      "
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Generating unique serial number"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Generating serial number for a newly added stock."
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Test case: `n/Crabs s/Giant q/99 l/Seafood Section`\u003cbr\u003e (source `Giant` has been used `50` times)"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: New stock added: Crabs SerialNumber: Giant51 Source: Giant Quantity: 99 Location: Seafood Section."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Details of the added stock shown in the status message."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Test case: `n/Peaches s/Market q/500 l/Fruits Section`\u003cbr\u003e (source `Market` has never been used)"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: New stock added: Peaches SerialNumber: Market51 Source: Market Quantity: 500 Location: Fruits Section."
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Details of the added stock shown in the status message."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Adding note to stock"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1. Adding a note to a stock."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. Test case: `note sn/ntuc1 nt/first note`"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Expected: Note is added to the stock with serial number ntuc1 and displayed in the notes column for the stock."
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Details of the stock with successful note added is shown in status message."
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   "
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `note 1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note added due to invalid format from missing field headers sn/ and nt/."
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `note sn/umbrella1 sn/company1 nt/first note`\u003cbr\u003e"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note added due to invalid format from duplicate field header of sn/."
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `note`\u003cbr\u003e"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note added due to missing field headers."
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `note q/1111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note added due to invalid field header q/."
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `note sn/ntuc1 nt/`\u003cbr\u003e"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note added due to empty input for field note."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Deleting a note from stock"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1. Deleting a note from stock."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. Test case: `notedelete sn/ntuc1 ni/1`"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Expected: Note with index 1 is deleted from the stock with serial number ntuc1"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    and display is removed from the notes column for the stock."
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Details of the stock with successful note deleted is shown in status message."
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete sn/ntuc1 ni/noninteger`\u003cbr\u003e"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note deleted as note index given is not a positive integer."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete sn/ntuc1 ni/-99`\u003cbr\u003e"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note deleted as note index given is not a positive integer."
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete sn/ntuc1 ni/9999`\u003cbr\u003e"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note deleted (if stock does not have note with index 9999) as note index given is not found."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete 1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note deleted due to invalid format from missing field headers sn/ and ni/."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete sn/umbrella1 sn/company1 ni/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note deleted due to invalid format from duplicate field header of sn/."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete`\u003cbr\u003e"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note deleted due to missing field headers."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete q/1111`\u003cbr\u003e"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note deleted due to invalid field header q/."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `notedelete sn/ntuc1 ni/`\u003cbr\u003e"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No note delete due to empty input for field note index."
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Suggestion message will be shown too."
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "amylzting": 421,
      "AudreyFelicio": 512,
      "kc-98": 304,
      "Ashley-Lau": 112,
      "-": 287,
      "LimZeWeiDennis": 34
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Run the `seed.stock.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   e.g. `seedu.stock.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   e.g. `seedu.stock.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   e.g. `seedu.stock.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "in their warehouse. It **optimizes management tasks** for warehouse managers including but not"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "exhaustive of updating, searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Download the latest `warenager.jar` from [here](https://github.com/se-edu/addressbook-level3/releases)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your Warenager."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Double-click the file to start the app. The commands available in the current version of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   Warenager are listed below:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**:information_source: Brief summary of features:**\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* Items contain location, quantities, etc. Item Details presented in a drop down window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Searching by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * name of stock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * serial number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * source of stock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * location stored in warehouse"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* Startup default sorted by the order stocks are added, highlight item with short quantity."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* Commands.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  e.g. add stock, delete stock, and find stock."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* Storage into csv and json files."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* Adding/Deleting items: Unique serial number generation per item per source company."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Adding/Deleting optional notes to stocks. \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  e.g. important information to take note"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* Setting up: Personalized GUI.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  e.g. company name displayed in the GUI, predefined color presets."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* Bookmark feature.\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  e.g. often used stocks, search bookmark\u003citem\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  e.g. if the command specifies `n/\u003cname\u003e q/\u003csource of stock\u003e`, `q/\u003csource of stock\u003e n/\u003cname\u003e` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Displays the list of command instructions for features in Warenager and how to use the command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Adding new stock: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Adds a new stock into the inventory. Serial number for the new stock will be generated by the program."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Name of item"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    2. Source of stock (eg. from what company)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    3. Quantity (default 0)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    4. Location in warehouse"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Format (the header fields can be in any order):\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "`add n/\u003cname\u003e s/\u003csource of stock\u003e q/\u003cquantity\u003e l/\u003clocation in warehouse\u003e`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "`add n/\u003cname\u003e s/\u003csource of stock\u003e l/\u003clocation in warehouse\u003e q/\u003cquantity\u003e`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "⚠ Each specific fields specified in the `add` command should only be entered once.\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "e.g. `add n/banana n/apple s/fairprice q/1000 l/Fruit section` is not a valid command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "## Listing of stock: `list`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Lists all the stock(s) in the inventory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Deleting of stock: `delete`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Deletes the stock(s) using the stock\u0027s serial number from the inventory. Multiple stocks can be deleted simultaneously."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Serial number of product"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Format (single): `delete sn/\u003cserial number\u003e`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Format (multiple): `delete sn/\u003cserial number\u003e sn/\u003cserial number 2\u003e ...`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Find stocks from inventory: `find`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Displays a list of stocks found in the inventory that contains all keywords specified in ANY fields searched."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Fields that can be searched:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Serial Number"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Location stored"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Source of the stock"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Format (any combination of 1,2,3 or 4 of the fields): \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Single:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. `find n/\u003cname keyword(s) to be searched in stock name\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    2. `find sn/\u003cserial number keyword(s) to be searched in stock serial number\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    3. `find l/\u003clocation stored keyword(s) to be searched in stock location stored\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    4. `find s/\u003csource keyword(s) to be searched in stock source\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Multiple:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. `find n/\u003cname keyword(s)\u003e l/\u003clocation keyword(s)\u003e s/\u003csource keyword(s) sn/\u003cserial number keyword(s)\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "⚠ Each specific fields specified in the `find` command should only be entered once.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "e.g. `find n/banana n/apple s/fairprice l/Fruit section` is not a valid command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Search criteria: \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Only stocks that contain all the search keywords for a field will be displayed. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. e.g. `find n/ChickenNuggets` will not match stock with Name: Chick. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    2. e.g. `find n/ChickenNuggets abcdef` will not match stock with Name: ChickenNuggets. \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Search is case-insensitive."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1.e.g. `find n/ashLey` will match stock with Name: Ashley."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Any stock with any field that contains all the search keywords in any of the fields searched will be displayed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. e.g."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Stock | Details"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "------| --------"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Stock 1** | Name: banana\u003cbr\u003e Serial Number: NTUC1111\u003cbr\u003e Source: ntuc\u003cbr\u003e Quantity: 5\u003cbr\u003e Location in warehouse: Fruits Section"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Stock 2** | Name: chicken\u003cbr\u003e Serial Number: SHENGSIONG1111\u003cbr\u003e Source: sheng siong\u003cbr\u003e Quantity: 100\u003cbr\u003e Location in warehouse: Poultry Section"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`find n/banana sn/SHENGSIONG` will match both Stock 1 and Stock 2 \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`find l/section` will match both Stock 1 and Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`find n/chicken l/poultry` will match only Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`find s/ntuc l/singapore` will match only Stock 1."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Find exact stocks from inventory: `findexact`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Displays a list of stocks found in the inventory that contains all keywords specified in ALL fields searched."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Fields that can be searched:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Serial Number"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Location stored"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Source of the stock"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Format (any combination of 1,2,3 or 4 of the fields): \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Single:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. `findexact n/\u003cname keyword(s) to be searched in stock name\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    2. `findexact sn/\u003cserial number keyword(s) to be searched in stock serial number\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    3. `findexact l/\u003clocation stored keyword(s) to be searched in stock location stored\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    4. `findexact s/\u003csource keyword(s) to be searched in stock source\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Multiple:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. `findexact n/\u003cname keyword(s)\u003e l/\u003clocation keyword(s)\u003e s/\u003csource keyword(s) sn/\u003cserial number keyword(s)\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": "⚠ Each specific fields specified in the `findexact` command should only be entered once.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": "e.g. `findexact n/banana n/apple s/fairprice l/Fruit section` is not a valid command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Search criteria: \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Only stocks that contain all the search keywords for all fields will be displayed. \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. e.g. `findexact n/ChickenNuggets s/ntuc` "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    will match stock with Name: Chick, Source: ntuc. \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    2. e.g. `findexact n/Chicken sn/1111`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    will match stock with Name: ChickenNuggets, SerialNumber: 1111. \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    3. e.g. `findexact n/ChickenNuggets abcdef l/section b`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    will not match stock with Name: ChickenNuggets, Location: section b.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Search is case-insensitive."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. e.g. `findexact n/ashLey s/nTuC` will match stock with Name: Ashley, Source: ntuc."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Any stock with fields containing all the search keywords in all the fields searched will be displayed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. e.g."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Stock | Details"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "------| --------"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Stock 1** | Name: banana\u003cbr\u003e Serial Number: NTUC1111\u003cbr\u003e Source: ntuc\u003cbr\u003e Quantity: 5\u003cbr\u003e Location in warehouse: Fruits Section"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Stock 2** | Name: chicken\u003cbr\u003e Serial Number: SHENGSIONG1111\u003cbr\u003e Source: sheng siong\u003cbr\u003e Quantity: 100\u003cbr\u003e Location in warehouse: Poultry Section"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`findexact n/banana sn/SHENGSIONG` will not match Stock 1 and Stock 2.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`findexact l/section` will match both Stock 1 and Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`findexact n/chicken l/section` will match only Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`findexact n/banana s/ntuc l/singapore` will not match Stock 1 and Stock 2."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Update inventory: `update`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Updates the details of the desired stock, requires the serial number of products."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Fields that can be updated:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Name"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * Quantity"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Location stored"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Source of the stock"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Serial number of product"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Prefixes:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `sn/\u003cserial number keyword\u003e`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `n/\u003cnew name\u003e`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `iq/\u003c+/-\u003e\u003cincrement value\u003e`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `nq/\u003cnew quantity\u003e`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `l/\u003cnew location\u003e`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `s/\u003cnew source\u003e`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* Any combination of the prefixes may be passed in and updated at once."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* Only at most one of `iq/` or `nq/` may be passed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* User may pass in more than one serial number to update all at once."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/\u003cserial number keyword\u003e n/\u003cnew name\u003e`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/\u003cserial number keyword\u003e iq/\u003c+/-\u003e\u003cincrement value\u003e`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/\u003cserial number keyword\u003e nq/\u003cnew quantity\u003e`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/\u003cserial number keyword\u003e l/\u003cnew location\u003e`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/\u003cserial number keyword\u003e s/\u003cnew source\u003e`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/\u003cserial number keyword\u003e n/\u003cnew name\u003e iq/\u003c+/-\u003e\u003cincrement value\u003e l/\u003cnew location\u003e s/\u003cnew source\u003e`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/\u003cserial number keyword\u003e n/\u003cnew name\u003e nq/\u003cnew quantity\u003e l/\u003cnew location\u003e s/\u003cnew source\u003e`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "⚠ If more than one serial number is passed and one of them are wrong (not found in the inventory list), then the command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "will not update anything and shows an error message."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Values to be updated are case-sensitive."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* e.g. `update sn/NUS1 n/Book` will update the name of the stock with serial number `NUS1` to `Book` instead of `book`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Stock | Details"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "------| --------"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Stock 1** | Name: banana\u003cbr\u003e Serial Number: NTUC1111\u003cbr\u003e Source: ntuc\u003cbr\u003e Quantity: 5\u003cbr\u003e Location in warehouse: Fruits Section"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Stock 2** | Name: chicken\u003cbr\u003e Serial Number: SHENGSIONG1111\u003cbr\u003e Source: sheng siong\u003cbr\u003e Quantity: 100\u003cbr\u003e Location in warehouse: Poultry Section"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Stock 3** | Name: guinness\u003cbr\u003e Serial Number: COLDSTORAGE1111\u003cbr\u003e Source: cold storage\u003cbr\u003e Quantity: 10\u003cbr\u003e Location in warehouse: Drinks Section"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/NTUC1111 n/Apple` will change **Stock 1** name to `Apple`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/SHENGSIONG1111 s/cold storage l/Meat section` will change **Stock 2** source to `cold storage` and location"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to `Meat section`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/NTUC1111 iq/+50 n/heineken` will change **Stock 3** name to `heineken` and increment the quantity by `50`. **Stock 3** quantity changes to `60`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/SHENGSIONG1111 s/cold storage nq/50` will change **Stock 2** source to `cold storage` and quantity"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to `50`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`update sn/NTUC1111 sn/NTUC1111 n/Apple juice` will change **Stock 1** and **Stock 3** name to `Apple juice`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Adding notes to stock: `note`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Adds a note to the stock specified, displayed in the notes column for that stock."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Multiple notes can be added to the stock and each note will be indexed. \u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "amylzting"
        },
        "content": "⚠ If notes are too long to be fully displayed in the notes column, ellipsis will be displayed in place of overrun."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amylzting"
        },
        "content": "To view full notes for the stock, use the `noteview` command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. Serial number of stock"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    2. Note to add to stock"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Format: `note sn/\u003cserial number\u003e nt/\u003cnote\u003e`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Example Usages:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Stock | Details"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "amylzting"
        },
        "content": "------| --------"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Stock 1** | Name: banana\u003cbr\u003e Serial Number: ntuc1\u003cbr\u003e Source: ntuc\u003cbr\u003e Quantity: 5\u003cbr\u003e Location in warehouse: Fruits Section"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Stock 2** | Name: chicken\u003cbr\u003e Serial Number: sheng siong1\u003cbr\u003e Source: sheng siong\u003cbr\u003e Quantity: 100\u003cbr\u003e Location in warehouse: Poultry Section"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Command: `note sn/sheng siong1 nt/chicken will expire soon` will add note with index 1 in note column for Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "amylzting"
        },
        "content": "![chicken note 1](images/add_note1_to_stock.png)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Command: `note sn/sheng siong1 nt/chicken order will arrive wednesday` will add note with index 2 for Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "amylzting"
        },
        "content": "![chicken note 2](images/add_note2_to_stock.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Command: `note sn/ntuc1 nt/banana just arrived` will add note with index 1 in note column for Stock 1. \u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "amylzting"
        },
        "content": "![banana note 1](images/add_note1_to_banana.png)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Deleting note(s) from stock: `notedelete`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Deletes a note, specified by the note\u0027s index, from the stock specified by its serial number.."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    1. Serial number of stock"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    2. Note index of note to delete"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "amylzting"
        },
        "content": "⚠ Note index must be an integer."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "amylzting"
        },
        "content": "To delete ALL notes from a stock, note index to specify is 0."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Format: `notedelete sn/\u003cserial number\u003e ni/\u003cnote index\u003e`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Example Usages:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* Before: \u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "amylzting"
        },
        "content": "![before notes](images/add_note1_to_banana.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* After command: `notedelete sn/ntuc1 ni/1`: \u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "amylzting"
        },
        "content": "![after note delete1](images/after_note_delete_1.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* After command: `notedelete sn/ntuc1 ni/0`: \u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "amylzting"
        },
        "content": "![after note delete0](images/after_note_delete_0.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Generating statistics: `stats`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Generates a statistical view in a pie chart depicting the target fields."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Type of statistics to generate and display."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Format: `stats `, followed by one of the following:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Command to append** | **What the statistics describes**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kc-98"
        },
        "content": "------| --------"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**st/source** | Distribution of source companies."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**st/source-qd-\u003csource company\u003e** | Distribution of stocks for the target source company."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kc-98"
        },
        "content": "e.g. `stats st/source`, `stats st/source-qd-abc`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Command: `stats st/source`: \u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kc-98"
        },
        "content": "![SourceStatistics](images/SourceStatistics.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Command: `stats st/source-qd-abc` (`abc` exists with the shown items): \u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kc-98"
        },
        "content": "![SourceQuantityDistributionStatistics](images/SourceQuantityDistributionStatistics.png)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "### Generates a csv file that contains all stocks: `print`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Generates a csv file that contains all stocks. Users may want to sort the stock using `sort` command"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "to sort the stock in their preferred format before converting it into the csv file."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Format (single): `print`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Data (all stocks in inventory in json) is automatically saved to"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`[root directory]/data/stockbook.json` when any of these commands is executed:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* add"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* delete"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* note"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* notedelete"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* update"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "The set of used serial number sources is automatically saved to"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "`[root directory]/data/serialnumbers.json` when any of these commands is executed:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* add"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Command Suggestion"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Sometimes user will type in wrong commands. Warenager will help such user by suggesting the correct format"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "of the command if the command word is valid. If the command word is invalid, then Warenager will try to predict"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "and suggest the closest command to whatever the user has typed."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "⚠ The suggestion will only be made if the command format is invalid or unknown. If the command is valid, but there"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "are errors such as serial number not found, then Warenager will not suggest anything to the user and instead displays"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "an error message."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `del` \u003cbr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Warenager will suggest: `delete sn/\u003cserial number\u003e`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `delt sn/NUS1` \u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Warenager will suggest: `delete sn/NUS1`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `ad n/Thai Tea s/Fairprice q/100` \u003cbr\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Warenager will suggest: `add n/Thai Tea s/Fairprice q/100 l/\u003clocation\u003e`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* `list n/Duck q/100` \u003cbr\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Warenager will suggest: `list`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Exiting Warenager: `exit`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Terminates the program."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Format : `exit`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Sorting `[coming in v1.3]`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kc-98"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Personalized GUI `[coming in v1.3]`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kc-98"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Bookmark `[coming in v1.3]`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Q**: Question\u003cbr\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**A**: Answer."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Add** | `add n/\u003cname\u003e s/\u003csource of stock\u003e q/\u003cquantity\u003e l/\u003clocation in warehouse\u003e`\u003cbr\u003e e.g. `eg. add n/Banana s/NUS q/9999 l/Fruit Section`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Delete** | `delete sn/\u003cserial number\u003e`\u003cbr\u003e e.g. `delete sn/100`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Find** | Any combination of 1, 2, 3 or 4 different fields: \u003cbr\u003e `find n/\u003cname\u003e`\u003cbr\u003e`find sn/\u003cserial number\u003e`\u003cbr\u003e`find l/\u003clocation\u003e`\u003cbr\u003e`find s/\u003csource of stock\u003e`\u003cbr\u003e `find n/\u003cname\u003e l/\u003clocation\u003e s/\u003csource of stock\u003e` \u003cbr\u003e e.g. `find n/umbrella s/ntuc`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**FindExact** | Any combination of 1, 2, 3 or 4 different fields: \u003cbr\u003e `findexact n/\u003cname\u003e l/\u003clocation\u003e` \u003cbr\u003e `findexact n/\u003cname\u003e l/\u003clocation\u003e s/\u003csource of stock\u003e sn/\u003cserial number\u003e` \u003cbr\u003e e.g. `findexact n/umbrella s/ntuc`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Note** | `note sn/\u003cserial number\u003e nt/\u003cnote\u003e`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**NoteDelete** | `notedelete sn/\u003cserial number\u003e ni\u003cnote index\u003e`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Update** | Any combination of prefixes, at most one of `iq/` or `nq/` may be provided, serial number must be provided. \u003cbr\u003e `update sn/\u003cserial number keyword\u003e n/\u003cnew name\u003e` \u003cbr\u003e `update sn/\u003cserial number keyword\u003e iq/\u003c+/-\u003e\u003cincrement value\u003e` \u003cbr\u003e `update sn/\u003cserial number keyword\u003e nq/\u003cnew quantity\u003e` \u003cbr\u003e `update sn/\u003cserial number keyword\u003e l/\u003cnew location\u003e` \u003cbr\u003e `update sn/\u003cserial number keyword\u003e s/\u003cnew source\u003e` \u003cbr\u003e `update sn/\u003cserial number keyword\u003e n/\u003cnew name\u003e iq/\u003c+/-\u003e\u003cincrement value\u003e l/\u003cnew location\u003e s/\u003cnew source\u003e` \u003cbr\u003e `update sn/\u003cserial number keyword\u003e n/\u003cnew name\u003e nq/\u003cnew quantity\u003e l/\u003cnew location\u003e s/\u003cnew source\u003e` \u003cbr\u003e e.g. `update sn/NTUC1 n/Apple nq/1000 l/Fruit Section s/Fairprice`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**print** | `print`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "amylzting": 100,
      "AudreyFelicio": 99,
      "kc-98": 76,
      "Ashley-Lau": 22,
      "-": 95
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "title: Warenager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T15-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T15-3/tp//branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T15-3/tp/actions)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Warenager** is an **inventory application** to help tech-savvy warehouse managers"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to keep track of items in their warehouse. It **optimizes management tasks for warehouse"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "managers** including but not exhaustive of updating, searching and ordering supplies,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "## User interface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * as an inventory manager (as opposed to physical tracking of your stocks on paper)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * as a locator for items in inventory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* adding stocks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* deleting stocks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* searching for stocks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* updating stocks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "If you are interested in using Warenager, head over to the Quick Start section of the [User Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "If you are interested in developing Warenager, head over to our [Developer Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/DeveloperGuide.html) for a start."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 20,
      "-": 13
    }
  },
  {
    "path": "docs/team/amy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "title: Amy\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **New Feature**: Added the ability to find existing items in the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * What it does: Allows the user to search for desired stock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Justification: This feature improves the user experience as user can easily search for the details of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  existing items. Users can now search for their desired stocks quickly and conveniently,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  by using any of the fields (name, serial number, location stored, source of stock) to find"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  their desired stock. Users have the convenience of searching for a whole list of stocks that are related,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  instead of only being able to search for one stock (via name)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Highlights: This enhancement comes with the ability to find stocks from not just the name of the stock"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  but also other related fields such as serial number, location stored and source of stock."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  Search is also case-insensitive and any stock that contains the search term will be shown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **New Feature**: Added the ability for advanced find for existing items in the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * What it does: Allows the user to apply additional filters to search for desired stock."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Justification: This feature improves the user experience as user can now accurately search"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  for stocks using more filters, to narrow down the results."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Highlights: This enhancement comes with the ability to apply filters such as name of the stock,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  serial number, location stored and source of stock."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  Search is also case-insensitive and any stock that contains the search term will be shown."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **New Feature**: Added the ability to add optional notes to existing items in the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * What it does: Allows the user to add notes to stock."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Justification: This feature improves the user experience as user can now add optional notes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  to their stocks, to remind them of important details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Highlights: This enhancement comes with the ability to add multiple notes to the stock."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  Users will be able to add notes to the stock at any time, without erasing their previous notes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **New Feature**: Added the ability to delete one note or all notes from existing a stock in the storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * What it does: Allows the user to delete notes from stock."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Justification: This feature improves the user experience as user can now delete notes that they"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  no longer need from the stock."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Highlights: This enhancement comes with the ability to delete one note from the stock by providing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  the index of note, or delete all notes from the stock."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  Users will be able to delete whichever note they want from the stock at any time,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  without needing to delete all notes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Reviewed and tested teammates\u0027 pull requests."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Merged approved pull requests after thorough review and GitHub action checks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Responsible for managing documentation quality and content."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `find`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `findexact`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `note`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `notedelete`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Checked team members\u0027 documentation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `find`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `findexact`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `note`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `notedelete`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added use cases for feature `find`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added use cases for the feature `findexact`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for `non-functional requirements` and `glossary`sections."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Checked team members\u0027 documentation."
      }
    ],
    "authorContributionMap": {
      "amylzting": 72
    }
  },
  {
    "path": "docs/team/ashley.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "title: Ashley\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Initial set-up of code**: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Refactored ab3 code to suit the classes needed in Warenager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added base classes such as name, quantity, source, serial number and location for stock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Provided a base platform for teammates to work on their commands, without the need to refactor the whole AB3 code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **New Feature**: Added the ability to add items in the storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * What it does: Allows the user to add new stock into the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Justification: This is a necessary feature as it would allow users to add their new stocks into the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  database and subsequently manage their stock from there."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Highlights: A unique serial number will be generated for the stock."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   There are plans to incorporate the company name into the serial number after we implement a feature which"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   allows first time user to input their company name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Helped team members with git and GitHub functionalities."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Frequently checks, test and provides feedback regarding the pull request of the team members."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added documentation for the feature `add`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added implementation details of the `add` feature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added documentation for `product scope` section."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Testing**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added test classes for `add` command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added testing for bases classes in model package."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Tracking of task**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Ensures that all assigned tasks completed before deadline and TP task tracker badges updated correctly."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 46
    }
  },
  {
    "path": "docs/team/audrey.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "title: Audrey\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **New Feature**: Added the ability to update existing items in the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * What it does: Allows the user to update the details of the desired stock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Justification: This feature improves the user experience as user can easily edit the details of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  existing items. Users now do not need to remove the item and then add them back in order to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  edit the details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "   It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "   The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Created the team repository by forking from `nus-cs2103-AY2021S1/tp`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Set up the team repository as specified by the `CS2103T` module requirements."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Manager and maintainer of project repository."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Provided help to team members about Git, GitHub, and workflow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Head reviewer for Pull Requests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Split review tasks to team members."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Ensured no pull requests was merged before thorough review was conducted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Ensured every merge pass the GitHub action checks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Head merger for Pull Requests."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Tests other team member\u0027s code and determine functional flaws if any."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Testing**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Created JUnit tests for update feature."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Reviewed other team members\u0027 tests and ensure the tests are adequate and working."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * Added documentation for the feature `update`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * Fix markdown formatting errors."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * Added implementation details of the `update` feature."
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 47
    }
  },
  {
    "path": "docs/team/dennis.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "title: Dennis\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **New Feature**: Added the ability to find existing items in the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * What it does: Allows the user to search for desired stock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Justification: This feature improves the user experience as user can easily search for the details of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  existing items. Users can now search for their desired stocks quickly and conveniently,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  by using any of the fields (name, serial number, location stored, source of stock) to find"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  their desired stock. Users have the convenience of searching for a whole list of stocks that are related,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  instead of only being able to search for one stock (via name)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Highlights: This enhancement comes with the ability to find stocks from not just the name of the stock"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  but also other related fields such as serial number, location stored and source of stock."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  Search is also case-insensitive and any stock that contains the search term will be shown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Helped to review pull requests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Helped to merge approved pull requests after thorough review and GitHub action checks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Responsible for managing documentation quality and content."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added documentation for the feature `help`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Checked team members\u0027 documentation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added documentation for the feature `help`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added use cases for feature `help`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added documentation for `help` sections."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Checked team members\u0027 documentation."
      }
    ],
    "authorContributionMap": {
      "LimZeWeiDennis": 41
    }
  },
  {
    "path": "docs/team/kaichao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "title: Kai Chao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **New Feature**: Added the ability to delete existing stock(s) from the inventory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * What it does: Allows the user to delete the chosen stock(s)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Justification: This feature enables the user to delete any unwanted or unused stock, so that"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    the storage will not be clogged up with outdated stock."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **New Feature**: Added the ability to generate a unique serial number for each newly added stock."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * What it does: Allows the user to perform commands using serial numbers."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Justification: This feature eliminates any confusion that can arise when users reuse field attributes when"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   adding a new stock. Users can then differentiate field inputs clearly when using Warenager commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **New Feature**: Added the ability to display various statistics through a pie chart."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * What it does: Allows the user to view relevant statistics for their entire inventory."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Justification: Often statistics are needed for inventory evaluation. The quick overview that this feature"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    provides will help the user obtain the required data for analysis."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Ensured code quality when reviewing pull requests, before approving merge."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Ensured team meetings cover the requirements for the week."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Converted the draft user guide content to markdown file format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Updated the documentation for `delete` feature."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Updated the documentation for `stats` feature."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Updated NFR and Appendix section for Warenager."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Added MSS for `delete` and `stats` feature."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Added use cases for `delete` and `stats` feature."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Added implementation details of the `stats` feature."
      }
    ],
    "authorContributionMap": {
      "kc-98": 44
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their stock book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/stock/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Changes the remark of an existing stock in the stock book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the stock identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + \"by the index number used in the last stock listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param index of the stock in the filtered stock list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param remark of the stock to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.stock.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of stock data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the stock’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a stock."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Create a new `Remark` in `seedu.stock.model.stock`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each stock."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Simply add the following to [`seedu.stock.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "StockBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ":exclamation: You must delete StockBook’s storage file located at `/data/stockbook.json` before running it! Not doing so will cause AddressBook to default to an empty stock book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public PersonCard(Person stock, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    remark.setText(stock.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Person stockToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Person editedStock \u003d new Person(stockToEdit.getName(), stockToEdit.getPhone(), stockToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                stockToEdit.getAddress(), remark, stockToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.setPerson(stockToEdit, editedStock);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStock));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code stockToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private String generateSuccessMessage(Person stockToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return String.format(message, stockToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 27,
      "-": 367
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `location` field from `Stock`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## Safely deleting `Location`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "The `location` field in `Stock` is actually an instance of the `seedu.stock.model.stock.Locations` class. Since removing the `Location` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Safe delete the field `location` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Remove the usages of `location` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `location` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `location` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$location` in each `StockCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "![$location](../images/remove/$location.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**`StockCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "private Label location;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cLabel fx:id\u003d\"location\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `location` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  \"stocks\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \"quantity\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \"source\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \"location\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "You can go through each individual `json` file and manually remove the `location` field."
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 20,
      "-": 83
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.stock.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       Person stockToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       Person editedStock \u003d createEditedPerson(stockToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       if (!stockToEdit.isSamePerson(editedStock) \u0026\u0026 model.hasPerson(editedStock)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       model.setPerson(stockToEdit, editedStock);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStock));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       stocks.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    3.  Save the stock book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    5.  Add a new field to `Stock`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    6.  Add a new entity to the stock book"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 10,
      "-": 240
    }
  },
  {
    "path": "src/main/java/seedu/stock/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/stock/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/stock/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.JsonSerialNumberSetsBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.JsonStockBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.SerialNumberSetsBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.StockBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing StockBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockBookStorage stockBookStorage \u003d new JsonStockBookStorage(userPrefs.getStockBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSetsBookStorage serialNumberSetsBookStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                new JsonSerialNumberSetsBookStorage(userPrefs.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        storage \u003d new StorageManager(stockBookStorage, userPrefsStorage, serialNumberSetsBookStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s stock book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The data from the sample stock book will be used instead if {@code storage}\u0027s stock book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * or an empty stock book will be used instead if errors occur when reading {@code storage}\u0027s stock book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Optional\u003cReadOnlyStockBook\u003e stockBookOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cReadOnlySerialNumberSetsBook\u003e serialNumberSetsBookOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ReadOnlyStockBook initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ReadOnlySerialNumberSetsBook initialSerialNumberSetsBookData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stockBookOptional \u003d storage.readStockBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumberSetsBookOptional \u003d storage.readSerialNumberSetsBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (!stockBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample StockBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!serialNumberSetsBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SerialNumberSetsBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            initialData \u003d stockBookOptional.orElseGet(SampleDataUtil::getSampleStockBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            initialSerialNumberSetsBookData \u003d serialNumberSetsBookOptional"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                .orElseGet(SampleDataUtil::getSampleSerialNumberSetsBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty StockBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            initialData \u003d new StockBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            initialSerialNumberSetsBookData \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StockBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            initialData \u003d new StockBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            initialSerialNumberSetsBookData \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialSerialNumberSetsBookData);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StockBook\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.info(\"Starting StockBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Stock Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 30,
      "Ashley-Lau": 30,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String LOG_FILE \u003d \"stockbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HEADER_FIELD \u003d \"Invalid command format! \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + \"Duplicate header field found in command! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_SERIAL_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"No stocks are deleted. The stock serial number(s) provided are not found: \" + \"%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_SOME_SERIAL_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"The stock serial number(s) provided are not found: \" + \"%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_NO_SERIAL_NUMBERS_GIVEN \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"No serial numbers are provided\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_STOCKS_LISTED_OVERVIEW \u003d \"%1$d stock listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_SOURCE_COMPANY_NOT_FOUND \u003d \"Source company not found!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "kc-98": 7,
      "Ashley-Lau": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/FindUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Utility to combines a list of predicates to test into one predicate."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class FindUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a predicate where if only one of the predicate in the list of predicates provided"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * tests true, then it tests true."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param predicates list of predicates to test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return combined predicate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Predicate\u003cStock\u003e getCombinedPredicatesWithOr(List\u003cFieldContainsKeywordsPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPredicate\u003cStock\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicates.forEach(predicate -\u003e predicateList.add(predicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return predicateList.stream().reduce(x -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a predicate where if all of the predicate in the list of predicates provided"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * tests true, then it tests true."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param predicates list of predicates to test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return combined predicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Predicate\u003cStock\u003e getCombinedPredicatesWithAnd(List\u003cFieldContainsKeywordsPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPredicate\u003cStock\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicates.forEach(predicate -\u003e predicateList.add(predicate));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return predicateList.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 39
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/SortUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class SortUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public enum Order {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        ASCENDING, DESCENDING"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public enum Field {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        NAME, SOURCE, LOCATION, QUANTITY, SERIALNUMBER"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns a description of the sorted field."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param field The sorted field."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The description of the sorted field."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static String getFieldDescription(Field field) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        switch (field) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case NAME:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case QUANTITY:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case SOURCE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case LOCATION:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return field.toString().toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case SERIALNUMBER:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return \"serial number\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns a comparator to sort the inventory."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param field The field to be sorted by."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The comparator to sort the inventory."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static Comparator\u003cStock\u003e generateComparator(Field field) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        switch (field) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case NAME:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return generateNameComparator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case SOURCE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return generateSourceComparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case LOCATION:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return generateLocationComparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case SERIALNUMBER:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return generateSerialNumberComparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case QUANTITY:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return generateQuantityComparator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns a reversed comparator to sort the inventory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param field The field to be sorted by."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The reversed comparator to sort the inventory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static Comparator\u003cStock\u003e generateReverseComparator(Field field) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Comparator\u003cStock\u003e notReversed \u003d generateComparator(field);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (notReversed !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return notReversed.reversed();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static Comparator\u003cStock\u003e generateNameComparator() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new Comparator\u003cStock\u003e() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            public int compare(Stock a, Stock b) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String nameA \u003d a.getName().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String nameB \u003d b.getName().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return nameA.compareTo(nameB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static Comparator\u003cStock\u003e generateSourceComparator() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new Comparator\u003cStock\u003e() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            public int compare(Stock a, Stock b) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String sourceA \u003d a.getSource().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String sourceB \u003d b.getSource().toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return sourceA.compareTo(sourceB);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static Comparator\u003cStock\u003e generateLocationComparator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new Comparator\u003cStock\u003e() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            public int compare(Stock a, Stock b) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String locationA \u003d a.getLocation().toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String locationB \u003d b.getLocation().toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return locationA.compareTo(locationB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        };"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static Comparator\u003cStock\u003e generateSerialNumberComparator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new Comparator\u003cStock\u003e() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            public int compare(Stock a, Stock b) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String serialNumberA \u003d a.getSerialNumber().toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String serialNumberB \u003d b.getSerialNumber().toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return serialNumberA.compareTo(serialNumberB);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static Comparator\u003cStock\u003e generateQuantityComparator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new Comparator\u003cStock\u003e() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            public int compare(Stock a, Stock b) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                BigInteger quantityA \u003d new BigInteger(a.getQuantity().toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                BigInteger quantityB \u003d new BigInteger(b.getQuantity().toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return quantityA.compareTo(quantityB);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        };"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 130
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/SuggestionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class SuggestionUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Computes the minimum of three integers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param x The first integer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param y The second integer."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param z The third integer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The minimum of those three integers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static int min(int x, int y, int z) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return Math.min(x, Math.min(y, z));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns the minimum edit needed to change {@code str1} to {@code str2}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Edit consists of remove, replace, or insert."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param str1 The string to be edited."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param str2 The target string to be achieved."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The minimum edit needed to change {@code str1} to {@code str2}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static int minimumEditDistance(String str1, String str2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        int str1Length \u003d str1.length();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        int str2Length \u003d str2.length();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        int[][] dp \u003d new int[str1Length + 1][str2Length + 1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // fill up base case"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d str1Length; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            dp[i][0] \u003d i;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int j \u003d 0; j \u003c\u003d str2Length; j++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            dp[0][j] \u003d j;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // fill up table"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // insertion cost: 1, remove cost: 1, replace cost: 3"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d str1Length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d str2Length; j++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                if (str1.charAt(i - 1) \u003d\u003d str2.charAt(j - 1)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    dp[i][j] \u003d dp[i - 1][j - 1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    dp[i][j] \u003d min(dp[i - 1][j - 1] + 3, dp[i - 1][j] + 1, dp[i][j - 1] + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return dp[str1Length][str2Length];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 51
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the StockBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see seedu.stock.model.Model#getStockBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ReadOnlyStockBook getStockBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of stocks */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ObservableList\u003cStock\u003e getFilteredStockList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the user prefs\u0027 stock book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 3,
      "Ashley-Lau": 14,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.StockBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final StockBookParser stockBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBookParser \u003d new StockBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SourceCompanyNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Command command \u003d stockBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            storage.saveStockBook(model.getStockBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            storage.saveSerialNumberSetsBook(model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getStockBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e getFilteredStockList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getFilteredStockList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getStockBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 4,
      "Ashley-Lau": 22,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Adds a stock to the stock book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a stock to the stock book.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + \"Parameters: (any combination, in any order, of the following four fields)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SOURCE + \"SOURCE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_NAME + \"Umbrella \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SOURCE + \"Kc company \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_QUANTITY + \"100 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_LOCATION + \"section B \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New stock added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STOCK \u003d \"This stock already exists in the stock book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final Stock toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Stock}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public AddCommand(Stock stock) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stock);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        toAdd \u003d stock;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        toAdd.setSerialNumber(model.generateNextSerialNumber(toAdd.getSource()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (model.hasStock(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STOCK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.addStock(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 30,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Stock book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.setStockBook(new StockBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 2,
      "Ashley-Lau": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /** Statistics information should be shown to the user. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final boolean showStatistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /** Statistics data to be shown to the user, if any. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final Map\u003cString, Integer\u003e statisticsData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /** Other statistics data details to be shown to the user, if any. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String[] otherStatisticsDetails;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public CommandResult(String feedbackToUser, Map\u003cString, Integer\u003e statisticsData,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                         boolean showHelp, boolean showStatistics, String[] otherStatisticsDetails, boolean exit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.showStatistics \u003d showStatistics;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.statisticsData \u003d statisticsData;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.otherStatisticsDetails \u003d otherStatisticsDetails;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this(feedbackToUser, null, false, false, null, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isShowStatistics() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return showStatistics;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Map\u003cString, Integer\u003e getStatisticsData() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.statisticsData;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String[] getOtherStatisticsDetails() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.otherStatisticsDetails;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 31,
      "Ashley-Lau": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/CommandWords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class CommandWords {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String ADD_COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String CLEAR_COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String DELETE_COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String STATISTICS_COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String EXIT_COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String FIND_COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String FIND_EXACT_COMMAND_WORD \u003d \"findexact\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String HELP_COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String LIST_COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String UPDATE_COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String PRINT_COMMAND_WORD \u003d \"print\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String NOTE_COMMAND_WORD \u003d \"note\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String NOTE_DELETE_COMMAND_WORD \u003d \"notedelete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String SORT_COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns all command words existing in Warenager."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A list of all command words in Warenager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static List\u003cString\u003e getAllCommandWords() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cString\u003e allCommandWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(ADD_COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(CLEAR_COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(DELETE_COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        allCommandWords.add(STATISTICS_COMMAND_WORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(EXIT_COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(FIND_COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(FIND_EXACT_COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(HELP_COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(LIST_COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(UPDATE_COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        allCommandWords.add(NOTE_COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        allCommandWords.add(NOTE_DELETE_COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allCommandWords.add(SORT_COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return allCommandWords;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 6,
      "AudreyFelicio": 37,
      "kc-98": 2,
      "Ashley-Lau": 1
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Deletes a stock identified using it\u0027s displayed serial number from the stock book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \": Deletes the stock identified by the EXACT serial number used in the displayed.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"Parameters: SERIAL NUMBER (must be a valid serial number)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sn/Kc company1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_DELETE_STOCK_SUCCESS \u003d \"All serial number(s) are found.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                                    + \"Deleted Stock(s): %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_DELETE_STOCK_SOME_SUCCESS \u003d \"Some serial number(s) are not found.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                                    + \"Deleted Stock(s): %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final Set\u003cSerialNumber\u003e targetSerialNumbers;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructor for a new delete command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param targetSerialNumbers The list of target serial numbers to delete."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public DeleteCommand(Set\u003cSerialNumber\u003e targetSerialNumbers) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assert(targetSerialNumbers !\u003d null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.targetSerialNumbers \u003d targetSerialNumbers;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (targetSerialNumbers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SERIAL_NUMBERS_GIVEN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cStock\u003e lastShownList \u003d model.getFilteredStockList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cStock\u003e stocksDeleted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cSerialNumber\u003e unknownSerialNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cSerialNumber\u003e setToListSerialNumbers \u003d targetSerialNumbers.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int j \u003d 0; j \u003c setToListSerialNumbers.size(); j++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumber targetSerialNumber \u003d setToListSerialNumbers.get(j);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String targetSerialNumberInString \u003d targetSerialNumber.getSerialNumberAsString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            boolean isStockDeleted \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //attempts to map serial number to stock and delete the related stock."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                Stock currentStock \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                String currentStockSerialNumberInString \u003d currentStock.getSerialNumber()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                                        .getSerialNumberAsString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (currentStockSerialNumberInString.equals(targetSerialNumberInString)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    isStockDeleted \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    stocksDeleted.add(currentStock);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    model.deleteStock(currentStock);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //if given serial number does not map to any stock, it does not exist."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!isStockDeleted) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                unknownSerialNumbers.add(targetSerialNumber);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //deletion of multiple stocks is only successful if the number of deleted stocks is equals"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //to number of serial numbers provided, ensuring all given serial numbers are used."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (stocksDeleted.size() \u003d\u003d targetSerialNumbers.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.INFO, \"All serial numbers found and are deleted successfully\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_STOCK_SUCCESS, stocksAsString(stocksDeleted)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (stocksDeleted.size() \u003e 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String serialNumbersNotFound \u003d String.format(Messages.MESSAGE_SOME_SERIAL_NUMBER_NOT_FOUND,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    serialNumberListAsString(unknownSerialNumbers));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.INFO, \"Some serial numbers found and are deleted successfully\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_STOCK_SOME_SUCCESS, stocksAsString(stocksDeleted))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                            + \"\\n\" + serialNumbersNotFound);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String serialNumbersNotFound \u003d String.format(Messages.MESSAGE_SERIAL_NUMBER_NOT_FOUND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    serialNumberListAsString(unknownSerialNumbers));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.INFO, \"All serial numbers are not found. No deletion occurs.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new CommandException(serialNumbersNotFound);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Displays the list of stocks in a clearer view, with each subsequent stock moved to the next line."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param stockList The list of stocks to convert to String."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The String depicting each stock in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String stocksAsString(List\u003cStock\u003e stockList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String stocksAsString \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c stockList.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            stocksAsString +\u003d \"\\n\" + stockList.get(i).toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return stockList.size() \u003d\u003d 0 ? \"No stocks deleted\" : stocksAsString;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Displays the list of serial numbers in a clearer view, with each subsequent serial number moved"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * to the next line."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param serialNumberList The list of serial numbers to convert to String."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The String depicting each serial number in the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String serialNumberListAsString(List\u003cSerialNumber\u003e serialNumberList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String serialNumbersAsString \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c serialNumberList.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumbersAsString +\u003d \"\\n\" + serialNumberList.get(i).toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumbersAsString;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 targetSerialNumbers.equals(((DeleteCommand) other).targetSerialNumbers)); // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 100,
      "Ashley-Lau": 6,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, null, false, false, null, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.commons.util.FindUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all stocks whose fields contain any of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Parameters (any combination, in any order, of the following four fields):\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_NAME + \" KEYWORD [more KEYWORDS which will be matched with Name field of stock]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_SOURCE + \" KEYWORD [more KEYWORDS which will be matched with Source field of stock]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \" KEYWORD [more KEYWORDS which will be matched with SerialNumber field of stock]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_LOCATION + \" KEYWORD [more KEYWORDS which will be matched with Location field of stock]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/ pork 100grams  s/ farm\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cFieldContainsKeywordsPredicate\u003e predicates; // list of predicates to filter stocks by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final Predicate\u003cStock\u003e combinedPredicates; // combined predicates to filter stocks by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Constructs a FindCommand object initialised with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * a list of predicates to filter and find stocks by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param predicates list of predicates to filter stocks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public FindCommand(List\u003cFieldContainsKeywordsPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(predicates);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.combinedPredicates \u003d FindUtil.getCombinedPredicatesWithOr(predicates);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // status message to show what user has searched for"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String statusMessage \u003d \"Searching for:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + predicates.stream().map(Object::toString)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .reduce((predicate, next) -\u003e predicate + \", \" + next).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // updates the filtered stock list based on the combined predicates to test and filter stocks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // based on all of user\u0027s search fields"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        model.updateFilteredStockList(combinedPredicates);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new CommandResult(statusMessage + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + String.format(Messages.MESSAGE_STOCKS_LISTED_OVERVIEW, model.getFilteredStockList().size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 42,
      "Ashley-Lau": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/FindExactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.commons.util.FindUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class FindExactCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findexact\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all stocks whose fields match all of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Parameters (any combination, in any order, of the following four fields):\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_NAME + \" KEYWORD [more KEYWORDS which will be matched with Name field of stock]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_SOURCE + \" KEYWORD [more KEYWORDS which will be matched with Source field of stock]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \" KEYWORD [more KEYWORDS which will be matched with SerialNumber field of stock]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_LOCATION + \" KEYWORD [more KEYWORDS which will be matched with Location field of stock]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/ pork 100grams  s/ farm\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cFieldContainsKeywordsPredicate\u003e predicates; // list of predicates to filter stocks by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final Predicate\u003cStock\u003e combinedPredicates; // combined predicates to filter stocks by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Constructs a FindCommand object initialised with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * a list of predicates to filter and find stocks by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param predicates list of predicates to filter stocks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public FindExactCommand(List\u003cFieldContainsKeywordsPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(predicates);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.combinedPredicates \u003d FindUtil.getCombinedPredicatesWithAnd(predicates);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // status message to show what user has searched for"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String statusMessage \u003d \"Searching for:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + predicates.stream().map(Object::toString)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .reduce((predicate, next) -\u003e predicate + \", \" + next).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // updates the filtered stock list based on the combined predicates to test and filter stocks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // based on all of user\u0027s search fields"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        model.updateFilteredStockList(combinedPredicates);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new CommandResult(statusMessage + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + String.format(Messages.MESSAGE_STOCKS_LISTED_OVERVIEW, model.getFilteredStockList().size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof FindExactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindExactCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 72
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            + \"Parameters: No parameters\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, null, true, false, null, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 2,
      "-": 17,
      "LimZeWeiDennis": 2
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listing all stocks in inventory\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all stocks in the inventory \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            + \"Parameters: No parameters\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.updateFilteredStockList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 4,
      "-": 19,
      "LimZeWeiDennis": 5
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/NoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Adds a note to an existing stock in the stock book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class NoteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the stock identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"by the serial number of the stock.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"sn/ [SERIAL NUMBER]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"nt/ [NOTE]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sn/111111\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \" nt/ Arrives every thursday 6pm.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_ADD_NOTE_SUCCESS \u003d \"Added note to Stock: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_SERIAL_NUMBER_NOT_FOUND \u003d \"Stock with given serial number does not exists\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final SerialNumber serialNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final Note note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param serialNumber of the stock in the stock book"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param note to add to the stock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public NoteCommand(SerialNumber serialNumber, Note note) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireAllNonNull(serialNumber, note);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes the note command and returns the result."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return The result of successful execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws CommandException If there are any errors."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cStock\u003e lastShownStocks \u003d model.getFilteredStockList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Optional\u003cStock\u003e stockToAddNote \u003d Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Find the stock to add note to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Stock currentStock : lastShownStocks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String currentStockSerialNumber \u003d currentStock.getSerialNumber().getSerialNumberAsString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (currentStockSerialNumber.equals(serialNumber.getSerialNumberAsString())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                stockToAddNote \u003d Optional.of(currentStock);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (stockToAddNote.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new CommandException(MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Stock stockWithAddedNote \u003d createStockWithAddedNote(stockToAddNote.get(), note);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        model.setStock(stockToAddNote.get(), stockWithAddedNote);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new CommandResult(generateSuccessMessage(stockWithAddedNote));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Creates the stock with added note."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stockToAddNote The stock in the list to be updated."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param noteToAdd The note to be added to stock."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return The stock with updated attributes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static Stock createStockWithAddedNote(Stock stockToAddNote, Note noteToAdd) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assert stockToAddNote !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Stock stockWithAddedNote \u003d stockToAddNote.addNote(noteToAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return stockWithAddedNote;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Generates a command execution success message when the note is added to"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * {@code stockToAddNote}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private String generateSuccessMessage(Stock stockWithAddedNote) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return String.format(MESSAGE_ADD_NOTE_SUCCESS, stockWithAddedNote);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!(other instanceof NoteCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NoteCommand otherNoteCommand \u003d (NoteCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return serialNumber.equals(otherNoteCommand.serialNumber)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 note.equals(otherNoteCommand.note);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 112
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/NoteDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Adds a note to an existing stock in the stock book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class NoteDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notedelete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a note,\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \" specified by index of note shown in stock display, or all notes of the stock identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"by the serial number of the stock.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Special note index to delete ALL notes from the stock is 0.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"sn/ [SERIAL NUMBER]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"ni/ [NOTE INDEX]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sn/111111\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \" ni/1 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted note(s) from Stock: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final String MESSAGE_SERIAL_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \"Stock with given serial number does not exists\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final String MESSAGE_INVALID_NOTE_INDEX \u003d \"Note at index specified is not found.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final String MESSAGE_STOCK_HAS_NO_NOTE \u003d \"Stock specified has no note.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final SerialNumber serialNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param serialNumber of the stock in the stock book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param index of note to delete from the stock"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public NoteDeleteCommand(SerialNumber serialNumber, int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireAllNonNull(serialNumber, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes the note command and returns the result."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return The result of successful execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws CommandException If there are any errors."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cStock\u003e lastShownStocks \u003d model.getFilteredStockList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Optional\u003cStock\u003e stockToDeleteNote \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Find the stock to add note to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Stock currentStock : lastShownStocks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String currentStockSerialNumber \u003d currentStock.getSerialNumber().getSerialNumberAsString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (currentStockSerialNumber.equals(serialNumber.getSerialNumberAsString())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                stockToDeleteNote \u003d Optional.of(currentStock);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (stockToDeleteNote.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new CommandException(MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (stockToDeleteNote.get().getNotes().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new CommandException(MESSAGE_STOCK_HAS_NO_NOTE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (index \u003e stockToDeleteNote.get().getNotes().size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_NOTE_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Stock stockWithDeletedNote \u003d createStockWithDeletedNote(stockToDeleteNote.get(), index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        model.setStock(stockToDeleteNote.get(), stockWithDeletedNote);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new CommandResult(generateSuccessMessage(stockWithDeletedNote));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Creates the stock with added note."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stockToDeleteNote The stock in the list to be updated."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param index The index of note to delete from stock."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return The stock with updated attributes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static Stock createStockWithDeletedNote(Stock stockToDeleteNote, int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assert stockToDeleteNote !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Stock stockWithDeletedNote \u003d stockToDeleteNote.deleteNote(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return stockWithDeletedNote;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Generates a command execution success message when the note is deleted from"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * {@code stockToAddNote}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private String generateSuccessMessage(Stock stockWithDeletedNote) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return String.format(MESSAGE_DELETE_NOTE_SUCCESS, stockWithDeletedNote);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!(other instanceof NoteCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NoteDeleteCommand otherNoteCommand \u003d (NoteDeleteCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return serialNumber.equals(otherNoteCommand.serialNumber)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 index \u003d\u003d otherNoteCommand.index;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 124
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/PrintCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Copies all stocks in the inventory into a csv file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class PrintCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"print\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CSV file successfully made.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Error occurred when generating the csv file. \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Copies all stocks in the inventory into a csv file.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + \"Parameters: No parameters\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final char CSV_SEPARATOR \u003d \u0027,\u0027;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ObservableList\u003cStock\u003e stockBookList \u003d model.getStockBook().getStockList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Path csvFilePath \u003d model.getUserPrefs().getCsvFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(model.getUserPrefs().getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            FileUtil.createIfMissing(csvFilePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(csvFilePath.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            writer.append(makeFileCreationTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            writer.append(makeTitleHeader());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            for (Stock stock: stockBookList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                writer.append(printStock(stock));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE + ex.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts the stock into csv format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param stock Stock to be converted into csv format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String of the given stock in the csv format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private String printStock(Stock stock) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(stock.getSerialNumber()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(stock.getName()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(stock.getSource()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(stock.getQuantity()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(stock.getLocation()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets up the headers of the csv file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String header in the csv format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private String makeTitleHeader() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\"Serial Number\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\"Name\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\"Source of stock\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\"Quantity\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\"Location in warehouse\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Gets the timing which the csv file is created in csv format."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String of the given stock in the csv format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private String makeFileCreationTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yy \u0027at\u0027 HH:mm.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Date date \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\"Stock list updated as of: \").append(formatter.format(date))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return (other instanceof PrintCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            );"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 112
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SORT_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.SortUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.SortUtil.Field;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the inventory list according to \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"the given argument. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SORT_ORDER + \"ORDER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SORT_FIELD + \"FIELD \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SORT_ORDER + \"ascending \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SORT_FIELD + \"name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_SORT_STOCK_SUCCESS \u003d \"Sorted stock by %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_INVALID_FIELD \u003d \"The field to be sorted by is not recognized.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER \u003d \"The order to be sorted is not recognized.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SortCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private Field fieldToSort;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private boolean isReversed;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Constructs a new sort command object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param fieldToSort The field to be sorted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param isReversed Indicates if the order will be ascending or descending."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public SortCommand(Field fieldToSort, boolean isReversed) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.fieldToSort \u003d fieldToSort;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.isReversed \u003d isReversed;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Comparator\u003cStock\u003e comparator \u003d isReversed ? SortUtil.generateReverseComparator(fieldToSort)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                : SortUtil.generateComparator(fieldToSort);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        model.sortFilteredStockList(comparator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        logger.log(Level.INFO, \"Sorting successful\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_STOCK_SUCCESS, SortUtil.getFieldDescription(fieldToSort)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 57
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/SourceQuantityDistributionStatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_SOURCE_COMPANY_NOT_FOUND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SourceQuantityDistributionStatisticsCommand extends StatisticsCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String STATISTICS_TYPE \u003d \"source-qd-\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened statistics for source-qd window\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"WARNING: Diagram shown may not be optimal for certain quantities\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SourceQuantityDistributionStatisticsCommand.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String targetSource;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructor for new SourceQuantityDistributionStatisticsCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param targetSource The target source company to show statistics for."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SourceQuantityDistributionStatisticsCommand(String targetSource) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assert(targetSource.length() \u003e 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.targetSource \u003d targetSource;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public CommandResult execute(Model model) throws SourceCompanyNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ObservableList\u003cStock\u003e stockBookList \u003d model.getStockBook().getStockList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Map\u003cString, Integer\u003e nameQuantityTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        stockBookList.forEach(stock -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String sourceString \u003d stock.getSource().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (sourceString.equals(targetSource)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                nameQuantityTable.put(stock.getName().fullName, Integer.parseInt(stock.getQuantity().quantity));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (nameQuantityTable.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.WARNING, \"Valid input but source company not found.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new SourceCompanyNotFoundException(MESSAGE_SOURCE_COMPANY_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //array of size 2, index 0 is statistics type, index 1 is target source company"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] otherStatisticsDetails \u003d {\"source-qd-\", targetSource};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        logger.log(Level.INFO, \"Valid input with found source company.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, nameQuantityTable, false, true, otherStatisticsDetails, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getTargetSource() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return targetSource;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 62
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/SourceStatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SourceStatisticsCommand extends StatisticsCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String STATISTICS_TYPE \u003d \"source\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Opened statistics for source window\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    + \"WARNING: Diagram shown may not be optimal for certain quantities\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SourceStatisticsCommand.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ObservableList\u003cStock\u003e stockBookList \u003d model.getStockBook().getStockList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Map\u003cString, Integer\u003e sourceData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        stockBookList.forEach(stock -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String sourceString \u003d stock.getSource().value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!sourceData.containsKey(sourceString)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                sourceData.put(sourceString, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                int sourceCount \u003d sourceData.get(sourceString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                sourceData.put(sourceString, sourceCount + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //array of size 1, index 0 is statistics type"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] otherStatisticsDetails \u003d {\"source\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        logger.log(Level.INFO, \"Valid input.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, sourceData, false, true, otherStatisticsDetails, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 40
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/StatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public abstract class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"The following are the different statistics you can display:\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"stats st/source: Shows statistics for source companies\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"stats st/source-qd-\u003csource company\u003e: Shows statistics for the quantity \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"distribution in a particular source company\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"Parameters: No parameters\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 12
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/SuggestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class SuggestionCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private String toBeDisplayed;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Constructs a new suggestion command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The suggestion to be displayed to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public SuggestionCommand(String toBeDisplayed) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.toBeDisplayed \u003d toBeDisplayed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Executes current suggestion command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A command result to be passed to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        model.updateFilteredStockList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new CommandResult(toBeDisplayed);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 29
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_INCREMENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NEW_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Updates an existing stock in the stock book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the stock with \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"the given serial number. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \"SERIAL NUMBER \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_INCREMENT_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_NEW_QUANTITY + \"NEW QUANTITY \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SOURCE + \"SOURCE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Note that only one of \" + PREFIX_INCREMENT_QUANTITY"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"and \" + PREFIX_NEW_QUANTITY"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"can be specified. \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"You may provide more than one serial number \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \"CS2103 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_INCREMENT_QUANTITY + \"2103 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_NAME + \"CS2103 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SOURCE + \"National University of Singapore \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_LOCATION + \"Group 3 \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_UPDATE_STOCK_SUCCESS \u003d \"Updated Stock: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to update must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STOCK \u003d \"This stock already exists in the stock book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_SERIAL_NUMBER_NOT_FOUND \u003d \"Stock with given serial number does not exists\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_QUANTITY_PREFIXES \u003d \"You can only use one of the prefix iq/ or nq/\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private final UpdateStockDescriptor updateStockDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Constructs a new update command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param updateStockDescriptor Details to be updated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateCommand(UpdateStockDescriptor updateStockDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(updateStockDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.updateStockDescriptor \u003d updateStockDescriptor;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Executes the update command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The result of successful execution."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws CommandException If there are any errors."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e lastShownStocks \u003d model.getFilteredStockList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumber\u003e indexes \u003d updateStockDescriptor.getSerialNumbers();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cString\u003e serials \u003d indexes.stream().map((serial) -\u003e serial.getSerialNumberAsString().trim())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e stocksToUpdate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e updatedStocks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Find stocks to be updated"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock currentStock : lastShownStocks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String currentStockSerialNumber \u003d currentStock.getSerialNumber().getSerialNumberAsString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            boolean anyMatches \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            for (String currentSerialNumber : serials) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                if (currentSerialNumber.equals(currentStockSerialNumber)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    anyMatches \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (anyMatches) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                stocksToUpdate.add(currentStock);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Some serial numbers do not exist"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (serials.size() !\u003d stocksToUpdate.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new CommandException(MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update stocks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock stockToUpdate: stocksToUpdate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Stock updatedStock \u003d createUpdatedStock(stockToUpdate, updateStockDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (!stockToUpdate.isSameStock(updatedStock) \u0026\u0026 model.hasStock(updatedStock)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_STOCK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            model.setStock(stockToUpdate, updatedStock);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updatedStocks.add(updatedStock);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        model.updateFilteredStockList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_STOCK_SUCCESS, stocksAsString(updatedStocks)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Displays the list of stocks in a clearer view, with each subsequent stock moved to the next line."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param stockList The list of stocks to be converted to String."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The String listing all stocks in the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private String stocksAsString(List\u003cStock\u003e stockList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String stocksAsString \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 0; i \u003c stockList.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            stocksAsString +\u003d \"\\n\" + stockList.get(i).toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return stockList.size() \u003d\u003d 0 ? \"No stocks updated\" : stocksAsString;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Creates the stock with updated attributes."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param stockToUpdate The stock in the list to be updated."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param updateStockDescriptor The collection of values to be updated."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The stock with updated attributes."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static Stock createUpdatedStock(Stock stockToUpdate, UpdateStockDescriptor updateStockDescriptor)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assert stockToUpdate !\u003d null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Quantity updatedQuantity \u003d updateStockDescriptor.getQuantity().orElse(stockToUpdate.getQuantity());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Name updatedName \u003d updateStockDescriptor.getName().orElse(stockToUpdate.getName());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Source updatedSource \u003d updateStockDescriptor.getSource().orElse(stockToUpdate.getSource());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Location updatedLocation \u003d updateStockDescriptor.getLocation().orElse(stockToUpdate.getLocation());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        SerialNumber stockSerialNumber \u003d stockToUpdate.getSerialNumber();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Optional\u003cQuantityAdder\u003e quantityAdder \u003d updateStockDescriptor.getQuantityAdder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!quantityAdder.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            QuantityAdder valueToBeAdded \u003d quantityAdder.get();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Optional\u003cQuantity\u003e result \u003d valueToBeAdded.incrementQuantity(updatedQuantity);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updatedQuantity \u003d result.orElseThrow(() -\u003e new CommandException(Quantity.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new Stock(updatedName, stockSerialNumber, updatedSource, updatedQuantity, updatedLocation);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand castedOther \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return updateStockDescriptor.equals(((UpdateCommand) other).updateStockDescriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static class UpdateStockDescriptor {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Identity fields"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private List\u003cSerialNumber\u003e serialNumbers;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Data fields"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Source source;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private QuantityAdder quantityAdder;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public UpdateStockDescriptor() { }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * @param toCopy Object to be copied."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public UpdateStockDescriptor(UpdateStockDescriptor toCopy) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setSerialNumbers(toCopy.serialNumbers);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setSource(toCopy.source);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setQuantityAdder(toCopy.quantityAdder);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * Checks if any updates exists."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * @return A boolean value indicating if an update exists."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, serialNumbers, source, quantity, location);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setSerialNumbers(List\u003cSerialNumber\u003e serialNumbers) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.serialNumbers \u003d serialNumbers;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public List\u003cSerialNumber\u003e getSerialNumbers() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            assert serialNumbers !\u003d null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return serialNumbers;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setSource(Source source) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.source \u003d source;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cSource\u003e getSource() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(source);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setQuantityAdder(QuantityAdder quantityAdder) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.quantityAdder \u003d quantityAdder;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cQuantityAdder\u003e getQuantityAdder() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(quantityAdder);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (!(other instanceof UpdateStockDescriptor)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            UpdateStockDescriptor castedOther \u003d (UpdateStockDescriptor) other;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return getName().equals(castedOther.getName())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getSerialNumbers().equals(castedOther.getSerialNumbers())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getSource().equals(castedOther.getSource())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(castedOther.getQuantity())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getLocation().equals(castedOther.getLocation())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getQuantityAdder().equals(castedOther.getQuantityAdder());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 2,
      "AudreyFelicio": 293,
      "Ashley-Lau": 3
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/exceptions/SourceCompanyNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.SourceQuantityDistributionStatisticsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents an error which occurs during execution of a {@link SourceQuantityDistributionStatisticsCommand}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SourceCompanyNotFoundException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SourceCompanyNotFoundException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs a new {@code SourceCompanyNotFoundException} with the specified detail"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code message} and {@code cause}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SourceCompanyNotFoundException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 20
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SOURCE, PREFIX_QUANTITY, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // Checks if all the prefixes only appear once in the given command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!doesPrefixesAppearOnce(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_QUANTITY)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_HEADER_FIELD, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get().toLowerCase());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumber serialNumber \u003d SerialNumber.generateDefaultSerialNumber();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Source source \u003d ParserUtil.parseSource(argMultimap.getValue(PREFIX_SOURCE).get().toLowerCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get().toLowerCase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock stock \u003d new Stock(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new AddCommand(stock);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if all of the prefixes appears only once in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static boolean doesPrefixesAppearOnce(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 37,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_SOURCE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_SERIAL_NUMBER \u003d new Prefix(\"sn/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Prefix PREFIX_NEW_QUANTITY \u003d new Prefix(\"nq/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Prefix PREFIX_INCREMENT_QUANTITY \u003d new Prefix(\"iq/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"nt/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final Prefix PREFIX_NOTE_INDEX \u003d new Prefix(\"ni/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final Prefix PREFIX_STATISTICS_TYPE \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Prefix PREFIX_SORT_FIELD \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Prefix PREFIX_SORT_ORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /* Prefix values descriptions */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_NAME_DESCRIPTION \u003d \"\u003cname\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_SOURCE_DESCRIPTION \u003d \"\u003csource\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_LOCATION_DESCRIPTION \u003d \"\u003clocation\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_QUANTITY_DESCRIPTION \u003d \"\u003cquantity\u003e\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_SERIAL_NUMBER_DESCRIPTION \u003d \"\u003cserial number\u003e\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String PREFIX_NOTE_DESCRIPTION \u003d \"\u003cnote\u003e\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String PREFIX_NOTE_INDEX_DESCRIPTION \u003d \"\u003cnote index\u003e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String PREFIX_STATISTICS_TYPE_DESCRIPTION \u003d \"\u003cstatistics type\u003e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_NEW_QUANTITY_DESCRIPTION \u003d \"\u003cnew quantity\u003e\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_INCREMENT_QUANTITY_DESCRIPTION \u003d \"\u003cincrement value\u003e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_SORT_FIELD_DESCRIPTION \u003d \"\u003cfield\u003e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String PREFIX_SORT_ORDER_DESCRIPTION \u003d \"\u003corder\u003e\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns a list containing all possible prefixes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A list containing all possible prefixes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static List\u003cPrefix\u003e getAllPossiblePrefixes() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allPrefixes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_SOURCE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        allPrefixes.add(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_NEW_QUANTITY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_INCREMENT_QUANTITY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        allPrefixes.add(PREFIX_NOTE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        allPrefixes.add(PREFIX_NOTE_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        allPrefixes.add(PREFIX_STATISTICS_TYPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_SORT_FIELD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_SORT_ORDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return allPrefixes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns an array containing all possible prefixes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return An array containing all possible prefixes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Prefix[] getAllPossiblePrefixesAsArray() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPrefix\u003e allPrefixes \u003d getAllPossiblePrefixes();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Prefix[] allPrefixesInArray \u003d allPrefixes.toArray(new Prefix[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return allPrefixesInArray;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns the default parameter description of a certain prefix."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param prefix The prefix that needs parameter description."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The default parameter description of the given prefix."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static String getDefaultDescription(Prefix prefix) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (prefix.equals(PREFIX_NAME)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_SOURCE)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_SOURCE_DESCRIPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_LOCATION)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_LOCATION_DESCRIPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_QUANTITY)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_QUANTITY_DESCRIPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_SERIAL_NUMBER)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_SERIAL_NUMBER_DESCRIPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (prefix.equals(PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return PREFIX_NOTE_DESCRIPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (prefix.equals(PREFIX_NOTE_INDEX)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return PREFIX_NOTE_INDEX_DESCRIPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (prefix.equals(PREFIX_STATISTICS_TYPE)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return PREFIX_STATISTICS_TYPE_DESCRIPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_NEW_QUANTITY)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_NEW_QUANTITY_DESCRIPTION;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_INCREMENT_QUANTITY)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_INCREMENT_QUANTITY_DESCRIPTION;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_SORT_FIELD)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_SORT_FIELD_DESCRIPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else if (prefix.equals(PREFIX_SORT_ORDER)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return PREFIX_SORT_ORDER_DESCRIPTION;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 21,
      "AudreyFelicio": 67,
      "kc-98": 5,
      "Ashley-Lau": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCommandParser.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Set\u003cSerialNumber\u003e serialNumberSet \u003d ParserUtil.parseSerialNumberSet(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new DeleteCommand(serialNumberSet);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid headers/inputs!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "kc-98": 10,
      "Ashley-Lau": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/DeleteNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NOTE_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.NoteDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cNoteDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final String MESSAGE_INVALID_NOTE_INDEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \"Note index must be a valid positive integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] validPrefixesForDeleteNote \u003d { PREFIX_SERIAL_NUMBER, PREFIX_NOTE_INDEX };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] invalidPrefixesForDeleteNote \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ParserUtil.getInvalidPrefixesForCommand(validPrefixesForDeleteNote);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public NoteDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, validPrefixesForDeleteNote);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check if command format is correct"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!areAllPrefixesPresent(argMultimap, validPrefixesForDeleteNote)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || isAnyPrefixPresent(argMultimap, invalidPrefixesForDeleteNote)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || isDuplicatePrefixPresent(argMultimap, validPrefixesForDeleteNote)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    NoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String serialNumberInput \u003d argMultimap.getValue(PREFIX_SERIAL_NUMBER).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumber serialNumber \u003d ParserUtil.parseSerialNumber(serialNumberInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String noteIndexInput \u003d argMultimap.getValue(PREFIX_NOTE_INDEX).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!noteIndexInput.matches(\"[0-9]+\") || noteIndexInput.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_NOTE_INDEX,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    NoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        int noteIndex \u003d Integer.parseInt(noteIndexInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new NoteDeleteCommand(serialNumber, noteIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if any one of the prefixes does not contain an empty {@code Optional} value"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if a prefix specified is present"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if all prefixes specified does not contain an empty {@code Optional} value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if all prefixes specified is present"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean areAllPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if duplicate prefixes are present when parsing command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if duplicate prefix is present"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isDuplicatePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check for duplicate prefixes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Prefix prefix: prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (argumentMultimap.getAllValues(prefix).size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 90
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SerialNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] allPossiblePrefixes \u003d CliSyntax.getAllPossiblePrefixesAsArray();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            validPrefixesForFind \u003d { PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_SERIAL_NUMBER };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] invalidPrefixesForFind \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ParserUtil.getInvalidPrefixesForCommand(validPrefixesForFind);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                ArgumentTokenizer.tokenize(args, allPossiblePrefixes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check if command format is correct"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!isAnyPrefixPresent(argMultimap, validPrefixesForFind)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || isAnyPrefixPresent(argMultimap, invalidPrefixesForFind)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (isDuplicatePrefixPresent(argMultimap, validPrefixesForFind)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_HEADER_FIELD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Get the predicates to test to find stocks wanted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cFieldContainsKeywordsPredicate\u003e predicatesToTest \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                parsePrefixAndKeywords(argMultimap, validPrefixesForFind);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new FindCommand(predicatesToTest);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if any one of the prefixes does not contain"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * an empty {@code Optional} value in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if a prefix specified is present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isAnyPrefixPresent("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if duplicate prefixes are present when parsing command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if duplicate prefix is present"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isDuplicatePrefixPresent("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check for duplicate prefixes"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Prefix prefix: prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (argumentMultimap.getAllValues(prefix).size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a list of predicates to filter stocks based on user\u0027s search fields and terms."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return list of predicates to filter stocks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static List\u003cFieldContainsKeywordsPredicate\u003e parsePrefixAndKeywords("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .map(prefix -\u003e getPredicate(prefix, argumentMultimap.getValue(prefix).get()))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a field predicate to test whether a {@code Stock}\u0027s {@code field} matches or contains"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * any of the keywords given."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefix prefix for field"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param keywordsToFind keywords to match with the stock\u0027s field"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return predicate filter stocks based on field"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static FieldContainsKeywordsPredicate getPredicate(Prefix prefix, String keywordsToFind) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        final FieldContainsKeywordsPredicate fieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String trimmedKeywordsToFind \u003d keywordsToFind.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] keywords \u003d trimmedKeywordsToFind.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        switch(prefix.getPrefix()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"n/\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test name field of stock"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new NameContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"sn/\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test serial number field of stock"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new SerialNumberContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"s/\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test source field of stock"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new SourceContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"l/\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test location stored field of stock"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new LocationContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + prefix);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return fieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 129,
      "Ashley-Lau": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/FindExactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.FindExactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SerialNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Parses input arguments and creates a new FindExactCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class FindExactCommandParser implements Parser\u003cFindExactCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] allPossiblePrefixes \u003d CliSyntax.getAllPossiblePrefixesAsArray();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            validPrefixesForFindExact \u003d { PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_SERIAL_NUMBER };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] invalidPrefixesForFindExact \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ParserUtil.getInvalidPrefixesForCommand(validPrefixesForFindExact);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public FindExactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                ArgumentTokenizer.tokenize(args, allPossiblePrefixes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check if command format is correct"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!isAnyPrefixPresent(argMultimap, validPrefixesForFindExact)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || isAnyPrefixPresent(argMultimap, invalidPrefixesForFindExact)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (isDuplicatePrefixPresent(argMultimap, validPrefixesForFindExact)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_HEADER_FIELD, FindExactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Get the predicates to test to find the stocks that match"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cFieldContainsKeywordsPredicate\u003e predicatesToTest \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                parsePrefixAndKeywords(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new FindExactCommand(predicatesToTest);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if any one of the prefixes does not contain an empty {@code Optional} value"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if duplicate prefixes are present when parsing command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if duplicate prefix is present"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isDuplicatePrefixPresent("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check for duplicate prefixes"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Prefix prefix: prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (argumentMultimap.getAllValues(prefix).size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a list of predicates to filter stocks based on user\u0027s search fields and terms."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return list of predicates to filter stocks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static List\u003cFieldContainsKeywordsPredicate\u003e parsePrefixAndKeywords(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                                                                 Prefix... prefixes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .map(prefix -\u003e getPredicate(prefix, argumentMultimap.getValue(prefix).get()))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a field predicate to test whether a {@code Stock}\u0027s {@code field} matches or contains"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * any of the keywords given."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefix prefix for field"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param keywordsToFind keywords to match with the stock\u0027s field"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return predicate filter stocks based on field"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static FieldContainsKeywordsPredicate getPredicate(Prefix prefix, String keywordsToFind) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        final FieldContainsKeywordsPredicate fieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String trimmedKeywordsToFind \u003d keywordsToFind.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] keywords \u003d trimmedKeywordsToFind.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        switch(prefix.getPrefix()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"n/\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test name field of stock"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new NameContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"sn/\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test serial number field of stock"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new SerialNumberContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"s/\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test source field of stock"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new SourceContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"l/\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // predicate to test location stored field of stock"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new LocationContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + prefix);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return fieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 146
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     * and returns an HelpCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        // Checks if all the prefixes only appear once in the given command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        if (!hasNoArguments(args)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public boolean hasNoArguments(String args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        return args.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LimZeWeiDennis": 29
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        // Checks if all the prefixes only appear once in the given command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        if (!hasNoArguments(args)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public boolean hasNoArguments(String args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        return args.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "LimZeWeiDennis": 28
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/NoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.NoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class NoteCommandParser implements Parser\u003cNoteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] validPrefixesForNote \u003d { PREFIX_NOTE, PREFIX_SERIAL_NUMBER };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Prefix[] invalidPrefixesForNote \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ParserUtil.getInvalidPrefixesForCommand(validPrefixesForNote);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public NoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, validPrefixesForNote);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check if command format is correct"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!areAllPrefixesPresent(argMultimap, validPrefixesForNote)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || isAnyPrefixPresent(argMultimap, invalidPrefixesForNote)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || isDuplicatePrefixPresent(argMultimap, validPrefixesForNote)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    NoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String serialNumberInput \u003d argMultimap.getValue(PREFIX_SERIAL_NUMBER).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumber serialNumber \u003d ParserUtil.parseSerialNumber(serialNumberInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String noteInput \u003d argMultimap.getValue(PREFIX_NOTE).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Note noteToAdd \u003d ParserUtil.parseNote(noteInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new NoteCommand(serialNumber, noteToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if any one of the prefixes does not contain an empty {@code Optional} value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if a prefix specified is present"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if all prefixes specified does not contain an empty {@code Optional} value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if all prefixes specified is present"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean areAllPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if duplicate prefixes are present when parsing command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if duplicate prefix is present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isDuplicatePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Check for duplicate prefixes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Prefix prefix: prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (argumentMultimap.getAllValues(prefix).size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 82
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Parses a {@code String source} into an {@code Source}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws ParseException if the given {@code source} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Source parseSource(String source) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String trimmedSource \u003d source.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Source.isValidSource(trimmedSource)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Source(trimmedSource);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses a {@code String note} into a {@code Note}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws ParseException if the given {@code note} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Note parseNote(String note) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String trimmedNote \u003d note.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!Note.isValidNote(trimmedNote)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new Note(trimmedNote);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses a {@code String serialNumber} into a {@code SerialNumber}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws ParseException if the given {@code serialNumber} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static SerialNumber parseSerialNumber(String serialNumber) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String trimmedSerialNumber \u003d serialNumber.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(trimmedSerialNumber)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new SerialNumber(trimmedSerialNumber);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Parses a {@code String serialNumber} into an {@code SerialNumber}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws ParseException if the given {@code serialNumber} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Set\u003cSerialNumber\u003e parseSerialNumberSet(String serialNumber) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String trimmedSerialNumber \u003d serialNumber.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] withoutPrefix \u003d trimmedSerialNumber.split(\"sn/\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //a valid array after splitting should be at length 2, index 0 being an empty string and 1"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //being the actual serial number."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (withoutPrefix.length \u003c 2) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cSerialNumber\u003e serialNumberSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 1; i \u003c withoutPrefix.length; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String currentSerialNumberInString \u003d withoutPrefix[i];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!SerialNumber.isValidSerialNumber(currentSerialNumberInString)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new ParseException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumberSet.add(new SerialNumber(currentSerialNumberInString.trim()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSet;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Parses {@code valueToBeAdded} into a {@code QuantityAdder}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param valueToBeAdded The value to be added into a certain quantity."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new quantity adder containing the value to be added."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws ParseException If there are parsing errors."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static QuantityAdder parseQuantityAdder(String valueToBeAdded) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(valueToBeAdded);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String trimmedValue \u003d valueToBeAdded.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!QuantityAdder.isValidValue(trimmedValue)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(QuantityAdder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new QuantityAdder(trimmedValue);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns a list containing all the prefixes provided by the input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param prefixes The prefixes to be added into the list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The list containing all the prefixes."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static List\u003cPrefix\u003e generateListOfPrefixes(Prefix ... prefixes) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e listOfPrefixes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            listOfPrefixes.add(prefix);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return listOfPrefixes;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns an array containing all invalid prefixes for the command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param validPrefixes prefixes that are valid for the command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return An array containing all invalid prefixes for the command."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Prefix[] getInvalidPrefixesForCommand(Prefix[] validPrefixes) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPrefix\u003e allPossiblePrefixes \u003d CliSyntax.getAllPossiblePrefixes();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Prefix prefix : validPrefixes) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            allPossiblePrefixes.remove(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Prefix[] allInvalidPrefixes \u003d allPossiblePrefixes.toArray(new Prefix[0]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return allInvalidPrefixes;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 51,
      "AudreyFelicio": 33,
      "kc-98": 32,
      "Ashley-Lau": 31,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/PrintCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.PrintCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Parses input arguments and creates a new PrintCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class PrintCommandParser implements Parser\u003cPrintCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PrintCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * and returns an PrintCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public PrintCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // Checks if all the prefixes only appear once in the given command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!hasNoArguments(args)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrintCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new PrintCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private boolean hasNoArguments(String args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return args.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 31
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.SortCommand.MESSAGE_INVALID_FIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.SortCommand.MESSAGE_INVALID_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SORT_FIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.SortUtil.Field;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.SortUtil.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SortCommandParser.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Parses {@code args} into a sort command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param args The user input to be parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new sort command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws ParseException If a parsing error occurs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SORT_ORDER, PREFIX_SORT_FIELD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SORT_FIELD).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SORT_ORDER).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        boolean isReversed \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Order order \u003d Order.valueOf(argMultimap.getValue(PREFIX_SORT_ORDER).get().toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            switch (order) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            case ASCENDING:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                isReversed \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            case DESCENDING:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                isReversed \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Field field \u003d Field.valueOf(argMultimap.getValue(PREFIX_SORT_FIELD).get().toUpperCase());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return new SortCommand(field, isReversed);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            logger.log(Level.WARNING, \"Field not valid\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FIELD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 67
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/StatisticsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.SourceQuantityDistributionStatisticsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.SourceStatisticsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsCommandParser.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public StatisticsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] trimmedStatisticsType \u003d userInput.trim().split(\"st/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //a valid input will lead to an array of index 0 as \"\", index 1 as the statistics type"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (trimmedStatisticsType.length !\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.WARNING, \"Multiple headers not allowed\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String input \u003d trimmedStatisticsType[1].toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String type \u003d getStatisticsType(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        case SourceStatisticsCommand.STATISTICS_TYPE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new SourceStatisticsCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        case SourceQuantityDistributionStatisticsCommand.STATISTICS_TYPE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new SourceQuantityDistributionStatisticsCommand(getSourceCompany(input));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.WARNING, \"Statistics type not found!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * To obtain the type of statistics command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The statistics type."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws ParseException if no such type of statistics command is found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getStatisticsType(String input) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (input.length() \u003e\u003d 10 \u0026\u0026 input.startsWith(\"source-qd-\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return \"source-qd-\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (input.equals(\"source\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return \"source\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.WARNING, \"Statistics type not found!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //for extracting target company from source-qd types"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getSourceCompany(String input) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String targetSourceCompany \u003d input.substring(10);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //exception thrown here if the target source company is missing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (targetSourceCompany.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.log(Level.WARNING, \"Source company not found!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return targetSourceCompany;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 75
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/StockBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.FindExactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.NoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.NoteDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.PrintCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String trimmedUserInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(trimmedUserInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case FindExactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return new FindExactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case NoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return new NoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case NoteDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        case PrintCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                return new PrintCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                return new SuggestionCommandParser(commandWord, ex.getMessage()).parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return new SuggestionCommandParser(commandWord).parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 27,
      "AudreyFelicio": 41,
      "kc-98": 11,
      "Ashley-Lau": 21,
      "-": 40,
      "LimZeWeiDennis": 5
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/SuggestionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.ADD_COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.DELETE_COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.FIND_COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.FIND_EXACT_COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.NOTE_COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.NOTE_DELETE_COMMAND_WORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.SORT_COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.STATISTICS_COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandWords.UPDATE_COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_INCREMENT_QUANTITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NEW_QUANTITY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NOTE_INDEX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SORT_FIELD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_STATISTICS_TYPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.SortUtil.Field;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.SortUtil.Order;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.SuggestionUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.FindExactCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.NoteCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.NoteDeleteCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.PrintCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.SuggestionCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class SuggestionCommandParser implements Parser\u003cSuggestionCommand\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final String MESSAGE_SUGGESTION \u003d \"Do you mean: \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private String faultyCommandWord;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private String commandWord;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private String headerErrorMessage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private String bodyErrorMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Constructs a new suggestion command parser."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param faultyCommandWord The command word to be corrected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public SuggestionCommandParser(String faultyCommandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.faultyCommandWord \u003d faultyCommandWord;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        commandWord \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.headerErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.bodyErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Constructs a new suggestion command parser with error message from another parser."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param commandWord The command word to be executed if all went well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param errorMessage The parse error thrown from another parser."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public SuggestionCommandParser(String commandWord, String errorMessage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String[] splitHeaderAndBody \u003d errorMessage.split(\"\\n\", 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        faultyCommandWord \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        headerErrorMessage \u003d splitHeaderAndBody[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        bodyErrorMessage \u003d splitHeaderAndBody.length \u003c 2 ? \"\" : splitHeaderAndBody[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Parses {@code args} into a suggestion command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param args The user input to be parsed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new suggestion command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws ParseException If any parsing errors occurs."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public SuggestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                        args, PREFIX_SERIAL_NUMBER, PREFIX_INCREMENT_QUANTITY, PREFIX_NEW_QUANTITY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                        PREFIX_NAME, PREFIX_SOURCE, PREFIX_LOCATION, PREFIX_QUANTITY, PREFIX_SORT_FIELD,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                        PREFIX_SORT_ORDER"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cString\u003e allCommandWords \u003d CommandWords.getAllCommandWords();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        StringBuilder toBeDisplayed \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String suggestedCommandWord \u003d faultyCommandWord;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        int bestEditDistanceSoFar \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (String commandWord: allCommandWords) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            int currentEditDistance \u003d SuggestionUtil.minimumEditDistance(faultyCommandWord, commandWord);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (currentEditDistance \u003c bestEditDistanceSoFar) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                bestEditDistanceSoFar \u003d currentEditDistance;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                suggestedCommandWord \u003d commandWord;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (suggestedCommandWord.equals(faultyCommandWord) \u0026\u0026 commandWord.equals(\"\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!commandWord.equals(\"\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            suggestedCommandWord \u003d commandWord;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (headerErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(MESSAGE_UNKNOWN_COMMAND + \"\\n\" + MESSAGE_SUGGESTION);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(headerErrorMessage + \"\\n\" + MESSAGE_SUGGESTION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        switch (suggestedCommandWord) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateExitSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateHelpSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateListSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateAddSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateDeleteSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            generateStatisticsSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateFindSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateUpdateSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case FindExactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateFindExactSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case NoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            generateNoteSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case NoteDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            generateDeleteNoteSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        case PrintCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            generatePrintSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            generateSortSuggestion(toBeDisplayed, argMultimap);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new SuggestionCommand(toBeDisplayed.toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty sort command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateSortSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(SORT_COMMAND_WORD);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Prefix fieldPrefix \u003d PREFIX_SORT_FIELD;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Prefix orderPrefix \u003d PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!argMultimap.getValue(orderPrefix).isPresent()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\" \" + orderPrefix + CliSyntax.getDefaultDescription(orderPrefix));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String description \u003d argMultimap.getValue(orderPrefix).get();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String suggestedDescription \u003d description;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            int bestEditDistanceSoFar \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            for (Order order : Order.values()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String orderDescription \u003d order.toString().toLowerCase();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                int currentEditDistance \u003d SuggestionUtil.minimumEditDistance(description, orderDescription);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                if (currentEditDistance \u003c bestEditDistanceSoFar) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    bestEditDistanceSoFar \u003d currentEditDistance;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    suggestedDescription \u003d orderDescription;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\" \" + orderPrefix + suggestedDescription);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!argMultimap.getValue(fieldPrefix).isPresent()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\" \" + fieldPrefix + CliSyntax.getDefaultDescription(fieldPrefix));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String description \u003d argMultimap.getValue(fieldPrefix).get();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String suggestedDescription \u003d description;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            int bestEditDistanceSoFar \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            for (Field field : Field.values()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String fieldDescription \u003d field.toString().toLowerCase();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                int currentEditDistance \u003d SuggestionUtil.minimumEditDistance(description, fieldDescription);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                if (currentEditDistance \u003c bestEditDistanceSoFar) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    bestEditDistanceSoFar \u003d currentEditDistance;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    suggestedDescription \u003d fieldDescription;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\" \" + fieldPrefix + suggestedDescription);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty find exact command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateFindExactSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes(PREFIX_NAME, PREFIX_SOURCE,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                PREFIX_SERIAL_NUMBER, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(FIND_EXACT_COMMAND_WORD);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 0; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (argMultimap.getValue(currentPrefix).isPresent()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + argMultimap.getValue(currentPrefix).get());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + FindExactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty update command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateUpdateSuggestion(StringBuilder toBeDisplayed,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes(PREFIX_SERIAL_NUMBER,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                PREFIX_INCREMENT_QUANTITY, PREFIX_NEW_QUANTITY, PREFIX_NAME, PREFIX_SOURCE, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(UPDATE_COMMAND_WORD);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        boolean isIncrementQuantityPresent \u003d argMultimap.getValue(PREFIX_INCREMENT_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        boolean isNewQuantityPresent \u003d argMultimap.getValue(PREFIX_NEW_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (isIncrementQuantityPresent \u003d\u003d isNewQuantityPresent) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            // both present or both not present"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            int removeRng \u003d new Random().nextInt(2);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (removeRng \u003d\u003d 0) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                allowedPrefixes.remove(PREFIX_INCREMENT_QUANTITY);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                allowedPrefixes.remove(PREFIX_NEW_QUANTITY);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\" \" + PREFIX_SERIAL_NUMBER + CliSyntax.getDefaultDescription(PREFIX_SERIAL_NUMBER));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cString\u003e keywords \u003d argMultimap.getAllValues(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (String serialNumber : keywords) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\" \" + PREFIX_SERIAL_NUMBER + serialNumber);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 1; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            boolean isPresent \u003d argMultimap.getValue(currentPrefix).isPresent();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (isPresent) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                description \u003d argMultimap.getValue(currentPrefix).get();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            boolean isEmpty \u003d description.equals(\"\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (!isEmpty) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + description);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } else if (isEmpty \u0026\u0026 isPresent) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + CliSyntax.getDefaultDescription(currentPrefix));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty find command."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateFindSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes(PREFIX_NAME, PREFIX_SOURCE,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                PREFIX_SERIAL_NUMBER, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(FIND_COMMAND_WORD);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 0; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (argMultimap.getValue(currentPrefix).isPresent()) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + argMultimap.getValue(currentPrefix).get());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Generates suggestion for faulty note command."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private void generateNoteSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes("
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                PREFIX_SERIAL_NUMBER, PREFIX_NOTE);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        toBeDisplayed.append(NOTE_COMMAND_WORD);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (int i \u003d 0; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\" \").append(currentPrefix).append(CliSyntax.getDefaultDescription(currentPrefix));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + NoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Generates suggestion for faulty deletenote command."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private void generateDeleteNoteSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes("
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                PREFIX_SERIAL_NUMBER, PREFIX_NOTE_INDEX);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        toBeDisplayed.append(NOTE_DELETE_COMMAND_WORD);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (int i \u003d 0; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            toBeDisplayed.append(\" \").append(currentPrefix)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    .append(CliSyntax.getDefaultDescription(currentPrefix));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + NoteDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty delete command."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateDeleteSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(DELETE_COMMAND_WORD);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 0; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (!argMultimap.getValue(currentPrefix).isPresent()) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + CliSyntax.getDefaultDescription(currentPrefix));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            List\u003cString\u003e keywords \u003d argMultimap.getAllValues(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            for (String serialNumber : keywords) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                boolean isEmpty \u003d serialNumber.equals(\"\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                String description \u003d isEmpty ? CliSyntax.getDefaultDescription(currentPrefix) : serialNumber;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + description);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Generates suggestion for faulty statistics command."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private void generateStatisticsSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes(PREFIX_STATISTICS_TYPE);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        toBeDisplayed.append(STATISTICS_COMMAND_WORD);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!argMultimap.getValue(currentPrefix).isPresent()) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + CliSyntax.getDefaultDescription(currentPrefix));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            List\u003cString\u003e keywords \u003d argMultimap.getAllValues(PREFIX_STATISTICS_TYPE);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (String statisticsType : keywords) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + statisticsType);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + StatisticsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty add command."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateAddSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allowedPrefixes \u003d ParserUtil.generateListOfPrefixes(PREFIX_NAME, PREFIX_SOURCE,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                 PREFIX_QUANTITY, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(ADD_COMMAND_WORD);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 0; i \u003c allowedPrefixes.size(); i++) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Prefix currentPrefix \u003d allowedPrefixes.get(i);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (argMultimap.getValue(currentPrefix).isPresent()) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                description \u003d argMultimap.getValue(currentPrefix).get();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            boolean isEmpty \u003d description.equals(\"\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + CliSyntax.getDefaultDescription(currentPrefix));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                toBeDisplayed.append(\" \" + currentPrefix + description);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty list command."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateListSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(CommandWords.LIST_COMMAND_WORD);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty help command."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateHelpSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(CommandWords.HELP_COMMAND_WORD);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!bodyErrorMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + bodyErrorMessage);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            toBeDisplayed.append(\"\\n\" + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Generates suggestion for faulty exit command."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private void generateExitSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        toBeDisplayed.append(CommandWords.EXIT_COMMAND_WORD);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Generates suggestion for faulty print command."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param toBeDisplayed The accumulated suggestion to be displayed to the user."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param argMultimap The parsed user input fields."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private void generatePrintSuggestion(StringBuilder toBeDisplayed, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        toBeDisplayed.append(CommandWords.PRINT_COMMAND_WORD);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 75,
      "AudreyFelicio": 406,
      "kc-98": 33,
      "Ashley-Lau": 15
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/UpdateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.UpdateCommand.MESSAGE_TOO_MANY_QUANTITY_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_INCREMENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NEW_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Parses user input and creates a new update command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Parses {@code args} into an update command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param args The user input to be parsed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new update command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws ParseException If a parsing error occurs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        args, PREFIX_SERIAL_NUMBER, PREFIX_INCREMENT_QUANTITY, PREFIX_NEW_QUANTITY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                        PREFIX_NAME, PREFIX_SOURCE, PREFIX_LOCATION, PREFIX_QUANTITY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allPrefixes \u003d CliSyntax.getAllPossiblePrefixes();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // If unallowed prefixes are provided"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // If serial number is not provided"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Check if there are unallowed duplicate prefixes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Prefix prefix: allPrefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (argMultimap.getAllValues(prefix).size() \u003e\u003d 2 \u0026\u0026 !prefix.equals(PREFIX_SERIAL_NUMBER)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // If both increment and new quantity prefix provided"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INCREMENT_QUANTITY).isPresent()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_NEW_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(MESSAGE_TOO_MANY_QUANTITY_PREFIXES + \"\\n\" + UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor updateStockDescriptor \u003d new UpdateStockDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Store the serial number provided"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cString\u003e keywords \u003d argMultimap.getAllValues(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        ArrayList\u003cSerialNumber\u003e serialNumbers \u003d keywords.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .map((keyword) -\u003e new SerialNumber(keyword.toLowerCase()))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        updateStockDescriptor.setSerialNumbers(serialNumbers);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update name with new name provided"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String nameLowerCased \u003d argMultimap.getValue(PREFIX_NAME).get().toLowerCase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setName(ParserUtil.parseName(nameLowerCased));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update source with new source provided"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SOURCE).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String sourceLowerCased \u003d argMultimap.getValue(PREFIX_SOURCE).get().toLowerCase();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setSource(ParserUtil.parseSource(sourceLowerCased));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update quantity with new quantity provided"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NEW_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String newQuantity \u003d argMultimap.getValue(PREFIX_NEW_QUANTITY).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setQuantity(ParserUtil.parseQuantity(newQuantity));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Increment quantity with increment value provided"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INCREMENT_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String incrementValue \u003d argMultimap.getValue(PREFIX_INCREMENT_QUANTITY).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setQuantityAdder(ParserUtil.parseQuantityAdder(incrementValue));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update location with new location provided"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String locationLowerCased \u003d argMultimap.getValue(PREFIX_LOCATION).get().toLowerCase();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setLocation(ParserUtil.parseLocation(locationLowerCased));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!updateStockDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new UpdateCommand(updateStockDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 108,
      "Ashley-Lau": 5
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Predicate\u003cStock\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the user prefs\u0027 stock book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the user prefs\u0027 stock book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void setStockBookFilePath(Path stockBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Replaces stock book data with the data in {@code stockBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void setStockBook(ReadOnlyStockBook stockBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /** Returns the StockBook */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ReadOnlyStockBook getStockBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a stock with the same identity as {@code person} exists in the stock book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    boolean hasStock(Stock stock);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The person must exist in the stock book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void deleteStock(Stock target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Adds the given stock."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code stock} must not already exist in the stock book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void addStock(Stock stock);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Replaces the given stock {@code target} with {@code updatedStock}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code target} must exist in the stock book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * The {@code updatedStock} must not be the same as another existing stock in the stock book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    void setStock(Stock target, Stock updatedStock);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /** Returns an unmodifiable view of the filtered stock list */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ObservableList\u003cStock\u003e getFilteredStockList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Updates the filter of the filtered stock list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void updateFilteredStockList(Predicate\u003cStock\u003e predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    void sortFilteredStockList(Comparator\u003cStock\u003e comparator);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void setSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    ReadOnlySerialNumberSetsBook getSerialNumberSetsBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    boolean hasSerialNumberSet(SerialNumberSet serialNumberSet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void deleteSerialNumberSet(SerialNumberSet target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void updateSerialNumberSet(Source source);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void addSerialNumberSet(SerialNumberSet serialNumberSet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    ObservableList\u003cSerialNumberSet\u003e getFilteredSerialNumberSetList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void updateFilteredSerialNumberSetList(Predicate\u003cSerialNumberSet\u003e predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    String generateNextSerialNumber(Source source);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 6,
      "kc-98": 23,
      "Ashley-Lau": 23,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents the in-memory model of the stock book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final StockBook stockBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final SerialNumberSetsBook serialNumberSetsBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private FilteredList\u003cStock\u003e filteredStocks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final FilteredList\u003cSerialNumberSet\u003e filteredSerialNumberSets;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Initializes a ModelManager with the given stockBook and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ModelManager(ReadOnlyStockBook stockBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        ReadOnlySerialNumberSetsBook serialNumberSetsBook) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireAllNonNull(stockBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.fine(\"Initializing with stock book: \" + stockBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBook \u003d new StockBook(stockBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBook \u003d new SerialNumberSetsBook(serialNumberSetsBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        filteredStocks \u003d new FilteredList\u003c\u003e(this.stockBook.getStockList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        filteredSerialNumberSets \u003d new FilteredList\u003c\u003e(this.serialNumberSetsBook.getSerialNumberSetsList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this(new StockBook(), new UserPrefs(), new SerialNumberSetsBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return userPrefs.getStockBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStockBookFilePath(Path stockBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stockBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        userPrefs.setStockBookFilePath(stockBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StockBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStockBook(ReadOnlyStockBook stockBook) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBook.resetData(stockBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stock);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook.hasStock(stock);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void deleteStock(Stock target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBook.removeStock(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void addStock(Stock stock) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBook.addStock(stock);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        updateFilteredStockList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void setStock(Stock target, Stock updatedStock) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireAllNonNull(target, updatedStock);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        stockBook.setStock(target, updatedStock);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SerialNumberSetsBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBook.resetData(serialNumberSetsBook);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ReadOnlySerialNumberSetsBook getSerialNumberSetsBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBook;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSet);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBook.hasSerialNumberSet(serialNumberSet);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void deleteSerialNumberSet(SerialNumberSet target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.removeSerialNumberSet(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void updateSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.incrementSerialNumberSet(source);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String generateNextSerialNumber(Source source) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String serialNumber \u003d serialNumberSetsBook.generateNextSerialNumber(source);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.incrementSerialNumberSet(source);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void addSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.addSerialNumberSet(serialNumberSet);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //updateFilteredSerialNumberSetsList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireAllNonNull(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.setSerialNumberSet(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Stock List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Stock} backed by the internal list of"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code versionedStockBook}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e getFilteredStockList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return filteredStocks;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void updateFilteredStockList(Predicate\u003cStock\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        filteredStocks.setPredicate(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void sortFilteredStockList(Comparator\u003cStock\u003e comparator) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        stockBook.sortStocks(comparator);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        filteredStocks \u003d new FilteredList\u003c\u003e(stockBook.getStockList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ObservableList\u003cSerialNumberSet\u003e getFilteredSerialNumberSetList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return filteredSerialNumberSets;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void updateFilteredSerialNumberSetList(Predicate\u003cSerialNumberSet\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        filteredSerialNumberSets.setPredicate(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook.equals(other.stockBook)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 filteredStocks.equals(other.filteredStocks);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 12,
      "kc-98": 69,
      "Ashley-Lau": 37,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ReadOnlySerialNumberSetsBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Unmodifiable view of a SerialNumberSetsBook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public interface ReadOnlySerialNumberSetsBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns an unmodifiable view of the serial number sets list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * This list will not contain any duplicate serial number set."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    ObservableList\u003cSerialNumberSet\u003e getSerialNumberSetsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 17
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ReadOnlyStockBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Unmodifiable view of an stock book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public interface ReadOnlyStockBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ObservableList\u003cStock\u003e getStockList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getCsvFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Path getSerialNumberSetsBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/SerialNumberSetsBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.AccumulatedQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.UniqueSerialNumberSetList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Wraps all data at the SerialNumberSetsBook level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Duplicates are not allowed (by .isSameSerialNumberSet comparison)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SerialNumberSetsBook implements ReadOnlySerialNumberSetsBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final UniqueSerialNumberSetList serialNumberSets;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets \u003d new UniqueSerialNumberSetList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSetsBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Creates a SerialNumberSetsBook using the SerialNumberSets in the {@code toBeCopied}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSetsBook(ReadOnlySerialNumberSetsBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the contents of the SerialNumberSet list with {@code serialNumberSetList}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code serialNumberSets} must not contain duplicate SerialNumberSet."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSets(List\u003cSerialNumberSet\u003e serialNumberSetList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSets.setSerialNumberSets(serialNumberSetList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Resets the existing data of this {@code SerialNumberSetsBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void resetData(ReadOnlySerialNumberSetsBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        setSerialNumberSets(newData.getSerialNumberSetsList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if a SerialNumberSet with the same identity as {@code serialNumberSet} exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     in the SerialNumberSetsBook."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.contains(serialNumberSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Adds a SerialNumberSet to the SerialNumberSetsBook."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The stock must not already exist in the stock book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void addSerialNumberSet(SerialNumberSet p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the given SerialNumberSet {@code target} in the list with {@code editedSerialNumberSet}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code target} must exist in the SerialNumberSetsBook."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The SerialNumberSet identity of {@code editedSerialNumberSet} must not be the same as"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * another existing SerialNumberSet in the SerialNumberSetsBook."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(editedSerialNumberSet);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.setSerialNumberSet(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Removes {@code key} from this {@code SerialNumberSetsBook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code key} must exist in the SerialNumberSetsBook"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void removeSerialNumberSet(SerialNumberSet key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //removes the serial number set related to the given key."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Increases the quantity in the serial number set by 1 of the respective source company,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     used when new stock is added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source The source company name."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void incrementSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cSerialNumberSet\u003e serialNumberSetOptional \u003d serialNumberSets.getSerialNumberSet(source);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (serialNumberSetOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet current \u003d serialNumberSetOptional.get();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet updated \u003d current.getNewIncrementedSerialNumberSet();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            setSerialNumberSet(current, updated);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet toAdd \u003d new SerialNumberSet(source, new AccumulatedQuantity(\"1\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //adds the desired serial number set by calling the addSerialNumberSet method."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            addSerialNumberSet(toAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Generates a serial number for the stock from a particular source company."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source The source company name."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String generateNextSerialNumber(Source source) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cSerialNumberSet\u003e serialNumberSetOptional \u003d serialNumberSets.getSerialNumberSet(source);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (serialNumberSetOptional.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet current \u003d serialNumberSetOptional.get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String numberSection \u003d current.getAccumulatedQuantity().getIncrementedAccumulatedQuantity()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                        .getAccumulatedQuantity();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return source.value + numberSection;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return source.value + \"1\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.asUnmodifiableObservableList().size() + \" serial number sets\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ObservableList\u003cSerialNumberSet\u003e getSerialNumberSetsList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                || (other instanceof SerialNumberSetsBook // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 serialNumberSets.equals(((SerialNumberSetsBook) other).serialNumberSets));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.hashCode();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 161
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/StockBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.UniqueStockList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Wraps all data at the stock-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Duplicates are not allowed (by .isSameStock comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBook implements ReadOnlyStockBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final UniqueStockList stocks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBook() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates an StockBook using the Stocks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBook(ReadOnlyStockBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Replaces the contents of the stock list with {@code stocks}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * {@code stocks} must not contain duplicate stocks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks(List\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stocks.setStocks(stocks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Resets the existing data of this {@code StockBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void resetData(ReadOnlyStockBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        setStocks(newData.getStockList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a stock with the same identity as {@code stock} exists in the stock book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stock);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.contains(stock);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Adds a stock to the stock book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The stock must not already exist in the stock book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void addStock(Stock p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedStock}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code target} must exist in the stock book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The stock identity of {@code editedStock} must not be the same as another existing stock in the stock book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock(Stock target, Stock editedStock) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(editedStock);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        stocks.setStock(target, editedStock);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Removes {@code key} from this {@code StockBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code key} must exist in the stock book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void removeStock(Stock key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.asUnmodifiableObservableList().size() + \" stocks\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e getStockList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof StockBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 stocks.equals(((StockBook) other).stocks));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void sortStocks(Comparator\u003cStock\u003e comparator) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        stocks.sortList(comparator);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 8,
      "Ashley-Lau": 117
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Path stockBookFilePath \u003d Paths.get(\"data\" , \"stockbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Path csvFilePath \u003d Paths.get(\"data\" , \"stocks.csv\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Path serialNumberSetsBookFilePath \u003d Paths.get(\"data\", \"serialnumbers.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        setStockBookFilePath(newUserPrefs.getStockBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        setSerialNumberSetsBookFilePath(newUserPrefs.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getCsvFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return csvFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStockBookFilePath(Path stockBookFilePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stockBookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBookFilePath \u003d stockBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Path getSerialNumberSetsBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSetsBookFilePath(Path serialNumberSetsBookFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSetsBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBookFilePath \u003d serialNumberSetsBookFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 stockBookFilePath.equals(o.stockBookFilePath)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 serialNumberSetsBookFilePath.equals(o.serialNumberSetsBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Objects.hash(guiSettings, stockBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + stockBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        sb.append(\"\\nLocal serial number data file location : \" + serialNumberSetsBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 10,
      "Ashley-Lau": 18,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/AccumulatedQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents a source\u0027s accumulated quantity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class AccumulatedQuantity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"AccumulatedQuantity numbers should be more than 0.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private String accumulatedQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Constructs a {@code AccumulatedQuantity}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param accumulatedQuantity A valid accumulated quantity."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public AccumulatedQuantity(String accumulatedQuantity) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(accumulatedQuantity);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        checkArgument(isValidAccQuantity(accumulatedQuantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d accumulatedQuantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public AccumulatedQuantity getIncrementedAccumulatedQuantity() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        int increased \u003d Integer.parseInt(this.accumulatedQuantity) + 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new AccumulatedQuantity(Integer.toString(increased));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getAccumulatedQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.accumulatedQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if a given int is more than zero or more."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static boolean isValidAccQuantity(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return accumulatedQuantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                || (other instanceof AccumulatedQuantity // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 accumulatedQuantity.equals(((AccumulatedQuantity) other).accumulatedQuantity)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return accumulatedQuantity.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "kc-98": 59
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock\u0027s storage location in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs an {@code location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return value.substring(0, 1).toUpperCase() + value.substring(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "Ashley-Lau": 17,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock\u0027s name in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return fullName.substring(0, 1).toUpperCase() + fullName.substring(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Represents note of a stock in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNote(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \"A note can take any values, and it should not be only whitespaces.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * The first character of the note must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param note A valid note."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Note(String note) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        checkArgument(isValidNote(note), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        value \u003d note;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if a given string is a valid source."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 value.equals(((Note) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 56
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock\u0027s quantity in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)} }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \"Quantity numbers should be a number more than 0.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final String quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a given string is a number and is more than zero or more."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 quantity.equals(((Quantity) other).quantity)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return quantity.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "Ashley-Lau": 50
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/QuantityAdder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Represents functionalities to add value to an quantity object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidValue(String)} }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class QuantityAdder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            \"Increment value should be an integer\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    // Matches any signed integer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(\\\\+|-)?\\\\d+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public final String valueToBeAdded;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs a new quantity adder object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param valueToBeAdded The value to be added into a quantity object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public QuantityAdder(String valueToBeAdded) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(valueToBeAdded);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        checkArgument(isValidValue(valueToBeAdded), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.valueToBeAdded \u003d valueToBeAdded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Tests whether {@code test} is valid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param test The input to be tested."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A boolean value indicating if the test passes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return valueToBeAdded;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                || (other instanceof QuantityAdder // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                \u0026\u0026 valueToBeAdded.equals(((QuantityAdder) other).valueToBeAdded)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return valueToBeAdded.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns the incremented or decremented quantity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeAddedInto The quantity to be added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The quantity result after being incremented."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public Optional\u003cQuantity\u003e incrementQuantity(Quantity toBeAddedInto) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        BigInteger incrementValue \u003d new BigInteger(valueToBeAdded);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        BigInteger currentQuantity \u003d new BigInteger(toBeAddedInto.quantity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        currentQuantity \u003d currentQuantity.add(incrementValue);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (currentQuantity.signum() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return Optional.of(new Quantity(currentQuantity.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "AudreyFelicio": 72,
      "Ashley-Lau": 1
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/SerialNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents the serial number in the serialNumberSets Book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class SerialNumber {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"Serial numbers should only contain words and numbers, and it should be at least 2 digits long\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The first character of the source must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String serialNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs an {@code SerialNumber}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * SerialNumber can only be created by calling {@link SerialNumber#generateDefaultSerialNumber()}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param serialNumber A valid serial number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public SerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a given string is a valid serial number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidSerialNumber(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getSerialNumberAsString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Generates the default serial number of the product."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return SerialNumber of the object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static SerialNumber generateDefaultSerialNumber() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumber(\"0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof SerialNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 serialNumber.equals(((SerialNumber) other).serialNumber)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 12,
      "Ashley-Lau": 55
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/SerialNumberSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SerialNumberSet {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Source source;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private AccumulatedQuantity accumulatedQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructor for a serialNumberSet."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source The source company name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param accumulatedQuantity The accumulated quantity of stocks the source company has in relation to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * the local warehouse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSet(Source source, AccumulatedQuantity accumulatedQuantity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(accumulatedQuantity);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d accumulatedQuantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Source getSource() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public AccumulatedQuantity getAccumulatedQuantity() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.accumulatedQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if both serialNumberSet has the same source company."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isSameSerialNumberSetSource(SerialNumberSet otherSerialNumberSet) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (otherSerialNumberSet \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return otherSerialNumberSet !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getSource().equals(getSource());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if both serialNumberSet is the same."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isSameSerialNumberSet(SerialNumberSet otherSerialNumberSet) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (otherSerialNumberSet \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return otherSerialNumberSet !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getSource().equals(getSource())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getAccumulatedQuantity().equals(getAccumulatedQuantity());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Gets a new SerialNumberSet with an increment quantity of 1."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The new SerialNumberSet."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSet getNewIncrementedSerialNumberSet() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Source newSource \u003d this.source;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        AccumulatedQuantity newAccQuantity \u003d this.accumulatedQuantity.getIncrementedAccumulatedQuantity();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumberSet(newSource, newAccQuantity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if both serial number set have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * This defines a stronger notion of equality between two serial number set."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!(other instanceof SerialNumberSet)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSet otherSerialNumberSet \u003d (SerialNumberSet) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return otherSerialNumberSet.getSource().equals(getSource())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getAccumulatedQuantity().equals(getAccumulatedQuantity());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return Objects.hash(source, accumulatedQuantity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        builder.append(\" Source: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .append(getSource())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .append(\" AccumulatedQuantity: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .append(getAccumulatedQuantity());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 106
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Source.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents a Stock\u0027s source in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Source {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \"A source can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The first character of the source must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs an {@code Source}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source A valid source."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Source(String source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        checkArgument(isValidSource(source), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        value \u003d source;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return value.substring(0, 1).toUpperCase() + value.substring(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a given string is a valid source."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidSource(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof Source // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 value.equals(((Source) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isSameSource(Source source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.value.equals(source.value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "kc-98": 10,
      "Ashley-Lau": 51
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Stock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock in the stock book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Stock {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Source source;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Stock(Name name, SerialNumber serialNumber, Source source, Quantity quantity, Location location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireAllNonNull(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Stock(Name name, SerialNumber serialNumber, Source source, Quantity quantity,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                 Location location, List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        requireAllNonNull(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Source getSource() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return source;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public List\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns the values of the notes of this stock in a list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return list of string of the values of notes of stock."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public List\u003cString\u003e getNotesValues() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e notesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (Note note : notes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            notesList.add(note.value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return notesList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of all the notes of stock."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param notes list of notes of stock"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return string with all the notes appended"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String notesToString(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            builder.append(i + 1).append(\". \").append(notes.get(i)).append(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Generates a new same stock with the note added to stock."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param noteToAdd note to add to stock"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return stock with added note"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Stock addNote(Note noteToAdd) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Name name \u003d this.name;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumber serialNumber \u003d this.serialNumber;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Source source \u003d this.source;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Quantity quantity \u003d this.quantity;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Location location \u003d this.location;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cNote\u003e notesToUpdate \u003d this.notes;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        notesToUpdate.add(noteToAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new Stock(name, serialNumber, source, quantity, location, notesToUpdate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Generates a new same stock with the note, specified by the note index, deleted."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param indexOfNoteToDelete the index of the note to delete"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return stock with deleted note"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Stock deleteNote(int indexOfNoteToDelete) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Name name \u003d this.name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumber serialNumber \u003d this.serialNumber;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Source source \u003d this.source;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Quantity quantity \u003d this.quantity;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Location location \u003d this.location;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cNote\u003e notesToUpdate \u003d this.notes;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Stock updatedStock;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (indexOfNoteToDelete \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            updatedStock \u003d new Stock(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            notesToUpdate.remove(indexOfNoteToDelete - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            updatedStock \u003d new Stock(name, serialNumber, source, quantity, location, notesToUpdate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return updatedStock;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if both stocks of the same name and source, or the same serial number."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isSameStock(Stock otherStock) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (otherStock \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return otherStock !\u003d null"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 ((otherStock.getName().equals(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getSource().equals(getSource()))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || otherStock.getSerialNumber().equals(getSerialNumber()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if both stocks have the same name and source, or the same serial number."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!(other instanceof Stock)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock otherStock \u003d (Stock) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return (otherStock.getName().equals(getName())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getSource().equals(getSource()))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || otherStock.getSerialNumber().equals(getSerialNumber());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Objects.hash(name, serialNumber, quantity, source, location, notes);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" SerialNumber: \")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(getSerialNumber())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" Source: \")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(getSource())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .append(\" Note: \")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .append(notesToString(getNotes()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 97,
      "kc-98": 5,
      "Ashley-Lau": 104
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/UniqueSerialNumberSetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateSerialNumberSetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateStockException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.SerialNumberSetNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.StockNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * A list of serialNumberSets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @see SerialNumberSet#isSameSerialNumberSet(SerialNumberSet)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class UniqueSerialNumberSetList implements Iterable\u003cSerialNumberSet\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final ObservableList\u003cSerialNumberSet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final ObservableList\u003cSerialNumberSet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if the list contains an equivalent serial number set\u0027s source as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean contains(SerialNumberSet toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalList.stream().anyMatch(serialNumberSet -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                serialNumberSet.getSource().isSameSource(toCheck.getSource()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Adds a serial number set to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The serial number set\u0027s source must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param toAdd The serialNumberSet to add."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void add(SerialNumberSet toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cSerialNumberSet\u003e getSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet curr \u003d internalList.get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (curr.getSource().isSameSource(source)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return Optional.of(curr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the serial number set {@code target} in the list with {@code editedSerialNumberSet}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The source identity of {@code editedSerialNumberSet} must not be the same as"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * another existing serial number set in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireAllNonNull(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new StockNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!target.isSameSerialNumberSetSource(editedSerialNumberSet) \u0026\u0026 contains(editedSerialNumberSet)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.set(index, editedSerialNumberSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Removes the equivalent SerialNumberSet from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The SerialNumberSet must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void remove(SerialNumberSet toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new SerialNumberSetNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSets(UniqueSerialNumberSetList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the contents of this list with {@code serialNumberSets}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code serialNumberSets} must not contain duplicate serial number sets."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSets(List\u003cSerialNumberSet\u003e serialNumberSets) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireAllNonNull();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!serialNumberSetsAreUnique(serialNumberSets)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DuplicateSerialNumberSetException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.setAll(serialNumberSets);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ObservableList\u003cSerialNumberSet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Iterator\u003cSerialNumberSet\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                || (other instanceof UniqueSerialNumberSetList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSerialNumberSetList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if {@code serial number sets} contains only unique serial number sets."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private boolean serialNumberSetsAreUnique(List\u003cSerialNumberSet\u003e serialNumberSets) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c serialNumberSets.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (int j \u003d i + 1; j \u003c serialNumberSets.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (serialNumberSets.get(i).isSameSerialNumberSetSource(serialNumberSets.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 149
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/UniqueStockList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateStockException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.StockNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A list of stock that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A stock is considered unique by comparing using {@code Stock#isSameStock(Stock)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * persons uses Stock#isSameStock(Stock) for equality so as to ensure that the stock being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * unique in terms of identity in the UniqueStockList. However, the removal of a stock uses Stock#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * as to ensure that the stock with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @see Stock#isSameStock(Stock)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class UniqueStockList implements Iterable\u003cStock\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final ObservableList\u003cStock\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final ObservableList\u003cStock\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean contains(Stock toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void add(Stock toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Replaces the stock {@code target} in the list with {@code updatedStock}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * The person identity of {@code updatedStock} must not be the same as another existing stock in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void setStock(Stock target, Stock updatedStock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireAllNonNull(target, updatedStock);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new StockNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!target.isSameStock(updatedStock) \u0026\u0026 contains(updatedStock)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        internalList.set(index, updatedStock);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove(Stock toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new StockNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks(UniqueStockList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks(List\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireAllNonNull(stocks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!personsAreUnique(stocks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        internalList.setAll(stocks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Iterator\u003cStock\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof UniqueStockList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStockList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private boolean personsAreUnique(List\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (int i \u003d 0; i \u003c stocks.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            for (int j \u003d i + 1; j \u003c stocks.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (stocks.get(i).isSameStock(stocks.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sorts the internal list according to the comparator."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param comparator The comparator used for sorting."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void sortList(Comparator\u003cStock\u003e comparator) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 16,
      "Ashley-Lau": 131
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/DuplicateSerialNumberSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Signals that the operation will result in duplicate Serial Number set (Serial number sets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class DuplicateSerialNumberSetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public DuplicateSerialNumberSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(\"Operation would result in duplicate serial number.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 11
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/DuplicateStockException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Signals that the operation will result in duplicate Stock (Stocks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DuplicateStockException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DuplicateStockException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"Operation would result in duplicate stock.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/SerialNumberSetNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Signals that the operation is unable to find the specified serial number set."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SerialNumberSetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 6
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/StockNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Signals that the operation is unable to find the specified stock."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 6
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/FieldContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code Field} matches or contains"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public abstract class FieldContainsKeywordsPredicate implements Predicate\u003cStock\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if stock\u0027s field matches or contains all of the keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if stock matches keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public abstract boolean test(Stock stock);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 21
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/LocationContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code Location} matches or contains"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class LocationContainsKeywordsPredicate extends FieldContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public LocationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if the location field of stock matches or contains"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * all of the keywords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if location field matches keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String stockLocation \u003d stock.getLocation().value.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!keywords.isEmpty() \u0026\u0026 keywords.stream().noneMatch(String::isEmpty)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // test returns true if stock\u0027s location contains all of the keywords specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    .allMatch(keyword -\u003e stockLocation.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof LocationContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 keywords.equals(((LocationContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Location: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 49
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code Name} matches or contains"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class NameContainsKeywordsPredicate extends FieldContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if stock\u0027s name matches or contains all of the keywords."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if stock matches keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String stockName \u003d stock.getName().fullName.toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!keywords.isEmpty() \u0026\u0026 keywords.stream().noneMatch(String::isEmpty)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // test returns true if stock name contains all of the keywords specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    .allMatch(keyword -\u003e stockName.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Name: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 25,
      "Ashley-Lau": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/SerialNumberContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code SerialNumber} matches or contains"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class SerialNumberContainsKeywordsPredicate extends FieldContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public SerialNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if stock\u0027s serial number matches or contains all of the keywords."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if stock matches keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String stockSerialNumber \u003d stock.getSerialNumber().getSerialNumberAsString().toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!keywords.isEmpty() \u0026\u0026 keywords.stream().noneMatch(String::isEmpty)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // test returns true if stock serial number contains all of the keywords specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    .allMatch(keyword -\u003e stockSerialNumber.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof SerialNumberContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 keywords.equals(((SerialNumberContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Serial Number: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 47,
      "kc-98": 1
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/SourceContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code Source} matches or contains"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class SourceContainsKeywordsPredicate extends FieldContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public SourceContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if stock\u0027s source matches or contains all of the keywords."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if stock matches keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String stockSource \u003d stock.getSource().value.toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!keywords.isEmpty() \u0026\u0026 keywords.stream().noneMatch(String::isEmpty)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // test returns true if stock source contains all the keywords specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    .allMatch(keyword -\u003e stockSource.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof SourceContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 keywords.equals(((SourceContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Source: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 49
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Contains utility methods for populating {@code StockBook} with sample data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Stock[] getSampleStocks() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //return new Stock[] {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Alex Yeoh\"), new Quantity(\"87438807\"), new Source(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Bernice Yu\"), new Quantity(\"99272758\"), new Source(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Charlotte Oliveiro\"), new Quantity(\"93210283\"), new Source(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"David Li\"), new Quantity(\"91031282\"), new Source(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"family\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Irfan Ibrahim\"), new Quantity(\"92492021\"), new Source(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Roy Balakrishnan\"), new Quantity(\"92624417\"), new Source(\"royb@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"colleagues\"))}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Stock[]{};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static SerialNumberSet[] getSampleSerialNumberSets() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumberSet[]{};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static ReadOnlyStockBook getSampleStockBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockBook sampleAb \u003d new StockBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (Stock sampleStock : getSampleStocks()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            sampleAb.addStock(sampleStock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static ReadOnlySerialNumberSetsBook getSampleSerialNumberSetsBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSetsBook sampleAb \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (SerialNumberSet sampleSerialNumberSet : getSampleSerialNumberSets()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            sampleAb.addSerialNumberSet(sampleSerialNumberSet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 15,
      "Ashley-Lau": 31,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonAdaptedSerialNumberSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.AccumulatedQuantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Jackson-friendly version of {@link SerialNumberSet}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "class JsonAdaptedSerialNumberSet {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SerialNumberSet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String accumulatedQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs a {@code JsonAdaptedSerialNumberSet} with the given SerialNumberSet details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonAdaptedSerialNumberSet(@JsonProperty(\"source\") String source,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                      @JsonProperty(\"accumulatedQuantity\") String accumulatedQuantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d accumulatedQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts a given {@code SerialNumberSet} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonAdaptedSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.source \u003d serialNumberSet.getSource().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d serialNumberSet.getAccumulatedQuantity().getAccumulatedQuantity();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code SerialNumberSet} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted SerialNumberSet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Source.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!Source.isValidSource(source)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        final Source modelSource \u003d new Source(source);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (accumulatedQuantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    AccumulatedQuantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!AccumulatedQuantity.isValidAccQuantity(accumulatedQuantity)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(AccumulatedQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        final AccumulatedQuantity modelAccQuantity \u003d new AccumulatedQuantity(accumulatedQuantity);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumberSet(modelSource, modelAccQuantity);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 65
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonAdaptedStock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Jackson-friendly version of {@link Stock}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "class JsonAdaptedStock {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Stock\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String serialNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cString\u003e notes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs a {@code JsonAdaptedStock} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonAdaptedStock(@JsonProperty(\"name\") String name, @JsonProperty(\"serialNumber\") String serialNumber,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                            @JsonProperty(\"source\") String source, @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                            @JsonProperty(\"location\") String location, @JsonProperty(\"notes\") List\u003cString\u003e notes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts a given {@code Stock} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonAdaptedStock(Stock source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumber \u003d source.getSerialNumber().getSerialNumberAsString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d source.getSource().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        quantity \u003d source.getQuantity().quantity;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        notes \u003d source.getNotesValues();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Converts this Jackson-friendly adapted stock object into the model\u0027s {@code Stock} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted stock."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Stock toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(\"donkey\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (serialNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Source.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(serialNumber)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final SerialNumber modelSerialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Source.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Source.isValidSource(source)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Source modelSource \u003d new Source(source);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (notes !\u003d null \u0026\u0026 notes.size() \u003e 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            List\u003cNote\u003e modelNotesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            for (String note : notes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                            Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                if (!Note.isValidNote(note)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                final Note modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                modelNotesList.add(modelNote);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new Stock(modelName, modelSerialNumber, modelSource, modelQuantity, modelLocation, modelNotesList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Stock(modelName, modelSerialNumber, modelSource, modelQuantity, modelLocation);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 28,
      "kc-98": 1,
      "Ashley-Lau": 100
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonSerialNumberSetsBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * A class to access SerialNumberSetsBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class JsonSerialNumberSetsBookStorage implements SerialNumberSetsBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerialNumberSetsBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonSerialNumberSetsBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Path getSerialNumberSetsBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return readSerialNumberSetsBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Similar to {@link #readSerialNumberSetsBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook(Path filePath)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cJsonSerializableSerialNumberSetsBook\u003e jsonSerialNumberSetsBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                filePath, JsonSerializableSerialNumberSetsBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!jsonSerialNumberSetsBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return Optional.of(jsonSerialNumberSetsBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            System.out.println(\"failed here\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        saveSerialNumberSetsBook(serialNumberSetsBook, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Similar to {@link #saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook, Path filePath)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSetsBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSerialNumberSetsBook(serialNumberSetsBook), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 84
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonSerializableSerialNumberSetsBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * An immutable SerialNumberSets that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "@JsonRootName(value \u003d \"serialNumberSets\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "class JsonSerializableSerialNumberSetsBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SERIAL_NUMBER_SET \u003d \"Serial number sets data contains duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"serial number sets.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final List\u003cJsonAdaptedSerialNumberSet\u003e serialNumberSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs a {@code JsonSerializableSerialNumberSet} with the given serial number sets."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonSerializableSerialNumberSetsBook(@JsonProperty(\"serialNumberSets\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                       List\u003cJsonAdaptedSerialNumberSet\u003e serialNumberSets) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSets.addAll(serialNumberSets);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts a given {@code ReadOnlyStockBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSerialNumberSetsBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonSerializableSerialNumberSetsBook(ReadOnlySerialNumberSetsBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.addAll(source.getSerialNumberSetsList().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .map(JsonAdaptedSerialNumberSet::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts this SerialNumberSetsBook into the model\u0027s {@code SerialNumberSetsBook} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSetsBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSetsBook serialNumberSetsBook \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (JsonAdaptedSerialNumberSet jsonAdaptedSerialNumberSet : serialNumberSets) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet serialNumberSet \u003d jsonAdaptedSerialNumberSet.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (serialNumberSetsBook.hasSerialNumberSet(serialNumberSet)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SERIAL_NUMBER_SET);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumberSetsBook.addSerialNumberSet(serialNumberSet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 63
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonSerializableStockBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * An Immutable StockBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "@JsonRootName(value \u003d \"stockbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "class JsonSerializableStockBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STOCK \u003d \"Stocks list contains duplicate stock(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final List\u003cJsonAdaptedStock\u003e stocks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs a {@code JsonSerializableStockBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonSerializableStockBook(@JsonProperty(\"stocks\") List\u003cJsonAdaptedStock\u003e stocks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stocks.addAll(stocks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts a given {@code ReadOnlyStockBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableStockBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonSerializableStockBook(ReadOnlyStockBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks.addAll(source.getStockList().stream().map(JsonAdaptedStock::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts this stock book into the model\u0027s {@code StockBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockBook stockBook \u003d new StockBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (JsonAdaptedStock jsonAdaptedStock : stocks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Stock stock \u003d jsonAdaptedStock.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (stockBook.hasStock(stock)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STOCK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stockBook.addStock(stock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 60
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonStockBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A class to access StockBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonStockBookStorage implements StockBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStockBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonStockBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return readStockBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Similar to {@link #readStockBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Optional\u003cJsonSerializableStockBook\u003e jsonStockBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                filePath, JsonSerializableStockBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!jsonStockBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return Optional.of(jsonStockBook.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(\"failed here\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        saveStockBook(stockBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Similar to {@link #saveStockBook(ReadOnlyStockBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stockBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStockBook(stockBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 27,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/SerialNumberSetsBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents a storage for {@link SerialNumberSetsBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public interface SerialNumberSetsBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Path getSerialNumberSetsBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns SerialNumberSetsBook data as a {@link ReadOnlySerialNumberSetsBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @see #getSerialNumberSetsBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Saves the given {@link ReadOnlySerialNumberSetsBook} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param serialNumberSetsBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @see #saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook, Path filePath)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 49
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/StockBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a storage for {@link StockBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public interface StockBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns StockBook data as a {@link ReadOnlyStockBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see #getStockBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Optional\u003cReadOnlyStockBook\u003e readStockBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Saves the given {@link ReadOnlyStockBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param stockBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void saveStockBook(ReadOnlyStockBook stockBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see #saveStockBook(ReadOnlyStockBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void saveStockBook(ReadOnlyStockBook stockBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 46
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public interface Storage extends StockBookStorage, UserPrefsStorage, SerialNumberSetsBookStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void saveStockBook(ReadOnlyStockBook stockBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 7,
      "Ashley-Lau": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Manages storage of StockBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private StockBookStorage stockBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private SerialNumberSetsBookStorage serialNumberSetsBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code StockBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public StorageManager(StockBookStorage stockBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                          SerialNumberSetsBookStorage serialNumberSetsBook) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBookStorage \u003d stockBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBookStorage \u003d serialNumberSetsBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StockBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBookStorage.getStockBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return readStockBook(stockBookStorage.getStockBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBookStorage.readStockBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        saveStockBook(stockBook, stockBookStorage.getStockBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBookStorage.saveStockBook(stockBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SerialNumberSetsBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Path getSerialNumberSetsBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBookStorage.getSerialNumberSetsBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return readSerialNumberSetsBook(serialNumberSetsBookStorage.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Reads the serial number sets book data from the given file path."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath The filepath to read from."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The ReadOnlySerialNumberSetsBook object wrapped by Optional."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook(Path filePath)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBookStorage.readSerialNumberSetsBook(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        saveSerialNumberSetsBook(serialNumberSetsBook, serialNumberSetsBookStorage.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Writes the serial number sets book data to the desired file path."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param serialNumberSetsBook The serialNumberSetsBook to write."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath The filepath to read from."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook, Path filePath)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBookStorage.saveSerialNumberSetsBook(serialNumberSetsBook, filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 49,
      "Ashley-Lau": 18,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a storage for {@link seedu.stock.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Saves the given {@link seedu.stock.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private StackPane mainPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Button enterButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        commandTextField.setStyle(\"-fx-background-color: #363c43\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (CommandException | ParseException | SourceCompanyNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "         * @see seedu.stock.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 6,
      "Ashley-Lau": 5,
      "-": 73,
      "LimZeWeiDennis": 8
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String HELP \u003d \"HELP \\n---------------------------\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String ADD \u003d \"---------------------------\\nADD \\n---------------------------\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String LIST \u003d \"---------------------------\\nLIST \\n---------------------------\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String DELETE \u003d \"---------------------------\\nDELETE\\n---------------------------\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String FIND \u003d \"---------------------------\\nFIND\\n---------------------------\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String FINDEXACT \u003d \"---------------------------\\nFINDEXACT\\n---------------------------\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String UPDATE \u003d \"---------------------------\\nUPDATE\\n---------------------------\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String EXIT \u003d \"---------------------------\\nEXIT\\n---------------------------\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String HELP_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \"format: \\nhelp\\n\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String ADD_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \"format: \\nadd n/\u003cname\u003e s/\u003csource of stock\u003e q/\u003cquantity\u003e l/\u003clocation in warehouse\u003e\\n\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String LIST_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \"format: \\nlist\\n\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String DELETE_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \"format: \\ndelete sn/\u003cserial number\u003e\\n\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            + \"format (multiple): \\ndelete sn/\u003cserial number\u003e sn/\u003cserial number 2\u003e \\n\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String FIND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \"format(any combination of): \\nfind n/\u003cname\u003e sn/\u003cserial number\u003e l/\u003clocation\u003e s/\u003csource\u003e\\n\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String FINDEXACT_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \"format(any combination of): \\nfindexact n/\u003cname\u003e sn/\u003cserial number\u003e l/\u003clocation\u003e s/\u003csource\u003e\\n\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String UPDATE_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \"format: \\nupdate sn/\u003cSerial Number of product\u003e (followed by combination of any):\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    + \"iq/\u003c+/-\u003e\u003cquantity to increment/decrement\u003e nq/\u003cnew quantity\u003e n/\u003cnew name\u003e\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    + \"l/\u003cnew location in warehouse\u003e s/\u003cnew source of stock\u003e\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    + \"NOTE: only either of iq/ or nq/ can be provided.\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String EXIT_DESCRIPTION \u003d \"format: \\nexit\\n\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String DISCLAIMER \u003d \"---------------------------\\nFor more information refer to the guide :\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t15-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public static final Hyperlink USERGUIDE_LINK \u003d new Hyperlink(USERGUIDE_URL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label addMethod;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label addMessage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label listMethod;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label listMessage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label deleteMethod;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label deleteMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label findMethod;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label findMessage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label findExactMethod;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label findExactMessage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label updateMethod;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label updateMessage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label exitMethod;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label exitMessage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label helpMethod;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label url;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Label disclaimer;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //Help Method"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        helpMethod.setText(HELP);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        helpMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        helpMessage.setText(HELP_DESCRIPTION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //Add Method"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        addMethod.setText(ADD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        addMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        addMessage.setText(ADD_DESCRIPTION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //List Method"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        listMethod.setText(LIST);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        listMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        listMessage.setText(LIST_DESCRIPTION);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //Delete Method"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        deleteMethod.setText(DELETE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        deleteMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        deleteMessage.setText(DELETE_DESCRIPTION);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //Update Method"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        updateMethod.setText(UPDATE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        updateMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        updateMessage.setText(UPDATE_DESCRIPTION);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //Find Method"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        findMethod.setText(FIND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        findMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        findMessage.setText(FIND_DESCRIPTION);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //FindExact Method"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        findExactMethod.setText(FINDEXACT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        findExactMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        findExactMessage.setText(FINDEXACT_DESCRIPTION);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //Exit Method"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        exitMethod.setText(EXIT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        exitMethod.setStyle(\"-fx-font-size: 130%;\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        exitMessage.setText(EXIT_DESCRIPTION);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        //Disclaimer on where to click"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        disclaimer.setText(DISCLAIMER);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        disclaimer.setStyle(\"-fx-font-size: 110%;\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        // setting the colours for the link"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        url.setText(USERGUIDE_URL);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        url.setStyle(\"-fx-text-fill: #0b6ae0;\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        url.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                Application a \u003d new Application() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    public void start(Stage stage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                };"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                a.getHostServices().showDocument(USERGUIDE_LINK.getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        });"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "Ashley-Lau": 2,
      "-": 81,
      "LimZeWeiDennis": 156
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private StockListPanel stockListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private StatisticsWindow statisticsWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private StackPane stockListPanelPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsWindow \u003d new StatisticsWindow();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListPanel \u003d new StockListPanel(logic.getFilteredStockList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListPanelPlaceholder.getChildren().add(stockListPanel.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getStockBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Opens the statisticsWindow or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void handleStatistics(Map\u003cString, Integer\u003e statisticsData, String[] otherStatisticsDetails) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!statisticsWindow.isShowing()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            statisticsWindow.show(statisticsData, otherStatisticsDetails);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            statisticsWindow.focus();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsWindow.hide();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockListPanel getStockListPanel() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockListPanel;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see seedu.stock.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SourceCompanyNotFoundException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (commandResult.isShowStatistics()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                String[] otherStatisticsDetails \u003d commandResult.getOtherStatisticsDetails();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                Map\u003cString, Integer\u003e statisticsData \u003d commandResult.getStatisticsData();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                System.out.println(Arrays.toString(otherStatisticsDetails));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                handleStatistics(statisticsData, otherStatisticsDetails);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (CommandException | ParseException | SourceCompanyNotFoundException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kc-98": 29,
      "Ashley-Lau": 15,
      "-": 135,
      "LimZeWeiDennis": 4
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/StatisticsWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.SourceQuantityDistributionStatisticsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.SourceStatisticsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Controller for a SourceStatistics page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class StatisticsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final String FXML \u003d \"StatisticsWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private PieChart statisticsPieChart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private AnchorPane anchorPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Creates a new source statistics window."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public StatisticsWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Creates a new source statistics window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param root Stage to use as the root of the source statistics window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public StatisticsWindow(Stage root) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsPieChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Shows the source statistics window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param statisticsData The data to be used."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param otherStatisticsDetails The other statistics data that is needed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void show(Map\u003cString, Integer\u003e statisticsData, String[] otherStatisticsDetails) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        logger.fine(\"Showing statistics window about the application.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        refreshData(statisticsData, otherStatisticsDetails);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Refreshes the statistics data to be shown."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param statisticsData The statistics data to display."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param otherStatisticsDetails The other statistics data that is needed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void refreshData(Map\u003cString, Integer\u003e statisticsData, String[] otherStatisticsDetails) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //erases all existing data"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assert otherStatisticsDetails.length \u003e 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsPieChart.getData().clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String type \u003d otherStatisticsDetails[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        case SourceStatisticsCommand.STATISTICS_TYPE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            updateDataForSourceStatistics(statisticsData);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        case SourceQuantityDistributionStatisticsCommand.STATISTICS_TYPE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            assert otherStatisticsDetails.length \u003e 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String targetSource \u003d otherStatisticsDetails[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            updateDataForSourceQuantityDistributionStatistics(statisticsData, targetSource);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Data update for piechart for SourceQuantityDistributionStatistics."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param statisticsData The data to be used."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param targetSource The target source company."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void updateDataForSourceQuantityDistributionStatistics("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        Map\u003cString, Integer\u003e statisticsData, String targetSource) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsPieChart.setTitle(\"Distribution for \" + targetSource + \" company\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cMap.Entry\u003cString, Integer\u003e\u003e entrySet \u003d statisticsData.entrySet();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        int totalStocks \u003d statisticsData.entrySet().stream().map(set -\u003e set.getValue())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .reduce(0, (x, y) -\u003e x + y);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //updates with new data"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        entrySet.forEach(set -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            double percentage \u003d 100 * ((double) set.getValue() / totalStocks);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String name \u003d String.format(\"%s, %.1f\", set.getKey(), percentage) + \"%\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            int value \u003d set.getValue();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            statisticsPieChart.getData().add(new PieChart.Data(name, value));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsPieChart.layout();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Data update for piechart for SourceStatistics."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param statisticsData The data to be used."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void updateDataForSourceStatistics(Map\u003cString, Integer\u003e statisticsData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsPieChart.setTitle(\"Source statistics\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cMap.Entry\u003cString, Integer\u003e\u003e entrySet \u003d statisticsData.entrySet();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        int totalStocks \u003d statisticsData.entrySet().stream().map(set -\u003e set.getValue())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .reduce(0, (x, y) -\u003e x + y);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //updates with new data"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        entrySet.forEach(set -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            double percentage \u003d 100 * ((double) set.getValue() / totalStocks);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String name \u003d String.format(\"%s, %.1f\", set.getKey(), percentage) + \"%\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            int value \u003d set.getValue();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            statisticsPieChart.getData().add(new PieChart.Data(name, value));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        statisticsPieChart.layout();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if the source statistics window is currently being shown."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Hides the source statistics window."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Focuses on the source statistics window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 170
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/StockCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * An UI component that displays information of a {@code Stock}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String FXML \u003d \"StockListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final Stock stock;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label serialNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label locationStored;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Label notes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private VBox notesBox;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Creates a {@code StockCard} with the given {@code Stock} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockCard(Stock stock, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stock \u003d stock;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        id.setText(displayedIndex + \".\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name.setText(stock.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        serialNumber.setText(stock.getSerialNumber().getSerialNumberAsString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        quantity.setText(stock.getQuantity().quantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        source.setText(stock.getSource().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        locationStored.setText(stock.getLocation().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (stock.getNotes().size() !\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            StringBuilder notesAppended \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            for (int i \u003d 0; i \u003c stock.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                notesAppended.append(i + 1).append(\". \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        .append(stock.getNotes().get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            notes.setText(notesAppended.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!(other instanceof StockCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockCard card \u003d (StockCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 stock.equals(card.stock);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 16,
      "Ashley-Lau": 67,
      "LimZeWeiDennis": 4
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/StockListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Panel containing the list of stocks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String FXML \u003d \"StockListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StockListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private ListView\u003cStock\u003e stockListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates a {@code StockListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockListPanel(ObservableList\u003cStock\u003e stockList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListView.setItems(stockList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListView.setCellFactory(listView -\u003e new StockListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Stock} using a {@code StockCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    class StockListViewCell extends ListCell\u003cStock\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        protected void updateItem(Stock stock, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            super.updateItem(stock, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (empty || stock \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                setGraphic(new StockCard(stock, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "Ashley-Lau": 48
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/WarenagerIcon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 5,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    \u003cHBox spacing\u003d\"8\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandTextField\" minWidth\u003d\"480\" onAction\u003d\"#handleCommandEntered\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                   promptText\u003d\"How can I assist you?\" styleClass\u003d\"command-text-field\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        \u003cButton fx:id\u003d\"enterButton\" minWidth\u003d\"80\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"40\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                styleClass\u003d\"button\" text\u003d\"ENTER\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kc-98": 9,
      "-": 4,
      "LimZeWeiDennis": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003cfx:root resizable\u003d\"true\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        \u003cScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMethod\"  \u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\"  \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"addMethod\"  \u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"addMessage\"  \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"listMethod\"  \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"listMessage\"  \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"deleteMethod\"  \u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"deleteMessage\"  \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"findMethod\"  \u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"findMessage\"  \u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"findExactMethod\"  \u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"findExactMessage\"  \u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"updateMethod\"  \u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"updateMessage\"  \u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"exitMethod\"  \u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"exitMessage\"  \u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"disclaimer\" \u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003cLabel fx:id\u003d\"url\"  \u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "LimZeWeiDennis": 111
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "         title\u003d\"Warenager\" minWidth\u003d\"600\" minHeight\u003d\"600\" maxHeight\u003d\"1200\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    \u003cImage url\u003d\"@/images/WarenagerIcon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        \u003cStackPane HBox.hgrow\u003d\"ALWAYS\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" \u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                   minHeight\u003d\"120\" prefHeight\u003d\"120\" maxHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        \u003cVBox fx:id\u003d\"stockList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "          \u003cStackPane fx:id\u003d\"stockListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "kc-98": 1,
      "Ashley-Lau": 1,
      "-": 36,
      "LimZeWeiDennis": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/StatisticsWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003cfx:root title\u003d\"Statistics\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        \u003cImage url\u003d\"@/images/piechart_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u003cPieChart fx:id\u003d\"statisticsPieChart\" minHeight\u003d\"600.0\" minWidth\u003d\"700.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                          xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u003c/PieChart\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kc-98": 25
    }
  },
  {
    "path": "src/main/resources/view/StockListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  \u003cGridPane fx:id\u003d\"gridPane\" HBox.hgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10\" prefWidth\u003d\"150\" percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"30.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003cVBox minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"serialNumberHeader\" styleClass\u003d\"cell_small_label_header\" text\u003d\"S/N: \" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"serialNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$serialNumber\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"quantityHeader\" styleClass\u003d\"cell_small_label_header\" text\u003d\"Quantity: \" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"sourceHeader\" styleClass\u003d\"cell_small_label_header\" text\u003d\"Source: \" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"locationHeader\" styleClass\u003d\"cell_small_label_header\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "               text\u003d\"Location in warehouse: \" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"locationStored\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$locationStored\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003cVBox fx:id\u003d\"notesBox\" alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"105\" maxHeight\u003d\"200\" GridPane.columnIndex\u003d\"1\" \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cInsets top\u003d\"5\" left\u003d\"10\" bottom\u003d\"5\" right\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" \u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"notesHeader\" styleClass\u003d\"cell_small_label_header\" text\u003d\"Note: \" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"notes\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "amylzting": 30,
      "-": 26,
      "LimZeWeiDennis": 15
    }
  },
  {
    "path": "src/main/resources/view/StockListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  \u003cListView fx:id\u003d\"stockListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border-main\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    \u003cInsets right\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "LimZeWeiDennis": 5
    }
  },
  {
    "path": "src/test/java/seedu/stock/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import static seedu.stock.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.PINEAPPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalSerialNumberSetsBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs(), getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void execute_newStock_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock validStock \u003d PINEAPPLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStockBook(), new UserPrefs(), getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedModel.addStock(validStock);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStock), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStock), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 33,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void execute_stockAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ModelStubAcceptingStockAdded modelStub \u003d new ModelStubAcceptingStockAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock validStock \u003d new StockBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStock).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStock), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Arrays.asList(validStock), modelStub.stocksAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void execute_duplicateStock_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock validStock \u003d new StockBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStock);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStock(validStock);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_STOCK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock apple \u003d new StockBuilder(APPLE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock banana \u003d new StockBuilder(BANANA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addAppleCommand \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addBananaCommand \u003d new AddCommand(banana);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addAppleCommandCopy \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setStockBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void addStock(Stock stock) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setStockBook(ReadOnlyStockBook newData) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void deleteStock(Stock target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setStock(Stock target, Stock editedStock) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ObservableList\u003cStock\u003e getFilteredStockList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void updateFilteredStockList(Predicate\u003cStock\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void sortFilteredStockList(Comparator\u003cStock\u003e comparator) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlySerialNumberSetsBook getSerialNumberSetsBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void deleteSerialNumberSet(SerialNumberSet target) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void updateSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void addSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ObservableList\u003cSerialNumberSet\u003e getFilteredSerialNumberSetList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void updateFilteredSerialNumberSetList(Predicate\u003cSerialNumberSet\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public String generateNextSerialNumber(Source source) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * A Model stub that contains a single stock."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private class ModelStubWithStock extends ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        private final Stock stock;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ModelStubWithStock(Stock stock) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            this.stock \u003d stock;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return this.stock.isSameStock(stock);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * A Model stub that always accept the stock being added."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private class ModelStubAcceptingStockAdded extends ModelStub {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final ArrayList\u003cStock\u003e stocksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return stocksAdded.stream().anyMatch(stock::isSameStock);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void addStock(Stock stock) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stocksAdded.add(stock);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new StockBook();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 6,
      "Ashley-Lau": 245,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_INCREMENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NEW_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.SourceCompanyNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_NAME_APPLE \u003d \"Apple Juice\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_NAME_BANANA \u003d \"Banana Bun\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_APPLE \u003d \"Ntuc1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BANANA \u003d \"Fairprice1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SOURCE_APPLE \u003d \"Ntuc\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SOURCE_BANANA \u003d \"Fairprice\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_QUANTITY_APPLE \u003d \"2000\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_QUANTITY_BANANA \u003d \"1000\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_LOCATION_APPLE \u003d \"Fruit Section, Subsection C\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_LOCATION_BANANA \u003d \"Fruits section, Subsection B\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String NAME_DESC_APPLE \u003d \" \" + PREFIX_NAME + VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String NAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String NAME_DESC_BANANA_WITH_WHITESPACES_BETWEEN \u003d \" \" + PREFIX_NAME + \"Banana         Bun\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_APPLE \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_BANANA \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SOURCE_DESC_APPLE \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_APPLE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SOURCE_DESC_BANANA \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_BANANA;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String QUANTITY_DESC_APPLE \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String NEW_QUANTITY_DESC_APPLE \u003d \" \" + PREFIX_NEW_QUANTITY + VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String NEW_QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_NEW_QUANTITY + VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INCREMENT_QUANTITY_DESC_APPLE \u003d \" \" + PREFIX_INCREMENT_QUANTITY + VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INCREMENT_QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_INCREMENT_QUANTITY + VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String LOCATION_DESC_APPLE \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_APPLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String LOCATION_DESC_BANANA \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"donje#y\"; // \u0027#\u0027 not allowed in names"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_SERIAL_NUMBER_DESC \u003d \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER; // empty serial number not allowed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_SOURCE_DESC \u003d \" \" + PREFIX_SOURCE; // missing source"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"-100\"; // negative quantity not allowed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INVALID_INCREMENT_QUANTITY_DESC \u003d \" \" + PREFIX_INCREMENT_QUANTITY + \"two\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INVALID_NEW_QUANTITY_DESC \u003d \" \" + PREFIX_NEW_QUANTITY + \"-100\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INVALID_NEW_QUANTITY_DESC2 \u003d \" \" + PREFIX_NEW_QUANTITY + \"two\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_SERIAL_NUMBER \u003d \"0\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String[] VALID_NAME_APPLE_KEYWORDS \u003d VALID_NAME_APPLE.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String[] VALID_NAME_BANANA_KEYWORDS \u003d VALID_NAME_BANANA.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String[] VALID_SOURCE_APPLE_KEYWORDS \u003d VALID_SOURCE_APPLE.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String[] VALID_LOCATION_APPLE_KEYWORDS \u003d VALID_LOCATION_APPLE.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String[] VALID_SERIAL_NUMBER_BANANA_KEYWORDS \u003d VALID_SERIAL_NUMBER_BANANA.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (CommandException | SourceCompanyNotFoundException ce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * - the stock book, filtered stock list and selected stock in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        StockBook expectedStockBook \u003d new StockBook(actualModel.getStockBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStockList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertEquals(expectedStockBook, actualModel.getStockBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStockList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the stock at the given {@code targetSerialNumber} in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code model}\u0027s stock book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static void showStockAtSerialNumber(Model model, SerialNumber targetSerialNumber) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //stocks should exist"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertTrue(model.getFilteredStockList().stream().anyMatch(stock -\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                stock.getSerialNumber().equals(targetSerialNumber)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] splitName \u003d new String[1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c model.getFilteredStockList().size(); i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Stock curr \u003d model.getFilteredStockList().get(i);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (curr.getSerialNumber().equals(targetSerialNumber)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                splitName[0] \u003d curr.getName().fullName.split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertTrue(splitName[0] !\u003d null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        model.updateFilteredStockList((new NameContainsKeywordsPredicate(Arrays.asList(splitName[0]))));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(1, model.getFilteredStockList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 7,
      "AudreyFelicio": 60,
      "kc-98": 29,
      "Ashley-Lau": 41,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.showStockAtSerialNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.SERIAL_NUMBER_FIRST_STOCK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.SERIAL_NUMBER_SECOND_STOCK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalSerialNumberSetsBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.serialNumberListAsString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.stocksAsString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                                                    getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void execute_validSerialNumbersUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cStock\u003e stocksToDelete \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        model.getFilteredStockList().forEach(stock -\u003e stocksToDelete.add(stock));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cSerialNumber\u003e serialNumbersGiven \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cStock\u003e stocksList \u003d List.copyOf(stocksToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        stocksList.forEach(stock -\u003e serialNumbersGiven.add(stock.getSerialNumber()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(serialNumbersGiven);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STOCK_SUCCESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                    stocksAsString(stocksList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getStockBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        stocksToDelete.forEach(stock -\u003e expectedModel.deleteStock(stock));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void execute_invalidSerialNumbersQuantity_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new LinkedHashSet\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_NO_SERIAL_NUMBERS_GIVEN);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void execute_validSerialNumbersFilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        showStockAtSerialNumber(model, SERIAL_NUMBER_FIRST_STOCK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //initialises for delete command usage."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cSerialNumber\u003e firstSerialNumberSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        firstSerialNumberSet.add(SERIAL_NUMBER_FIRST_STOCK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Stock stockToDelete \u003d APPLE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cStock\u003e firstStock \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        firstStock.add(stockToDelete);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(firstSerialNumberSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STOCK_SUCCESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                stocksAsString(firstStock));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getStockBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        expectedModel.deleteStock(stockToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        showNoStock(expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void execute_invalidSerialNumberFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        showStockAtSerialNumber(model, SERIAL_NUMBER_FIRST_STOCK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // ensures that SERIAL_NUMBER_SECOND_STOCK is still in the stock book list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertTrue(model.getStockBook().getStockList().stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .anyMatch(stock -\u003e stock.getSerialNumber().equals(SERIAL_NUMBER_SECOND_STOCK)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cSerialNumber\u003e secondSerialNumberSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        secondSerialNumberSet.add(SERIAL_NUMBER_SECOND_STOCK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(secondSerialNumberSet);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SERIAL_NUMBER_NOT_FOUND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                serialNumberListAsString(List.copyOf(secondSerialNumberSet)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //initialises sets for delete command usage."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cSerialNumber\u003e firstSerialNumberSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        firstSerialNumberSet.add(SERIAL_NUMBER_FIRST_STOCK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cSerialNumber\u003e secondSerialNumberSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        secondSerialNumberSet.add(SERIAL_NUMBER_SECOND_STOCK);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(firstSerialNumberSet);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(secondSerialNumberSet);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(firstSerialNumberSet);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no stocks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private void showNoStock(Model model) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        model.updateFilteredStockList(p -\u003e false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertTrue(model.getFilteredStockList().isEmpty());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 2,
      "kc-98": 141,
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/EditStockDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class EditStockDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_STOCKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalSerialNumberSetsBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs(), getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalStockBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            new UserPrefs(), getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void constructor_nullPredicateList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute_multiplePredicateList_multipleStocksFound() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STOCKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"Ap\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate sourcePredicate \u003d prepareSourcePredicate(\"price\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand command \u003d new FindCommand(Arrays.asList(namePredicate, sourcePredicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // expected status message to show what user has searched for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedMessage \u003d \"Searching for:\\n\" + namePredicate.toString() + \", \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + sourcePredicate.toString() + \"\\n\" + expectedMessage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPredicate\u003cStock\u003e\u003e predicateList \u003d Arrays.asList(namePredicate, sourcePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedModel.updateFilteredStockList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                predicateList.stream().reduce(x -\u003e true, Predicate::or));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, BANANA), model.getFilteredStockList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute_zeroKeywords_noStockFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STOCKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // status message to show what user has searched for"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String statusMessage \u003d \"Searching for:\\n\" + predicate.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedModel.updateFilteredStockList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertCommandSuccess(command, model, statusMessage + \"\\n\" + expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStockList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute_multipleKeywords_oneStockFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STOCKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"A ple\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // status message to show what user has searched for"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String statusMessage \u003d \"Searching for:\\n\" + predicate.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedModel.updateFilteredStockList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertCommandSuccess(command, model, statusMessage + \"\\n\" + expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(Collections.singletonList(APPLE), model.getFilteredStockList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(\"second\", \"second\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand firstFindCommand \u003d new FindCommand(Collections.singletonList(firstPredicate));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand secondFindCommand \u003d new FindCommand(Collections.singletonList(secondPredicate));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand thirdFindCommand \u003d new FindCommand(Collections.singletonList(thirdPredicate));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstFindCommand.equals(firstFindCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(Collections.singletonList(firstPredicate));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstFindCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand secondFindCommandCopy \u003d new FindCommand(Collections"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .singletonList(new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(secondFindCommand.equals(secondFindCommandCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstFindCommand.equals(1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstFindCommand.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstFindCommand.equals(secondFindCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // one same value, other copy of value -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(secondFindCommand.equals(thirdFindCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String trimmedUserInput) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(trimmedUserInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses {@code userInput} into a {@code SourceContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private SourceContainsKeywordsPredicate prepareSourcePredicate(String trimmedUserInput) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new SourceContainsKeywordsPredicate(Arrays.asList(trimmedUserInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 127,
      "Ashley-Lau": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/FindExactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_STOCKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalSerialNumberSetsBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindExactCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class FindExactCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs(), getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalStockBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            new UserPrefs(), getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void constructor_nullPredicateList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindExactCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute_multiplePredicates_oneStockFound() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STOCKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"app\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate sourcePredicate \u003d prepareSourcePredicate(\"ntuc\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand command \u003d new FindExactCommand(Arrays.asList(namePredicate, sourcePredicate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // expected status message to show what user has searched for"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedMessage \u003d \"Searching for:\\n\" + namePredicate.toString() + \", \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + sourcePredicate.toString() + \"\\n\" + expectedMessage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPredicate\u003cStock\u003e\u003e predicateList \u003d Arrays.asList(namePredicate, sourcePredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedModel.updateFilteredStockList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                predicateList.stream().reduce(x -\u003e true, Predicate::and));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(Collections.singletonList(APPLE), model.getFilteredStockList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute_zeroKeywords_noStockFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STOCKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand command \u003d new FindExactCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // status message to show what user has searched for"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String statusMessage \u003d \"Searching for:\\n\" + predicate.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedModel.updateFilteredStockList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertCommandSuccess(command, model, statusMessage + \"\\n\" + expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStockList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute_multipleKeywords_oneStockFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STOCKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"A ple\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand command \u003d new FindExactCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // status message to show what user has searched for"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String statusMessage \u003d \"Searching for:\\n\" + predicate.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        expectedModel.updateFilteredStockList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertCommandSuccess(command, model, statusMessage + \"\\n\" + expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(Collections.singletonList(APPLE), model.getFilteredStockList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(\"second\", \"second\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand firstFindExactCommand \u003d new FindExactCommand(Collections.singletonList(firstPredicate));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand secondFindExactCommand \u003d new FindExactCommand(Collections.singletonList(secondPredicate));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand thirdFindExactCommand \u003d new FindExactCommand(Collections.singletonList(thirdPredicate));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstFindExactCommand.equals(firstFindExactCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand findFirstCommandCopy \u003d new FindExactCommand(Collections.singletonList(firstPredicate));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstFindExactCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand secondFindExactCommandCopy \u003d new FindExactCommand(Collections"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .singletonList(new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"))));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(secondFindExactCommand.equals(secondFindExactCommandCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstFindExactCommand.equals(1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstFindExactCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstFindExactCommand.equals(secondFindExactCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // one same value, other copy of value -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(secondFindExactCommand.equals(thirdFindExactCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String trimmedUserInput) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(trimmedUserInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses {@code userInput} into a {@code SourceContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private SourceContainsKeywordsPredicate prepareSourcePredicate(String trimmedUserInput) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new SourceContainsKeywordsPredicate(Arrays.asList(trimmedUserInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 133
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.showStockAtSerialNumber;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.SERIAL_NUMBER_FIRST_STOCK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalSerialNumberSetsBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs(), getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getStockBook(), new UserPrefs(), model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        showStockAtSerialNumber(model, SERIAL_NUMBER_FIRST_STOCK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7,
      "LimZeWeiDennis": 33
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/PrintCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalSerialNumberSetsBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code PrintCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class PrintCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalStockBook(), new UserPrefsStub(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void execute_stockAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStockBook(), model.getUserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                getTypicalSerialNumberSetsBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertCommandSuccess(new PrintCommand(), model, PrintCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        PrintCommand printCommand \u003d new PrintCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(printCommand.equals(printCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        PrintCommand printCommandCopy \u003d new PrintCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(printCommand.equals(printCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(printCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * UserPrefs stub that creates csv file in test class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static class UserPrefsStub extends UserPrefs {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        private final Path csvFilePath \u003d Paths.get(\"datatest\", \"stocks.csv\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public Path getCsvFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(csvFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return csvFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 61
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalSerialNumberSetsBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.testutil.UpdateStockDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private SerialNumberSetsBook serialNumbers \u003d getTypicalSerialNumberSetsBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs(), serialNumbers);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlyQuantityUpdated_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withQuantity(\"2103\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlySourceUpdated_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withSource(\"Value$\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlyLocationUpdated_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withLocation(\"Discount section\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlyNameUpdated_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withName(\"Mochi\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Index indexLastStock \u003d Index.fromOneBased(model.getFilteredStockList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock lastStock \u003d model.getFilteredStockList().get(indexLastStock.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        StockBuilder stockInList \u003d new StockBuilder(lastStock);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d stockInList.withName(VALID_NAME_APPLE).withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE).withLocation(VALID_LOCATION_APPLE)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(updatedStock.getSerialNumber().toString()).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(lastStock, updatedStock);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d model.getFilteredStockList().get(0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor serialNumberOnly \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(updatedStock.getSerialNumber().toString()).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(serialNumberOnly);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock stockInFilteredList \u003d model.getFilteredStockList().get(0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder(stockInFilteredList).withName(VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(new UpdateStockDescriptorBuilder().withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(stockInFilteredList.getSerialNumber().toString()).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(0), updatedStock);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_multipleStocksUpdated_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStockApple \u003d new StockBuilder().withName(\"Ice Cream\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(\"Magnum\").withLocation(\"Freezer One\").withSerialNumber(VALID_SERIAL_NUMBER_APPLE)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantity(\"2000\").build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStockBanana \u003d new StockBuilder().withName(\"Ice Cream\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(\"Magnum\").withLocation(\"Freezer One\").withSerialNumber(VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantity(\"2103\").build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(\"Ice Cream\").withSource(\"Magnum\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(\"Freezer One\").withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                \"\\n\" + updatedStockApple + \"\\n\" + updatedStockBanana);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(0), updatedStockApple);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStockBanana);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_serialNumberNotFound_failure() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withSerialNumber(\"NotFound\").build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_someSerialNumberNotFound_failure() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, \"Not Found\").build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_allSerialNumberNotFound_failure() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(\"Unknown\", \"Not Found\").build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(new StockBuilder().build()).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor differentDescriptor \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withName(VALID_NAME_APPLE).withSerialNumber(VALID_SERIAL_NUMBER_APPLE).build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor copyDescriptor \u003d new UpdateStockDescriptor(descriptor);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(copyDescriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(differentDescriptor)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 2,
      "AudreyFelicio": 239,
      "Ashley-Lau": 1
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.DEFAULT_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_SOURCE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.QUANTITY_DESC_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_BANANA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_BANANA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock expectedStock \u003d new StockBuilder().withName(VALID_NAME_BANANA).withSource(VALID_SOURCE_BANANA)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_BANANA).withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(DEFAULT_SERIAL_NUMBER).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, new AddCommand(expectedStock));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // fielder header in different order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA + NAME_DESC_BANANA, new AddCommand(expectedStock));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing source prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + VALID_SOURCE_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + VALID_QUANTITY_BANANA"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing location prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + VALID_LOCATION_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + VALID_SOURCE_BANANA + VALID_QUANTITY_BANANA"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + VALID_LOCATION_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_multipleCompulsoryFields_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DUPLICATE_HEADER_FIELD, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + NAME_DESC_APPLE + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple source"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + SOURCE_DESC_APPLE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple quantity"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + QUANTITY_DESC_APPLE + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple location"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA + LOCATION_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid source"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_SOURCE_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + INVALID_QUANTITY_DESC + LOCATION_DESC_BANANA, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        + QUANTITY_DESC_BANANA + INVALID_LOCATION_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 3,
      "Ashley-Lau": 125,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA_WITH_WHITESPACES_BETWEEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.QUANTITY_DESC_BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_APPLE_KEYWORDS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA_KEYWORDS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA_KEYWORDS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_APPLE_KEYWORDS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SerialNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindCommand(Collections.singletonList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        new SourceContainsKeywordsPredicate(Arrays.asList(VALID_SOURCE_APPLE_KEYWORDS))));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser, SOURCE_DESC_APPLE, expectedFindCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindCommand expectedSecondFindCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindCommand(Collections.singletonList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_BANANA_KEYWORDS))));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BANANA_WITH_WHITESPACES_BETWEEN, expectedSecondFindCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate expectedNamePredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_BANANA_KEYWORDS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate expectedLocationPredicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(Arrays.asList(VALID_LOCATION_APPLE_KEYWORDS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate expectedSnPredicate \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(Arrays.asList(VALID_SERIAL_NUMBER_BANANA_KEYWORDS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                PREAMBLE_WHITESPACE + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindCommand(Collections.singletonList(expectedNamePredicate)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // field headers in different order"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                PREAMBLE_WHITESPACE + LOCATION_DESC_APPLE + NAME_DESC_BANANA + SERIAL_NUMBER_DESC_BANANA,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindCommand(Arrays.asList(expectedNamePredicate,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        expectedLocationPredicate, expectedSnPredicate)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // missing any prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, VALID_SERIAL_NUMBER_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_duplicateCompulsoryFields_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DUPLICATE_HEADER_FIELD, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + NAME_DESC_APPLE + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple source"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + SOURCE_DESC_APPLE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "               + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple location"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + LOCATION_DESC_BANANA + LOCATION_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple serialNumber"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + LOCATION_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + SERIAL_NUMBER_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + LOCATION_DESC_BANANA,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_invalidFieldsPresent_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // quantity field present"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 133,
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/FindExactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA_WITH_WHITESPACES_BETWEEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.QUANTITY_DESC_BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_APPLE_KEYWORDS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA_KEYWORDS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA_KEYWORDS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_APPLE_KEYWORDS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.FindExactCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SerialNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class FindExactCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private FindExactCommandParser parser \u003d new FindExactCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_validArgs_returnsFindExactCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand expectedFindExactCommand \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindExactCommand(Collections.singletonList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        new SourceContainsKeywordsPredicate(Arrays.asList(VALID_SOURCE_APPLE_KEYWORDS))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser, SOURCE_DESC_APPLE, expectedFindExactCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        FindExactCommand expectedSecondFindExactCommand \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindExactCommand(Collections.singletonList("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_BANANA_KEYWORDS))));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BANANA_WITH_WHITESPACES_BETWEEN, expectedSecondFindExactCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate expectedNamePredicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_BANANA_KEYWORDS));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate expectedLocationPredicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(Arrays.asList(VALID_LOCATION_APPLE_KEYWORDS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate expectedSnPredicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(Arrays.asList(VALID_SERIAL_NUMBER_BANANA_KEYWORDS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                PREAMBLE_WHITESPACE + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindExactCommand(Collections.singletonList(expectedNamePredicate)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // field headers in different order"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                PREAMBLE_WHITESPACE + LOCATION_DESC_APPLE + NAME_DESC_BANANA + SERIAL_NUMBER_DESC_BANANA,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new FindExactCommand(Arrays.asList(expectedNamePredicate,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        expectedLocationPredicate, expectedSnPredicate)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // missing any prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, VALID_SERIAL_NUMBER_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_duplicateCompulsoryFields_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DUPLICATE_HEADER_FIELD, FindExactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + NAME_DESC_APPLE + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple source"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + SOURCE_DESC_APPLE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple location"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + LOCATION_DESC_BANANA + LOCATION_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // multiple serialNumber"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + LOCATION_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + SERIAL_NUMBER_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void parse_invalidFieldsPresent_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // quantity field present"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 138
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/PrintCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.PrintCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class PrintCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private PrintCommandParser parser \u003d new PrintCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_extraArgument_failure() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrintCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_noFields_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseSuccess(parser, \"\", new PrintCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 26
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/StockBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBookParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/UpdateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INCREMENT_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_INCREMENT_QUANTITY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NEW_QUANTITY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NEW_QUANTITY_DESC2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_SOURCE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NEW_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_APPLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_APPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.testutil.UpdateStockDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // no serial number specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_APPLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // no keyword specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // random user input without keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, \"thisIsRandom\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid keyword without any valid keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, \"x/invalid\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid quantity prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_BANANA + INVALID_QUANTITY_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid new quantity"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NEW_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NEW_QUANTITY_DESC2, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid increment quantity"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_INCREMENT_QUANTITY_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                QuantityAdder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid source"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_SOURCE_DESC, Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid field followed by a valid field"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_LOCATION_DESC + SOURCE_DESC_APPLE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_BANANA + INVALID_NEW_QUANTITY_DESC + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + INVALID_INCREMENT_QUANTITY_DESC"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + VALID_SOURCE_APPLE, QuantityAdder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // multiple invalid fields"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NAME_DESC + INVALID_NEW_QUANTITY_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantity(VALID_QUANTITY_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + INCREMENT_QUANTITY_DESC_APPLE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantityAdder(VALID_QUANTITY_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase()).withSource(VALID_SOURCE_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantity(VALID_QUANTITY_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // source"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withSource(VALID_SOURCE_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withLocation(VALID_LOCATION_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // new quantity"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NEW_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantity(VALID_QUANTITY_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // increment quantity"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + INCREMENT_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantityAdder(VALID_QUANTITY_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_multipleSerialNumbersAllFieldsSpecified_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase()).withQuantity(VALID_QUANTITY_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + INCREMENT_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase()).withQuantityAdder(VALID_QUANTITY_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_multipleSerialNumbersSomeFieldsSpecified_success() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase()).build();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE.toLowerCase()).withQuantity(VALID_QUANTITY_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_multipleSerialNumbersOneFieldSpecified_success() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // source"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withSource(VALID_SOURCE_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withLocation(VALID_LOCATION_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // new quantity"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + NEW_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantity(VALID_QUANTITY_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // increment quantity"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + INCREMENT_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantityAdder(VALID_QUANTITY_APPLE.toLowerCase())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE.toLowerCase(), VALID_SERIAL_NUMBER_BANANA.toLowerCase())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 296
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/StockBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBookTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Location.isValidLocation(\"   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // valid location"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Section A\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Location.isValidLocation("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"Section B; @subsection b.1 in the northwing\")); // long location"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 37
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Name.isValidName(\"fruit*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"apple\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"134324\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"fan 1234\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"Apple Banana\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"Apple Banana Orange Citrus fruit\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 8,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"fdfs\")); // alphabets only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-199\")); // negative number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"0\")); // zero"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"14\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"2324254\")); // large number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 39
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/SourceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class SourceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Source(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_invalidSource_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String invalidSource \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Source(invalidSource));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isValidSource() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null source"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Source.isValidSource(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid source"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Source.isValidSource(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Source.isValidSource(\"  \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // valid source"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Source.isValidSource(\"Kc Company\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Source.isValidSource(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Source.isValidSource("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"kc Company and amy company combine@ptd limited at\")); // long Source"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 37
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/StockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.isSameStock(APPLE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.isSameStock(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same serialnumber, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withSerialNumber(VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(BANANA.isSameStock(editedApple));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same name, same source, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withLocation(VALID_LOCATION_BANANA).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.isSameStock(editedApple));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same name, same source, same serialnumber, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withSource(VALID_SOURCE_BANANA).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(BANANA.isSameStock(editedApple));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different name, same source, different serialnumber -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withSource(VALID_SOURCE_BANANA)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(BANANA.isSameStock(editedApple));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same name, different source, different serialnumber -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(BANANA.isSameStock(editedApple));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock appleCopy \u003d new StockBuilder(APPLE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different name, same serialnumber-\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withName(VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different serial number, same name, same source-\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withSerialNumber(VALID_SERIAL_NUMBER_BANANA).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different source, same serialnumber -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withSource(VALID_SOURCE_BANANA).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different Quantity -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different Location -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withLocation(VALID_LOCATION_BANANA).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 94,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/UniqueStockListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateStockException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.StockNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class UniqueStockListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final UniqueStockList uniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_stockNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(uniqueStockList.contains(APPLE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_stockInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(uniqueStockList.contains(APPLE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_stockWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withLocation(VALID_LOCATION_BANANA)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(uniqueStockList.contains(editedApple));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void add_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void add_duplicateStock_throwsDuplicateStockException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(DuplicateStockException.class, () -\u003e uniqueStockList.add(APPLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_nullTargetStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStock(null, APPLE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_nullEditedStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStock(APPLE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_targetStockNotInList_throwsStockNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(StockNotFoundException.class, () -\u003e uniqueStockList.setStock(APPLE, APPLE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockIsSameStock_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStock(APPLE, APPLE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withLocation(VALID_LOCATION_BANANA)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStock(APPLE, editedApple);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(editedApple);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStock(APPLE, BANANA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockHasNonUniqueIdentity_throwsDuplicateStockException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(DuplicateStockException.class, () -\u003e uniqueStockList.setStock(APPLE, BANANA));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove_stockDoesNotExist_throwsStockNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(StockNotFoundException.class, () -\u003e uniqueStockList.remove(APPLE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove_existingStock_removesStock() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.remove(APPLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_nullUniqueStockList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStocks((UniqueStockList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_uniqueStockList_replacesOwnListWithProvidedUniqueStockList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStocks(expectedUniqueStockList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStocks((List\u003cStock\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cStock\u003e stockList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStocks(stockList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_listWithDuplicateStocks_throwsDuplicateStockException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cStock\u003e listWithDuplicateStocks \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(DuplicateStockException.class, () -\u003e uniqueStockList.setStocks(listWithDuplicateStocks));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                ) -\u003e uniqueStockList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 172
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/predicates/LocationContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class LocationContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e firstLocationPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e secondLocationPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e thirdLocationPredicateKeywordList \u003d Arrays.asList(\"first\", \"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate firstLocationPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(firstLocationPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate secondLocationPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(secondLocationPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate thirdLocationPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(thirdLocationPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstLocationPredicate.equals(firstLocationPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(firstLocationPredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstLocationPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate secondPredicateCopy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(Arrays.asList(\"first\", \"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(secondLocationPredicate.equals(secondPredicateCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // one same value, other copy of value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstLocationPredicate.equals(thirdLocationPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstLocationPredicate.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstLocationPredicate.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstLocationPredicate.equals(secondLocationPredicate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_locationContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches a word"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(Collections.singletonList(\"Poultry\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches entire Location exactly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Collections.singletonList(\"Poultry Section B1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that is substring of a word in Location"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Collections.singletonList(\"tion\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match completely"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Poultry\", \"Section\", \"B1\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords with one non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Poultry\", \"Section\", \"B1\", \"Donut\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match with only one word"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Sec\", \"tion\", \"section\", \"tion\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"poultry\", \"section\", \"b1\", \"poul\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords that match multiple words in Location"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"poultry Section\", \"section B1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Mixed-case matching keywords"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"pOULtrY sEcTIOn\", \"sectION\", \"b1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one non-matching keyword"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"pOutry section\", \"section\", \"B1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly matches Location but do not match serial number, name, quantity and source"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"oultry\", \"poultry section\", \"Poultry Section B1\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSerialNumber(\"Fairprice1\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .withLocation(\"Poultry Section B1\").withQuantity(\"12345\").withSource(\"Fairprice\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_locationDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate predicate \u003d new LocationContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One irrelevant non-matching keyword"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One non-matching keyword that contains words of Location"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Collections.singletonList(\"Poultry B1\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple irrelevant non-matching keywords"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"One\", \"Two\", \"12345\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords that contain words of Location"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Poultry Sections\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \"PoultrySection\", \"Poultry B1\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords with one keyword that exactly matches Location"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Poultry Sections\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \"PoultrySection\", \"Poultry Section B1\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly match serial number, name, quantity and source but does not match Location"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"12345\", \"Fairprice\", \"Pork Belly\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSerialNumber(\"Fairprice1\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .withLocation(\"Poultry Section B1\").withQuantity(\"12345\").withSource(\"Fairprice\").build()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_emptyStringKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One empty string keyword"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(Collections.singletonList(\"\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple empty string keywords"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"\", \"\", \"\", \"\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one empty string keyword"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"pOultry section\", \"b1\", \"\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withLocation(\"Poultry Section B1\").build()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        LocationContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new LocationContainsKeywordsPredicate(Collections.singletonList(\"test\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(predicate.toString(), \"Location: test\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 165
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/predicates/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e firstNamePredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e secondNamePredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e thirdNamePredicateKeywordList \u003d Arrays.asList(\"first\", \"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate firstNamePredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(firstNamePredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate secondNamePredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(secondNamePredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate thirdNamePredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(thirdNamePredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstNamePredicate.equals(firstNamePredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(firstNamePredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstNamePredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicateCopy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(\"first\", \"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(secondNamePredicate.equals(secondPredicateCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // one same value, other copy of value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstNamePredicate.equals(thirdNamePredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstNamePredicate.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstNamePredicate.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstNamePredicate.equals(secondNamePredicate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches a word"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Pork\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches entire name exactly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Pork Belly 100g\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that is substring of a word in name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"100\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match completely"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Pork\", \"Belly\", \"100g\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords with one non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Pork\", \"Belly\", \"100g\", \"Donut\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match with only one word"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Belly\", \"ly\", \"bel\", \"belly\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"pork\", \"belly\", \"ork\", \"00g\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords that match multiple words in name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"pork Belly\", \"belly 100\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Mixed-case matching keywords"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"pOrK bEllY\", \"bElly\", \"100G\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one non-matching keyword"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"pOrK bEllYs\", \"bElly\", \"100G\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly matches name but do not match serial number, source, quantity and location"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"ork\", \"pork belly\", \"pork belly 100g\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSerialNumber(\"Fairprice1\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .withSource(\"Fairprice\").withQuantity(\"12345\").withLocation(\"Section B\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One irrelevant non-matching keyword"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One non-matching keyword that contains words of name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Pork 100g\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple irrelevant non-matching keywords"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Porky\", \"Bully\", \"200\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords that contain words of name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Pork Bellys\", \"PorkBelly\", \"Pork 100g\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords with one keyword that exactly matches name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Pork Bellys\", \"PorkBelly\", \"Pork Belly 100g\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly match serial number, source, quantity and location but does not match name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"345\", \"section b\", \"Fairprice\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSerialNumber(\"Fairprice1\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withSource(\"Fairprice\").withQuantity(\"12345\").withLocation(\"Section B\").build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_emptyStringKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One empty string keyword"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple empty string keywords"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"\", \"\", \"\", \"\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one empty string keyword"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"pOrK bEllY\", \"bElly\", \"\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").build()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"test\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(predicate.toString(), \"Name: test\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 115,
      "Ashley-Lau": 47
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/predicates/SerialNumberContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class SerialNumberContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e firstSerialNumberPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e secondSerialNumberPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e thirdSerialNumberPredicateKeywordList \u003d Arrays.asList(\"first\", \"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate firstSerialNumberPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(firstSerialNumberPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate secondSerialNumberPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(secondSerialNumberPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate thirdSerialNumberPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(thirdSerialNumberPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstSerialNumberPredicate.equals(firstSerialNumberPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(firstSerialNumberPredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstSerialNumberPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate secondPredicateCopy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"first\", \"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(secondSerialNumberPredicate.equals(secondPredicateCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // one same value, other copy of value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSerialNumberPredicate.equals(thirdSerialNumberPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSerialNumberPredicate.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSerialNumberPredicate.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSerialNumberPredicate.equals(secondSerialNumberPredicate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_serialNumberContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches a word"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(Collections.singletonList(\"ABC\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches entire Serial Number exactly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Collections.singletonList(\"ABC-DEF12345\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that is substring of a word in Serial Number"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Collections.singletonList(\"F123\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match substring"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"ABC\", \"-DE\", \"12345\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords with one non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"ABC\", \"DEF\", \"12345\", \"Donut\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match with only one word"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"ABC\", \"abc\", \"bc\", \"Ab\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"ABC-DEF\", \"-DEF123\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Mixed-case matching keywords"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"abC-dEF\", \"eF12\", \"-deF123\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one non-matching keyword"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"abC-dEF\", \"eF12\", \"ABC-12345\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly matches Serial Number but do not match source, name, quantity and location"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"ABC\", \"bc-def\", \"ABC-DEF12345\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSource(\"Fairprice\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .withSerialNumber(\"ABC-DEF12345\").withQuantity(\"12345\").withLocation(\"Section B\").build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_serialNumberDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One irrelevant non-matching keyword"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One non-matching keyword that contains words of Serial Number"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Collections.singletonList(\"ABC-12345\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple irrelevant non-matching keywords"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"ABCD\", \"CDEF\", \"123456\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords that contain words of Serial Number"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"ABCDEF\", \"ABC12345\", \"ABC -DEF12345\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords with one keyword that exactly matches Serial Number"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"Pigs Farms\", \"PigsFarm\", \"ABC-DEF12345\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly match source, name, quantity and location but does not match Serial Number"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"12345\", \"section b\", \"Pork Belly\", \"Fairprice\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSource(\"Fairprice\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .withSerialNumber(\"ABC-DEF12345\").withQuantity(\"12345\").withLocation(\"Section B\").build()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_emptyStringKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One empty string keyword"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(Collections.singletonList(\"\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple empty string keywords"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"\", \"\", \"\", \"\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one empty string keyword"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SerialNumberContainsKeywordsPredicate(Arrays.asList(\"ABC-DEF\", \"DEF12345\", \"\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSerialNumber(\"ABC-DEF12345\").build()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SerialNumberContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SerialNumberContainsKeywordsPredicate(Collections.singletonList(\"test\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(predicate.toString(), \"Serial Number: test\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 160
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/predicates/SourceContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class SourceContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e firstSourcePredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e secondSourcePredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cString\u003e thirdSourcePredicateKeywordList \u003d Arrays.asList(\"first\", \"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate firstSourcePredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SourceContainsKeywordsPredicate(firstSourcePredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate secondSourcePredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SourceContainsKeywordsPredicate(secondSourcePredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate thirdSourcePredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SourceContainsKeywordsPredicate(thirdSourcePredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstSourcePredicate.equals(firstSourcePredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SourceContainsKeywordsPredicate(firstSourcePredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(firstSourcePredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate secondPredicateCopy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SourceContainsKeywordsPredicate(Arrays.asList(\"first\", \"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(secondSourcePredicate.equals(secondPredicateCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // one same value, other copy of value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSourcePredicate.equals(thirdSourcePredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSourcePredicate.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSourcePredicate.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(firstSourcePredicate.equals(secondSourcePredicate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_sourceContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches a word"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SourceContainsKeywordsPredicate(Collections.singletonList(\"Pigs\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that matches entire source exactly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Collections.singletonList(\"Pigs Farm Area-249\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One keyword that is substring of a word in source"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Collections.singletonList(\"249\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match completely"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"Pigs\", \"Farm\", \"Area-249\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords with one non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"Pigs\", \"Farm\", \"Area-249\", \"Donut\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple keywords that match with only one word"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"Farm\", \"rm\", \"Far\", \"farm\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"pigs\", \"farm\", \"igs\", \"-24\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple matching keywords that match multiple words in source"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"pigs Farm\", \"farm Area-249\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Mixed-case matching keywords"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"pIgS fARM\", \"fArm\", \"A-249\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one non-matching keyword"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"pIgS fARMs\", \"fArm\", \"A-249\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly matches source but do not match serial number, name, quantity and location"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"igs\", \"pigs farm\", \"pigs farm area-249\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSerialNumber(\"Fairprice1\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .withSource(\"Pigs Farm Area-249\").withQuantity(\"12345\").withLocation(\"Section B\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_sourceDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate predicate \u003d new SourceContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One irrelevant non-matching keyword"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One non-matching keyword that contains words of source"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Collections.singletonList(\"Pigs Area-249\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple irrelevant non-matching keywords"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"Pigsy\", \"Farms\", \"2499\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords that contain words of source"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"Pig Farm\", \"PigsFarm\", \"Pigs Area-249\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple non-matching keywords with one keyword that exactly matches source"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"Pigs Farms\", \"PigsFarm\", \"Pigs Farm Area-249\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Keywords exactly match serial number, name, quantity and location but does not match source"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Arrays.asList(\"345\", \"section b\", \"Pork Belly\", \"Fairprice1\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Pork Belly 100g\").withSerialNumber(\"Fairprice1\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .withSource(\"Pigs Farm Area-249\").withQuantity(\"12345\").withLocation(\"Section B\").build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void test_emptyStringKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // One empty string keyword"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate predicate \u003d new SourceContainsKeywordsPredicate(Collections.singletonList(\"\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Multiple empty string keywords"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"\", \"\", \"\", \"\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //Mixed-case with multiple matching keywords and one empty string keyword"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        predicate \u003d new SourceContainsKeywordsPredicate(Arrays.asList(\"pigs farm\", \"FARM\", \"\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withSource(\"Pigs Farm Area-249\").build()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        SourceContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                new SourceContainsKeywordsPredicate(Collections.singletonList(\"test\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(predicate.toString(), \"Source: test\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 162
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonAdaptedStockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonAdaptedStockTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonSerializableStockBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonSerializableStockBookTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonStockBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonStockBookStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/StockBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A utility class to help with building Stock objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Banana Bun\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_SERIALNUMBER \u003d \"Fairprice1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_SOURCE \u003d \"Fairprice\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"1000\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Fruits section, Subsection B\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Source source;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates a {@code StockBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        serialNumber \u003d new SerialNumber(DEFAULT_SERIALNUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        source \u003d new Source(DEFAULT_SOURCE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Initializes the StockBuilder with the data of {@code stockToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder(Stock stockToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name \u003d stockToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        serialNumber \u003d stockToCopy.getSerialNumber();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        source \u003d stockToCopy.getSource();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        quantity \u003d stockToCopy.getQuantity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        location \u003d stockToCopy.getLocation();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Name} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Source} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withSource(String source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d new Source(source);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Location} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Stock build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Stock(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 93
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Stock getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getFilteredStockList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/TypicalStocks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.AccumulatedQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A utility class containing a list of {@code Stock} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class TypicalStocks {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Stock APPLE \u003d new StockBuilder().withName(\"Apple Juice\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .withSerialNumber(\"Ntuc1\").withSource(\"Ntuc\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .withQuantity(\"2000\").withLocation(\"Fruit Section, Subsection C\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Stock BANANA \u003d new StockBuilder().withName(\"Banana Cake\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .withSerialNumber(\"Fairprice1\").withSource(\"Fairprice\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            .withQuantity(\"2103\").withLocation(\"Fruits section, Subsection B\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final Stock PINEAPPLE \u003d new StockBuilder().withName(\"Pineapple Tart\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            .withSerialNumber(\"BengawanSolo1\").withSource(\"BengawanSolo\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            .withQuantity(\"123\").withLocation(\"Tart Section, Subsection A\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final SerialNumber SERIAL_NUMBER_FIRST_STOCK \u003d APPLE.getSerialNumber();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final SerialNumber SERIAL_NUMBER_SECOND_STOCK \u003d BANANA.getSerialNumber();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private TypicalStocks() {} // prevents instantiation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns an {@code StockBook} with all the typical stocks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static StockBook getTypicalStockBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        StockBook inventory \u003d new StockBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock stock : getTypicalStocks()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            inventory.addStock(stock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static List\u003cStock\u003e getTypicalStocks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static SerialNumberSetsBook getTypicalSerialNumberSetsBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        SerialNumberSetsBook serialNumbers \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumberSet\u003e serialNumberSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock stock: getTypicalStocks()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            serialNumberSets.add(new SerialNumberSet(stock.getSource(), new AccumulatedQuantity(\"1\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        serialNumbers.setSerialNumberSets(serialNumberSets);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return serialNumbers;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Displays the list of stocks in a clearer view, with each subsequent stock moved to the next line."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param stockList The list of stocks to convert to String."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The String depicting each stock in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static String stocksAsString(List\u003cStock\u003e stockList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String stocksAsString \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c stockList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            stocksAsString +\u003d \"\\n\" + stockList.get(i).toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return stockList.size() \u003d\u003d 0 ? \"No stocks deleted\" : stocksAsString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Displays the list of serial numbers in a clearer view, with each subsequent serial number moved"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * to the next line."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param serialNumberList The list of serial numbers to convert to String."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The String depicting each serial number in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static String serialNumberListAsString(List\u003cSerialNumber\u003e serialNumberList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String serialNumbersAsString \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c serialNumberList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumbersAsString +\u003d \"\\n\" + serialNumberList.get(i).toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumbersAsString;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 5,
      "AudreyFelicio": 36,
      "kc-98": 32,
      "Ashley-Lau": 16
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/UpdateStockDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateStockDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private UpdateStockDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder(UpdateStockDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.descriptor \u003d new UpdateStockDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns an {@code UpdateStockDescriptorBuilder} with fields containing {@code stock}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder(Stock stock) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumber\u003e currentSerialNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        currentSerialNumber.add(stock.getSerialNumber());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setName(stock.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSerialNumbers(currentSerialNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setQuantity(stock.getQuantity());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setLocation(stock.getLocation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSource(stock.getSource());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Name} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withSerialNumber(String... serialNumber) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumber\u003e currentSerialNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (String serial : serialNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            currentSerialNumber.add(new SerialNumber(serial));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSerialNumbers(currentSerialNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Quantity} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setQuantity(new Quantity(quantity));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code QuantityAdder} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param quantityToBeAdded The quantity to be added into a quantity object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new {@code UpdateStockDescriptor} with the {@code QuantityAdder}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withQuantityAdder(String quantityToBeAdded) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setQuantityAdder(new QuantityAdder(quantityToBeAdded));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Location} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Source} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withSource(String source) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSource(new Source(source));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Builds the update stock descriptor required."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The update stock descriptor required."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptor build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 105
    }
  },
  {
    "path": "src/test/java/seedu/stock/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/stock/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import seedu.location.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cfx:root type\u003d\"seedu.location.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 5
    }
  }
]
