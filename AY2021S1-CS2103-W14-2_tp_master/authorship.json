[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "ConciergeBook is a desktop app for hotel receptionists to efficiently"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "manage guest bookings via a Command Line Interface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI).\u003cbr/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "If you can type fast, ConciergeBook can help you optimise how you manage your rooms,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Ensure you have `java 11` installed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Download the jar file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* Run `java -jar {jarFileName}.jar` in your terminal/cmd."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Main features"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "1. Check in and check out guests "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "2. Keep track of guests who have used the hotel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "3. Charge guests the bill upon checkout"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "For more details on how to use the app, you can"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "look at our [User Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "If you would like to extend this project, you can"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "look at our [Developer Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* This project is created as part of National University of Singapore CS2103 module in AY20/21. "
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 25,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "ConciergeBook (CB) is a desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Sherman Lim"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cimg src\u003d\"images/shermz-lim.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](https://github.com/shermz-lim)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[portfolio](team/sherman.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Integration)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for maintaining the code repository and integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for coordinating technical efforts to adhere to the software architecture."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Gene Chua"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cimg src\u003d\"images/iamgenechua.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](http://github.com/iamgenechua)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[portfolio](team/gene.md)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Logic and Model)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for ensuring that the code is clean, readable, and bug-free so others can easily contribute to the codebase."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for keeping track of deliverables and deadlines to prevent occurrences of poorly-written, buggy code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Long Zeling"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "\u003cimg src\u003d\"images/zeling595.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](https://github.com/zeling595)] "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[portfolio](team/zeling.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Ui)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Works on the UI of AB3 to fits the desired product."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Create tests for the app UI."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    * Responsible for the documentation of the UI."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Hazel Tan"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003cimg src\u003d\"images/hazel1603.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](http://github.com/Hazel1603)]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[portfolio](team/hazel.md)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for ensuring that model fits well into code without much hassle. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "### Wu Yujin"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\u003cimg src\u003d\"images/sherrywu178.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[github](https://github.com/SherryWu178)]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "[[portfolio](team/wuyujin.md)]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Role: Developer (Logic and Model)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    * Responsible for the tests of Storage."
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "iamgenechua": 3,
      "zeling595": 51
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* receptionist at a small hotel"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* has to handle the checking in and checking out of hotel guests"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* has to manage other details of hotel stay (e.g. guest information, bill)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* can type reasonably fast"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "**Value proposition**: allows receptionist to handle the checking in and out of hotel guests "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "faster than a typical mouse/GUI driven app and gives both the receptionist and guests a pleasant experience."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| Priority | As a …​                                     | I want to …​                                                                                         | So that I …​                                                            |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| -------- | ------------------------------------------ | ----------------------------------------------------------------------------------------------------| ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | [EPIC] can check-in and check-out both walk-in guests and reservations.                             |                                                                        |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | answer walk-in guests’ queries about which rooms are available for a block of dates                 | know which rooms I can check them in                                   |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | register guests with a particular room in our system                                                | can keep track of the rooms occupied.                                  |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | check out guests from a particular room in our system and make the room available again             | other guests can check in                                              |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `*`      | hotel receptionist                         | [EPIC] manage the rooms we have available in our system .                                           |                                                                        |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `*`      | hotel receptionist                         | edit the rooms’ type and price                                                                      | upgrade/downgrade a room                                               |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | [EPIC] keep track of the hotel’s customer profiles                                                  |                                                                        |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | create new customer profiles as they book rooms                                                     | keep track of their past bookings                                      |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* *`    | hotel receptionist                         | search the room he/she has booked with the name/phone number/passport no                            | locate details of persons without having to go through the entire list |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | [EPIC] keep track of guests’ billings                                                               |                                                                        |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "| `* * *`  | hotel receptionist                         | bill them by the number of nights they stay in a particular room                                    | I can bill them when they check out                                    |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "(For all use cases below, the **System** is the `ConciergeBook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use case `UC01`: Add a person profile**  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1.  User inputs the person\u0027s information"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2.  ConciergeBook creates the person\u0027s profile"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1a. Person\u0027s information is invalid  "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    1a1. ConciergeBook requests for the correct data.  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    1a2. User enters new data."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use case `UC02`: Delete a person profile**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1.  User finds the person to delete."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2.  User inputs the person\u0027s information to delete him/her."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3.  ConciergeBook deletes the person\u0027s profile"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2a. Person\u0027s information cannot be found.  "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  2a1. ConciergeBook alerts user that person\u0027s information cannot be found.  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use case `UC03`: Edit a person profile**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1.  User finds the person to edit."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2.  User inputs the person\u0027s updated information to edit his/her profile."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3.  ConciergeBook updates the person\u0027s profile"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1a. Person\u0027s information cannot be found.  "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  1a1. ConciergeBook alerts user that person\u0027s information cannot be found.  "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2a.  Updated information is invalid.  "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  2a1.  ConciergeBook requests for correct data.  "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  2a2.  User enters new data."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  Steps 2a1-2a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use case `UC04`: List room**  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. User inputs the start date and end date and optionally room type.  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2. ConciergeBook lists out all the available rooms.  "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1a. Start date and/or end date is in invalid format.  "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t1a1: ConciergeBook throws error message.   "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1b.  End date is earlier than start date.  "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t1b1: ConciergeBook throws error message.   "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1c. Room type is in invalid.  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t1c1: ConciergeBook throws error message.   "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use case `UC05`: Check in a person**  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. User finds person.  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2. User inputs the person’s name, phone number, room Id, start date and end date.  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3. ConciergeBook searches the person in the database.  "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "4. ConciergeBook creates a booking for the person and the room and saves it.  "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Use case ends.  "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Extension**  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1a. Person cannot be found.  "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    1a1: User \u003cins\u003ecreates a profile for the person (UC01)\u003c/ins\u003e.  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2a. User inputs invalid phone number.  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    2a1: ConciergeBook throws error message.  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2b. User inputs name and phone number that do not exist in the database.  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t2b1: ConciergeBook throws error message.  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2c. User inputs invalid roomId.  "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t2c1: ConciergeBook throws error message.   "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2d. User inputs invalid start date and/or end date.  "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t2d1: ConciergeBook throws error message. "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2e.  End date is earlier than start date.  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\t2e1: ConciergeBook throws error message. "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "\tUse case resumes at step 1.  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Use case: `UC06` - List bookings**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. User inputs optional date, optional name, optional room.  "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2.  ConciergeBook lists all the booking on that date."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "**Extension**  "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1a. User inputs invalid date, name, room.  "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    1a1: ConciergeBook throws an error message.  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    Use case resumes at step 1.  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "2.  Should be able to hold up to 1000 records of bookings without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "4.  Should have a UI that looks like a modern desktop app."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "5.  A receptionist new to the app should be able to pick it up quickly."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "6.  Should provide helpful prompts and guides receptionist to accomplish tasks. "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Receptionist**: User of the application as defined in the target user profile."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Hotel Guest**: The customer of the hotel who will be checking in and out of the hotel."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Booking**: Records that track the information of a Hotel Guest\u0027s stay with the hotel."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "* **Room**: The hotel room that the Hotel Guest is staying in."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 16,
      "Hazel1603": 13,
      "-": 331,
      "iamgenechua": 120
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "ConciergeBook (CB) is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. Download the latest `conciergebook.jar` from [here](https://github.com/AY2021S1-CS2103-W14-2/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ConciergeBook."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`list`** : Lists all contacts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`clear`** : Deletes all contacts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Adding a person: `addPerson`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Adds a person to the local guestbook. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Format: `addPerson n/NAME p/PHONE_NUMBER e/EMAIL`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `add n/Damith C. Rajapakse p/90123456 e/dcsdcr@nus.edu.sg`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `add n/Amanda Leow p/82340582 e/amanda@yahoo.com.sg`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Listing all persons : `listPerson`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Lists persons that contain the required phone number."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Format: `list PHONE_NUMBER`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Only phone number of Persons will be searched"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Only full phone numbers will be matched e.g. `91234567` will not match `91234568`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Only returns 1 guest as phone number of persons are unique"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `PHONE_NUMBER` needs to be have 8 digits "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `list 90123456`  will return `Damith`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Editing a person : `editPerson`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Edits an existing person in the guestbook."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Format: `editPerson INDEX [n/NAME] [p/PHONE] [e/EMAIL]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "*  `editPerson 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "*  `editPerson 2 n/Betsy Crower` Edits the name of the 2nd person to be `Betsy Crower`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Locating persons by name: `findPerson`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Format: `findPerson KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `findPerson John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `findPerson alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Deleting a person : `deletePerson`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Deletes the specified person from the guestbook."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Format: `deletePerson INDEX`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* `listPerson` followed by `deletePerson 2` deletes the 2nd person in the guestbook."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `findPerson Betsy` followed by `deletePerson 1` deletes the 1st person in the results of the `findPerson` command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "### Viewing a bill: `getBill`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Finds the bill with a room ID and a date (the last day of a booking)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Format: `getBill id/ROOM_ID ed/BOOKING_END_DATE`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* The room ID must be a valid room number"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* Dates have to be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* `getBill id/2103 ed/2020-09-15` shows the bill for the booking on Room 2103 which ends on 15 Sep 2020. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "### Checking in guest: `checkIn`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Checks in a guest into the hotel."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Format: checkIn checkIn n/NAME p/PHONE_NUMBER id/ROOM_ID sd/START_DATE ed/END_DATE"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Checks in the guest into the specified ROOM_ID"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* The roomId refers to the unique identifier of the room"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* The guest name and phone number and room ID must be unique."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* The room ID must be a valid room number."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* GUEST_IC needs to be a 5 lettered-string, with the first as a character and the remaining 4 as numbers"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Dates have to be in the format YYYY-MM-DD."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* checkIn n/James Ho p/22224444 id/4102 sd/2020-09-14 ed/2020-09-17 checks in a guest whose name is James Ho and phone number is 22224444 into room 4102 from "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "14 September 2020 to 17 September 2020."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "### Checking out guest: `checkOut`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Checks out a guest from the hotel."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Format: checkOut ROOM_ID"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Checks out the guest staying at ROOM_ID."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* The room ID refers to the unique identifier of the room. "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* The room ID must be a valid room number (4-digit number e.g. 2103, 1010, 3103)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* checkOut 2103 checks out the guest who stays in room 2103."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "### Listing hotel rooms: `listRoom`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Lists the hotel rooms with some optional filters."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Format: `listRoom [sd/START_DATE] [ed/END_DATE] [rt/ROOM_TYPE]`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Lists all the hotel rooms if none of the arguments are provided."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Both START_DATE and END_DATE have to be provided to list all the hotel rooms that are available from the START_DATE to END_DATE."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Dates have to be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* An optional ROOM_TYPE can be provided to filter the list based on the hotel room’s type."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* listRoom sd/2020-09-14 ed/2020-09-17 lists all the hotel rooms which are available from Sept 14 2020 to Sept 17 2020."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* listRoom rt/single lists all the hotel rooms of single type."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "### Listing bookings: `listBooking`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Lists the bookings with some optional filters."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Format: `listBooking [sd/START_DATE] [ed/END_DATE]`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Lists all the bookings if none of the arguments are provided."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* Dates have to be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "* listBooking sd/2020-09-14 ed/2020-09-17 lists all the bookings which are from Sept 14 2020 to Sept 17 2020."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "ConciergeBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ConciergeBook home folder."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Add Person** | `addPerson n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `addPerson n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Clear Person** | `clearPerson`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Delete Person** | `deletePerson INDEX`\u003cbr\u003e e.g., `deletePerson 3`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Edit Person** | `editPerson INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`editPerson 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Find Person** | `findPerson KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `findPerson James Jake`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**List Person** | `listPerson`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Check In** | `checkIn n/NAME p/PHONE_NUMBER id/ROOM_ID sd/START_DATE ed/END_DATE`\u003cbr\u003e e.g., `checkIn n/James Ho p/22224444 id/4102 sd/2020-09-14 ed/2020-09-17`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Check Out** | `checkOut ROOM_ID`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**list Room** | `listRoom sd/START_DATE ed/END_DATE rt/ROOM_TYPE`\u003cbr\u003e e.g., `listRoom sd/2020-09-14 ed/2020-09-17`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**list Booking** | `listBooking sd/START_DATE ed/END_DATE`\u003cbr\u003e e.g., `listBooking sd/2020-09-14 ed/2020-09-17`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "**Get Bill** | `getBill id/ROOM_ID ed/BOOKING_END_DATE`\u003cbr\u003e e.g., `getBill id/2103 ed/2020-09-15`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 79,
      "Hazel1603": 35,
      "-": 144
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "title: ConciergeBook"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "ConciergeBook is a desktop app for hotel receptionists to efficiently"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "manage guest bookings via a Command Line Interface"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI).\u003cbr/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "If you can type fast, ConciergeBook can help you optimise how you manage your rooms,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Ensure you have `java 11` installed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Download the jar file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* Run `java -jar {jarFileName}.jar` in your terminal/cmd."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Main features"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "1. Check in and check out guests "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "2. Keep track of guests who have used the hotel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "3. Charge guests the bill upon checkout"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "For more details on how to use the app, you can"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "look at our [User Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "If you would like to extend this project, you can"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "look at our [Developer Guide](https://ay2021s1-cs2103-w14-2.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* This project is created as part of National University of Singapore CS2103 module in AY20/21. "
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "iamgenechua": 21
    }
  },
  {
    "path": "docs/team/gene.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "title: Gene Chua\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "## Project: ConciergeBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "ConciergeBook is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **New Feature**: Coming Soon."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **New Feature**: Coming Soon."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Managed releases `TBC` - `TBC` (X releases) on GitHub"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Enhancements to existing features**: Coming Soon."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    * Added Use Cases `UC01`, `UC02`, UC03`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    * Added Ui.png mockup"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Updated index.md"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#24](), [\\#25]()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "  * Coming Soon."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 35
    }
  },
  {
    "path": "docs/team/hazel.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "title: Hazel\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "## Project: ConciergeBook "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ConciergeBook (CB) is a **desktop app for hotel receptionists to efficiently manage guest bookings via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ConciergeBook can help you optimise how you manage your rooms, your guests and all new and existing bookings - faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `addPerson`, `findPerson`, `deletePerson`, `editPerson` and `listPerson` [\\#18]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Added documentation for new potential command: `getBill` [\\#18]()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    * Updated User Stories [\\#29]()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 18
    }
  },
  {
    "path": "docs/team/sherman.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "---"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "title: Sherman\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "## Project: ConciergeBook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 10
    }
  },
  {
    "path": "docs/team/zeling.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zeling595": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.ReadOnlyRoomBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.RoomBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.BookingBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.JsonBookingBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook \u0026 BookingBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBookStorage bookingBookStorage \u003d new JsonBookingBookStorage(userPrefs.getBookingBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, bookingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private ReadOnlyRoomBook initRooms() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing roomData ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBook ret \u003d new RoomBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        final List\u003cRoom\u003e roomData \u003d IntStream.rangeClosed(2103, 2133)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                .mapToObj(x -\u003e new Room(100, x))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret.setRooms(roomData);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Optional\u003cReadOnlyBookingBook\u003e bookingBookOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ReadOnlyBookingBook bookingData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ReadOnlyRoomBook roomData \u003d initRooms();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingBookOptional \u003d storage.readBookingBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            if (!bookingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookingBook\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d bookingBookOptional.orElseGet(SampleDataUtil::getSampleBookingBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // read bookingBook data"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingBookOptional \u003d storage.readBookingBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            if (!bookingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookingBook\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d bookingBookOptional.orElseGet(SampleDataUtil::getSampleBookingBook);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookingBook\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d new BookingBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookingBook\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            bookingData \u003d new BookingBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new ModelManager(initialData, userPrefs, roomData, bookingData);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 5,
      "Hazel1603": 16,
      "-": 180,
      "zeling595": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            storage.saveBookingBook(model.getBookingBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckInCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Encapsulates the Check In feature."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class CheckInCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkIn\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks in a person into the hotel.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"Parameters: \" + PREFIX_PERSONAL_ID + \"[PERSONAL_ID] (must be a positive integer) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_ROOM_ID + \"[ROOM_ID] (must be a valid room number) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_START_DATE + \"[START_DATE] (in the format YYYY-MM-DD) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_END_DATE + \"[END_DATE] (in the format YYYY-MM-DD)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PERSONAL_ID + \"69 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_ROOM_ID + \"4102 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_START_DATE + \"2020-09-14 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_END_DATE + \"2020-09-17\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"checkIn command not implemented yet\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Personal id: %1$d, Room Id: %2$d, Start date: %3$s, End date: %4$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final int personalId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final int roomId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Creates a CheckInCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param personalId the personalId of the person checking in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param roomId the roomId of the room that the person is checking into"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param startDate the start date of the booking"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param endDate the end date of the booking"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public CheckInCommand(int personalId, int roomId, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireAllNonNull(personalId, roomId, startDate, endDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.personalId \u003d personalId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, personalId, roomId, startDate, endDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!(other instanceof CheckInCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        CheckInCommand e \u003d (CheckInCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return personalId \u003d\u003d e.personalId"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                \u0026\u0026 roomId \u003d\u003d e.roomId"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                \u0026\u0026 startDate.isEqual(e.startDate)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                \u0026\u0026 endDate.isEqual(e.endDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckOutCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Checks out guest with room id"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class CheckOutCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkOut\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks out person from hotel. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"Parameters: \" + PREFIX_ROOM_ID + \"[ROOM_ID] (must be a valid room number)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_ROOM_ID + \"2100\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully booked out: %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final String MESSAGE_BOOKING_MISSING \u003d \"No valid booking can be found.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final int roomId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Creates a CheckOutCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @param roomId id of room to check out person from"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public CheckOutCommand(int roomId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireAllNonNull(roomId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Booking booking;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            booking \u003d model.getBooking(roomId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        } catch (BookingNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new CommandException(MESSAGE_BOOKING_MISSING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.setBookingInactive(roomId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, booking));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (!(other instanceof CheckOutCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        CheckOutCommand o \u003d (CheckOutCommand) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this.roomId \u003d\u003d o.roomId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Integer id \u003d personToEdit.getId(); // id cannot be modified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, id);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.CheckInCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.CheckOutCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        case CheckInCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return new CheckInCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        case CheckOutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            return new CheckOutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 4,
      "-": 76,
      "iamgenechua": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckInCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.CheckInCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Parses input arguments and creates a new {@code CheckInCommand} object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class CheckInCommandParser implements Parser\u003cCheckInCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code CheckInCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * and returns a {@code CheckInCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public CheckInCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSONAL_ID, PREFIX_ROOM_ID,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSONAL_ID, PREFIX_ROOM_ID, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckInCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int personalId \u003d ParserUtil.parsePersonalId(argMultimap.getValue(PREFIX_PERSONAL_ID).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        int roomId \u003d ParserUtil.parseRoomId(argMultimap.getValue(PREFIX_ROOM_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        LocalDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        if (!startDate.isBefore(endDate)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new ParseException(\"Start Date must be before End Date!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return new CheckInCommand(personalId, roomId, startDate, endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckOutCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.CheckOutCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class CheckOutCommandParser implements Parser\u003cCheckOutCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CheckOutCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * and returns a CheckOutCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public CheckOutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROOM_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_ROOM_ID).isEmpty() || !argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckOutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        int roomId \u003d ParserUtil.parseRoomId(argMultiMap.getValue(PREFIX_ROOM_ID).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new CheckOutCommand(roomId);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Prefix PREFIX_PERSONAL_ID \u003d new Prefix(\"pid/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Prefix PREFIX_ROOM_ID \u003d new Prefix(\"rid/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "iamgenechua": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses a {@code String personal Id} into a {@code int}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param id personal id as entered by user"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @return personal id as an integer"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws ParseException if the given {@code personal Id} is invalid"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static int parsePersonalId(String id) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            int personalId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return personalId;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new ParseException(\"Invalid Personal Id\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses a {@code String personal Id} into a {@code int}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param id room id as entered by user"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @return room id as an integer"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * @throws ParseException if the given {@code room Id} is invalid"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static int parseRoomId(String id) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            int roomId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return roomId;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new ParseException(\"Invalid Room Id\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @param date the date entered by the user"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @return the date as a LocalDate"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            LocalDate newDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            return newDate;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            throw new ParseException(\"Invalid Date\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "-": 124,
      "iamgenechua": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns true if a person with the id is in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return persons.hasPersonWithId(id);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 8,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BookingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.UniqueBookingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class BookingBook implements ReadOnlyBookingBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final UniqueBookingList bookings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookings \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBook() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBook(ReadOnlyBookingBook toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Replaces the contents of the booking list with {@code bookings}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * {@code persons} must not contain duplicate bookings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookings.setBookings(bookings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Resets the existing data of this {@code BookingBook} with {@code newData}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData(ReadOnlyBookingBook newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        setBookings(newData.getBookingList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void addBooking(Booking bookingToAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookings.add(bookingToAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Get an active room."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param roomID"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @return An active room with matching room Id."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking getBooking(int roomID) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return bookings.getBooking(roomID);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookingInactive(int roomID) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookings.setBookingInactive(roomID);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a booking with the same identity as {@code booking} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookings.contains(booking);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if a person with the id is in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookings.hasBookingWithId(id);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                || (other instanceof BookingBook // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 bookings.equals(((BookingBook) other).bookings));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 31,
      "zeling595": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns true if a person with the id is in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    boolean hasPersonWithId(Integer id);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void addRoom(Room r);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void setRooms(List\u003cRoom\u003e rooms);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    void resetData(ReadOnlyRoomBook newData);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void resetData(ReadOnlyBookingBook newData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    boolean hasRoom(int roomId);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    Room getRoom(int roomId);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ReadOnlyRoomBook getRoomBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // booking"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void addBooking(Booking b);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void setBookings(List\u003cBooking\u003e bookings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // boolean hasBooking(int roomId);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    Booking getBooking(int roomId);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    ReadOnlyBookingBook getBookingBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    void setBookingInactive(int roomId);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 5,
      "Hazel1603": 15,
      "-": 87,
      "zeling595": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final RoomBook roomBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final BookingBook bookingBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                        ReadOnlyRoomBook roomBook, ReadOnlyBookingBook bookingBook) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook \u003d new RoomBook(roomBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook \u003d new BookingBook(bookingBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // Initialize the nextAvailableId of Person class so that each new person gets a unique id"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Integer nextAvailableId \u003d this.addressBook.getPersonList().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .mapToInt(Person::getId).max().orElse(0) + 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(nextAvailableId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // Initialize the nextAvailableId of Person class so that each new person gets a unique id"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Integer nextAvailableIdBooking \u003d this.bookingBook.getBookingList().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .mapToInt(Booking::getId).max().orElse(0) + 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking.setNextAvailableId(nextAvailableIdBooking);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new RoomBook(), new BookingBook());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return addressBook.hasPersonWithId(id);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void addRoom(Room r) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook.addRoom(r);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook.setRooms(rooms);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData(ReadOnlyRoomBook newData) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomBook.resetData(newData);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData(ReadOnlyBookingBook newData) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook.resetData(newData);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean hasRoom(int roomId) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.hasRoom(roomId);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room getRoom(int roomId) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook.getRoom(roomId);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ReadOnlyRoomBook getRoomBook() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomBook;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookingBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void addBooking(Booking b) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook.addBooking(b);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook.setBookings(bookings);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking getBooking(int roomId) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return this.bookingBook.getBooking(roomId);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public ReadOnlyBookingBook getBookingBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return this.bookingBook;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookingInactive(int roomId) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook.setBookingInactive(roomId);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 bookingBook.equals(other.bookingBook)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "shermz-lim": 11,
      "Hazel1603": 37,
      "-": 149,
      "zeling595": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBookingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public interface ReadOnlyBookingBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRoomBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public interface ReadOnlyRoomBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns an unmodifiable view of the Room list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * This list will not contain any duplicate rooms."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getBookingBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RoomBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomBook implements ReadOnlyRoomBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final UniqueRoomList rooms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        rooms \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBook() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates an RoomBook using the rooms in the {@code toBeCopied}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBook(ReadOnlyRoomBook tobeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        resetData(tobeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /// list level operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getAvailableRooms(ObservableList\u003cInteger\u003e unavailableRooms) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getComplementRooms(unavailableRooms);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void addRoom(Room r) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        rooms.add(r);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.rooms.setRooms(rooms);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Resets the existing data of this {@code RoomBook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void resetData(ReadOnlyRoomBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        setRooms(newData.getRoomList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /// room level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean hasRoom(int roomId) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.contains(roomId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room getRoom(int roomId) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.getRoom(roomId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /// util methods"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return rooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Path bookingBookFilePath \u003d Paths.get(\"data\" , \"bookingbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        setBookingBookFilePath(newUserPrefs.getBookingBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void setBookingBookFilePath(Path bookingBookFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(bookingBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookingBookFilePath \u003d bookingBookFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 bookingBookFilePath.equals(o.bookingBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, bookingBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        sb.append(\"\\nLocal data file location for addressBook: \" + addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        sb.append(\"\\nLocal data file location for bookingBook: \" + bookingBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 18,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Booking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class Booking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static Integer nextAvailableId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer roomId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final Integer personId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final boolean isActive;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Every field must be present and not null. Used for creating a new Booking with a unique id."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking(Integer roomId, Integer personId, LocalDate startDate, LocalDate endDate, boolean isActive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireAllNonNull(roomId, personId, startDate, endDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.id \u003d nextAvailableId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        nextAvailableId +\u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Every field must be present and not null. Used for creating a Booking with an existing id."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking(Integer roomId, Integer personId, LocalDate startDate, LocalDate endDate, boolean isActive,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                   Integer id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireAllNonNull(roomId, personId, startDate, endDate, id);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets next available id to be used"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static void setNextAvailableId(Integer id) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking.nextAvailableId \u003d id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Integer getRoomId() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return roomId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Integer getPersonId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the number of the nights of a booking."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        long noOfDaysBetween \u003d DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        int duration \u003d (int) noOfDaysBetween;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if two booking conflict with each other."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param otherBooking Another Booking object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @return a boolean."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasConflict(Booking otherBooking) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!otherBooking.getRoomId().equals(getRoomId())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate start \u003d getStartDate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate end \u003d getEndDate();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate otherBookingStart \u003d otherBooking.getStartDate();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        LocalDate otherBookingEnd \u003d otherBooking.getEndDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return otherBookingStart.isBefore(end) \u0026\u0026 otherBookingEnd.isAfter(start);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if both bookings have the same identity and data fields."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!(other instanceof Booking)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking otherBooking \u003d (Booking) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return otherBooking.getId().equals(getId())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getRoomId().equals(getRoomId())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getPersonId().equals(getPersonId())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                \u0026\u0026 otherBooking.isActive() \u003d\u003d isActive();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return Objects.hash(roomId, personId, startDate, endDate, isActive);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        builder.append(\"Id: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" Room Id: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getRoomId())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" Person Id: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getPersonId())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(\" Active: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .append(isActive());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 154,
      "zeling595": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/UniqueBookingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.ConflictingBookingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class UniqueBookingList implements Iterable\u003cBooking\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if the list contains an equivalent booking as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean contains(Booking toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns true if the list contains a booking with the given id"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public boolean hasBookingWithId(Integer id) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return internalList.stream().anyMatch(booking -\u003e booking.getId().equals(id));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Adds a booking to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * The booking must not already exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add(Booking toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // check duplicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new DuplicateBookingException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // check if conflict"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        boolean hasConflict;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        hasConflict \u003d internalList.stream().anyMatch(booking -\u003e booking.hasConflict(toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (hasConflict) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ConflictingBookingException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking getBooking(int roomId) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .filter(booking -\u003e booking.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .filter(Booking::isActive)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .orElseThrow(() -\u003e new BookingNotFoundException());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Set a booking to inactive. Create new booking and set."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @param roomId The id of the room to be set inactive"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookingInactive(int roomId) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking booking \u003d getBooking(roomId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBooking \u003d new Booking(booking.getRoomId(), booking.getPersonId(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                booking.getStartDate(), booking.getEndDate(), false, booking.getId());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        setBooking(booking, editedBooking);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireAllNonNull(target, editedBooking);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!target.equals(editedBooking) \u0026\u0026 contains(editedBooking)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new DuplicateBookingException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        boolean hasConflict;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        hasConflict \u003d internalList.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .filter(booking -\u003e !booking.equals(target))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .anyMatch(booking -\u003e booking.hasConflict(editedBooking));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (hasConflict) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new ConflictingBookingException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        internalList.set(index, editedBooking);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(UniqueBookingList replacement) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Replaces the contents of this list with {@code bookings}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * {@code bookings} must not contain duplicate bookings."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        requireAllNonNull(bookings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (!bookingsAreUnique(bookings)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new DuplicateBookingException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        internalList.setAll(bookings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns true if {@code bookings} contains only unique bookings."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private boolean bookingsAreUnique(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        for (int i \u003d 0; i \u003c bookings.size() - 1; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bookings.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                if (bookings.get(i).equals(bookings.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public ObservableList\u003cBooking\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Iterator\u003cBooking\u003e iterator() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                || (other instanceof UniqueBookingList // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBookingList) other).internalList));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 16,
      "shermz-lim": 1,
      "zeling595": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/exception/BookingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/exception/ConflictingBookingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class ConflictingBookingException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/exception/DuplicateBookingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class DuplicateBookingException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static Integer nextAvailableId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Every field must be present and not null. Used for creating a new Person with a unique id."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d nextAvailableId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        nextAvailableId +\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Every field must be present and not null. Used for creating a Person with existing id."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Integer id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, id);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Sets next available id to be used"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static void setNextAvailableId(Integer id) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.nextAvailableId \u003d id;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 otherPerson.getId().equals(getId());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return otherPerson.getId().equals(getId())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        builder.append(\"Id: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 35,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Returns true if the list contains a person with the given id"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getId().equals(id));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 8,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Price.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Constructs a {@code Price}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param value a valid Price."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Price (int value) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        checkArgument(value \u003e\u003d 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static boolean isValidPrice(int test) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Room.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final int price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final int roomID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room(int price, int roomID) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireAllNonNull(price, roomID);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomID \u003d roomID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public int getRoomID() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.roomID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public int getPrice() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if both rooms have the same price and roomId."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean equals(Room otherRoom) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (otherRoom \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return otherRoom !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 otherRoom.getPrice() \u003d\u003d (getPrice())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u0026\u0026 otherRoom.getRoomID() \u003d\u003d (getRoomID());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"Room{\" + \"price\u003d\" + price + \", roomID\u003d\" + roomID + \u0027}\u0027;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/RoomID.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomID {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"RoomID must be 4 digits long, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{4}\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public final int id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Constructs a {@code RoomID}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param id a valid Room ID that is not longer than 4 digits."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomID(int id) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        checkArgument(isValidRoomID(Integer.toString(id)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if a given string is a valid Room ID."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static boolean isValidRoomID(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomID roomID \u003d (RoomID) o;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return id \u003d\u003d roomID.id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return Objects.hash(id);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return Integer.toString(id);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/UniqueRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class UniqueRoomList implements Iterable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalRoomList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalUnmodifiableRoomList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalRoomList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public boolean contains(int roomId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return internalRoomList.stream().anyMatch(n -\u003e n.getRoomID() \u003d\u003d (roomId));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room getRoom(int roomId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room ret \u003d new Room(-1, -1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int k \u003d 0; k \u003c internalRoomList.size(); k++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            Room curr \u003d internalRoomList.get(k); // get the roomID"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (curr.getRoomID() \u003d\u003d roomId) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                ret \u003d curr;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns an {@code ObservableList} of roomIDs that are not in the input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input {@code ObservableList} of roomIDs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return {@code ObservableList} of rooms"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cInteger\u003e getComplementRooms(ObservableList\u003cInteger\u003e input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e ret \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int k \u003d 0; k \u003c internalRoomList.size(); k++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            int curr \u003d internalRoomList.get(k).getRoomID(); // get the roomID"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (!input.contains(curr)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                ret.add(curr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds a Room to the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void add(Room toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (internalRoomList.contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internalRoomList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        requireAllNonNull(rooms);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (!roomsAreUnique(rooms)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        internalRoomList.setAll(rooms);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return internalUnmodifiableRoomList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Iterator\u003cRoom\u003e iterator() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return internalRoomList.iterator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns true if {@code persons} contains only unique rooms."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                if (rooms.get(i).equals(rooms.get(j))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/DuplicateRoomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class DuplicateRoomException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public DuplicateRoomException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(\"Operation would result in duplicate rooms\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTagSet(\"friends\"), 1),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), 2),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTagSet(\"neighbours\"), 3),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTagSet(\"family\"), 4),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTagSet(\"classmates\"), 5),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                getTagSet(\"colleagues\"), 6)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static Booking[] getSampleBookings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new Booking[] {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            new Booking(1234, 1, LocalDate.of(2020, 1, 1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    LocalDate.of(2020, 1, 2), true, 1),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            new Booking(1235, 2, LocalDate.of(2020, 1, 1),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    LocalDate.of(2020, 1, 3), true, 2),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            new Booking(1236, 3, LocalDate.of(2020, 2, 2),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    LocalDate.of(2020, 2, 22), true, 3),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            new Booking(1237, 4, LocalDate.of(2019, 3, 1),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    LocalDate.of(2020, 3, 12), false, 4),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            new Booking(1238, 5, LocalDate.of(2019, 1, 10),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    LocalDate.of(2020, 1, 13), false, 5),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            new Booking(1235, 6, LocalDate.of(2020, 6, 1),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                    LocalDate.of(2020, 6, 20), false, 6),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static ReadOnlyBookingBook getSampleBookingBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook sampleBb \u003d new BookingBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        for (Booking sampleBooking : getSampleBookings()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            sampleBb.addBooking(sampleBooking);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return sampleBb;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 6,
      "-": 54,
      "zeling595": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BookingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * Represents a storage for {@link seedu.address.model.BookingBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public interface BookingBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getBookingBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns BookingBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see #getBookingBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyBookingBook\u003e readBookingBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Saves the given {@link ReadOnlyBookingBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param bookingBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @see #saveBookingBook(ReadOnlyBookingBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void saveBookingBook(ReadOnlyBookingBook bookingBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBooking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class JsonAdaptedBooking {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer roomId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final Integer personId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final boolean isActive;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Constructs a {@code JsonAdaptedBooking} with the given booking details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public JsonAdaptedBooking(@JsonProperty(\"id\") Integer id,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"roomId\") Integer roomId,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"personId\") Integer personId,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"startDate\") LocalDate startDate,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                              @JsonProperty(\"endDate\") LocalDate endDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                              @JsonProperty(\"isActive\") Boolean isActive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Converts a given {@code Booking} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public JsonAdaptedBooking(Booking source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        roomId \u003d source.getRoomId();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        personId \u003d source.getPersonId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        startDate \u003d source.getStartDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        endDate \u003d source.getEndDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        isActive \u003d source.isActive();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Converts this Jackson-friendly adapted booking object into the model\u0027s {@code Booking} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted booking."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public Booking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final Integer modelId \u003d id;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (roomId \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"roomId\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final Integer modelRoomId \u003d roomId;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"personId\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final Integer modelPersonId \u003d personId;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"startDate\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final LocalDate modelStartDate \u003d startDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"endDate\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final LocalDate modelEndDate \u003d endDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        final boolean modelIsActive \u003d isActive;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return new Booking(modelRoomId, modelPersonId, modelStartDate, modelEndDate, modelIsActive, modelId);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 8,
      "zeling595": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"id\") Integer id,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            @JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        final Integer modelId \u003d id;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelId);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 11,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBookingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * A class to access BookingBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class JsonBookingBookStorage implements BookingBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBookingBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonBookingBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return readBookingBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Similar to {@link #readBookingBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Optional\u003cJsonSerializableBookingBook\u003e jsonBookingBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                filePath, JsonSerializableBookingBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        if (!jsonBookingBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            return Optional.of(jsonBookingBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        saveBookingBook(bookingBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Similar to {@link #saveBookingBook(ReadOnlyBookingBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(bookingBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBookingBook(bookingBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBookingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " * An Immutable BookingBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "@JsonRootName(value \u003d \"bookingBook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "class JsonSerializableBookingBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"Bookings list contains duplicate booking(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private final List\u003cJsonAdaptedBooking\u003e bookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Constructs a {@code JsonSerializableBookingBook} with the given bookings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonSerializableBookingBook(@JsonProperty(\"bookings\") List\u003cJsonAdaptedBooking\u003e bookings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookings.addAll(bookings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Converts a given {@code ReadOnlyBookingBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBookingBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public JsonSerializableBookingBook(ReadOnlyBookingBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookings.addAll(source.getBookingList().stream().map(JsonAdaptedBooking::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Converts this booking book into the model\u0027s {@code BookingBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook bookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        for (JsonAdaptedBooking jsonAdaptedBooking : bookings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            Booking booking \u003d jsonAdaptedBooking.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            if (bookingBook.hasBooking(booking)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOKING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            bookingBook.addBooking(booking);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public interface Storage extends AddressBookStorage, BookingBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Path getBookingBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private BookingBookStorage bookingBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, BookingBookStorage bookingBookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.bookingBookStorage \u003d bookingBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookinggBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Path getBookingBookFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return readBookingBook(bookingBookStorage.getBookingBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Optional\u003cReadOnlyBookingBook\u003e readBookingBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return bookingBookStorage.readBookingBook(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        saveBookingBook(bookingBook, bookingBookStorage.getBookingBookFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void saveBookingBook(ReadOnlyBookingBook bookingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        bookingBookStorage.saveBookingBook(bookingBook, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 34,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        personId.setText(person.getId().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "      \u003cLabel fx:id\u003d\"personId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$pid\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import seedu.address.storage.JsonBookingBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        JsonBookingBookStorage bookingBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new JsonBookingBookStorage(temporaryFolder.resolve(\"bookingBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, bookingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        JsonBookingBookStorage bookingBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new JsonBookingBookStorage(temporaryFolder.resolve(\"bookingBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, bookingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                model.getRoomBook(), model.getBookingBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 2,
      "-": 159,
      "zeling595": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                getTypicalBookingBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().withId(0).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                model.getBookingBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 2,
      "Hazel1603": 1,
      "-": 42,
      "zeling595": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.ReadOnlyBookingBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.ReadOnlyRoomBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        public boolean hasPersonWithId(Integer id) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public void addRoom(Room r) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public void resetData(ReadOnlyRoomBook newData) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void resetData(ReadOnlyBookingBook newData) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public boolean hasRoom(int roomId) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public Room getRoom(int roomId) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        public ReadOnlyRoomBook getRoomBook() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void addBooking(Booking b) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public Booking getBooking(int roomId) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public ReadOnlyBookingBook getBookingBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public void setBookingInactive(int roomId) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 5,
      "Hazel1603": 32,
      "-": 194,
      "zeling595": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CheckInCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CheckInCommand.MESSAGE_ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_ID_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_ID_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for CheckInCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class CheckInCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            getTypicalBookingBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertCommandFailure(new CheckInCommand(VALID_PERSONAL_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                String.format(MESSAGE_ARGUMENTS, VALID_PERSONAL_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        VALID_START_DATE_AMY, VALID_END_DATE_AMY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final CheckInCommand standardCommand \u003d new CheckInCommand(VALID_PERSONAL_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        CheckInCommand commandWithSameValues \u003d new CheckInCommand(VALID_PERSONAL_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different Personal Id -\u003e return false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new CheckInCommand(VALID_PERSONAL_ID_BOB, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different Room Id -\u003e return false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new CheckInCommand(VALID_PERSONAL_ID_AMY, VALID_ROOM_ID_BOB,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_AMY)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different start date -\u003e return false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new CheckInCommand(VALID_PERSONAL_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_BOB, VALID_END_DATE_AMY)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // different end date -\u003e return false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertFalse(standardCommand.equals(new CheckInCommand(VALID_PERSONAL_ID_AMY, VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY, VALID_END_DATE_BOB)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 1,
      "iamgenechua": 71,
      "zeling595": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CheckOutCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_DAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for CheckOutCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "class CheckOutCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            getTypicalRoomBook(), getTypicalBookingBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        model.addBooking(ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Booking booking \u003d model.getBooking(VALID_ROOM_ID_DAN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        CheckOutCommand command \u003d new CheckOutCommand(VALID_ROOM_ID_DAN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(String.format(CheckOutCommand.MESSAGE_SUCCESS, booking),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        int roomId \u003d 2103;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        final CheckOutCommand standardCommand \u003d new CheckOutCommand(roomId);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        CheckOutCommand commandWithSameValues \u003d new CheckOutCommand(roomId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // different Room Id -\u003e return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(standardCommand.equals(new CheckOutCommand(roomId + 1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 52,
      "zeling595": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                getTypicalRoomBook(), getTypicalBookingBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                model.getRoomBook(), model.getBookingBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 1,
      "-": 30,
      "zeling595": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Integer VALID_ID_AMY \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Integer VALID_ID_BOB \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // Check In Values"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_PERSONAL_ID_AMY \u003d 23;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_PERSONAL_ID_BOB \u003d 12;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSONAL_ID_CHLOE \u003d 6;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_PERSONAL_ID_DAN \u003d 4;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_ROOM_ID_AMY \u003d 4102;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final int VALID_ROOM_ID_BOB \u003d 2301;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int CONFLICT_AMY_ROOM_ID_CHLOE \u003d 4102;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_ROOM_ID_DAN \u003d 2302;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int INVALID_ROOM_ID \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_START_DATE_AMY \u003d LocalDate.parse(\"2020-10-05\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_END_DATE_AMY \u003d LocalDate.parse(\"2020-10-10\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final LocalDate VALID_START_DATE_BOB \u003d LocalDate.parse(\"2020-12-12\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final LocalDate VALID_END_DATE_BOB \u003d LocalDate.parse(\"2020-12-12\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate CONFLICT_AMY_START_DATE_CHLOE \u003d LocalDate.parse(\"2020-10-06\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate CONFLICT_AMY_END_DATE_CHLOE \u003d LocalDate.parse(\"2020-10-09\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate VALID_START_DATE_DAN \u003d LocalDate.parse(\"2020-11-11\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate VALID_END_DATE_DAN \u003d LocalDate.parse(\"2020-11-21\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // Booking Values"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final int VALID_BOOKING_ID_AMY \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final int VALID_BOOKING_ID_BOB \u003d 2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int CONFLICT_AMY_VALID_BOOKING_ID_CHLOE \u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final int VALID_BOOKING_ID_DAN \u003d 4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final int BOOKING_DURATION_AMY \u003d 5;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // Check In Descriptions"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String PERSONAL_ID_DESC_AMY \u003d \" \" + PREFIX_PERSONAL_ID + VALID_PERSONAL_ID_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String PERSONAL_ID_DESC_BOB \u003d \" \" + PREFIX_PERSONAL_ID + VALID_PERSONAL_ID_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String ROOM_ID_DESC_AMY \u003d \" \" + PREFIX_ROOM_ID + VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String ROOM_ID_DESC_BOB \u003d \" \" + PREFIX_ROOM_ID + VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String START_DATE_DESC_AMY \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String START_DATE_DESC_BOB \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String END_DATE_DESC_AMY \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String END_DATE_DESC_BOB \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    // Invalid Check In Descriptions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String INVALID_PERSONAL_ID_DESC \u003d PREFIX_PERSONAL_ID + \"a12\"; // letters not allowed in PID"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String INVALID_ROOM_ID_DESC \u003d PREFIX_ROOM_ID + \"88\"; // roomId supposed to be four digits"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public static final String INVALID_ROOM_ID_DESC2 \u003d PREFIX_ROOM_ID + \"419\u0026\"; // \u0027\u0026\u0027 not allowed in roomIds"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int VALID_PRICE \u003d 50;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 6,
      "shermz-lim": 2,
      "Hazel1603": 2,
      "-": 128,
      "iamgenechua": 36,
      "zeling595": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            getTypicalBookingBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                model.getBookingBook());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                model.getBookingBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 1,
      "-": 106,
      "zeling595": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            getTypicalBookingBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs(), model.getRoomBook(), model.getBookingBook());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 5,
      "-": 147,
      "zeling595": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "zeling595": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            getTypicalBookingBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            model.getBookingBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 1,
      "-": 81,
      "zeling595": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalRoomBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                getTypicalBookingBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getRoomBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                model.getBookingBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 1,
      "-": 37,
      "zeling595": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(VALID_ID_AMY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 9,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.CheckInCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.CheckOutCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Integer testId \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person person \u003d new PersonBuilder().withId(testId).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person.setNextAvailableId(testId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parseCommand_checkIn() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int personalId \u003d 123;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final int roomId \u003d 2103;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final String startDate \u003d \"2020-06-22\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        final String endDate \u003d \"2020-11-29\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        CheckInCommand command \u003d (CheckInCommand) parser.parseCommand(CheckInCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_PERSONAL_ID + personalId + \" \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_ROOM_ID + roomId + \" \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_START_DATE + startDate + \" \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "            + PREFIX_END_DATE + endDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertEquals(new CheckInCommand(personalId, roomId,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.parse(startDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                LocalDate.parse(endDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"))),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parseCommand_checkOut() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        final int roomId \u003d 2103;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        CheckOutCommand command \u003d (CheckOutCommand) parser.parseCommand(CheckOutCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            + PREFIX_ROOM_ID + roomId);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertEquals(new CheckOutCommand(roomId), command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 13,
      "-": 100,
      "iamgenechua": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CheckInCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSONAL_ID_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_ID_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_ID_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_ID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_ID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.commands.CheckInCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "public class CheckInCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private CheckInCommandParser parser \u003d new CheckInCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final String nonEmptyPersonalId \u003d \"420\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final String nonEmptyRoomId \u003d \"7200\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final String startDate \u003d \"2020-03-15\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    private final String endDate \u003d \"2020-03-19\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_valuesSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String userInput \u003d PERSONAL_ID_DESC_AMY"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + ROOM_ID_DESC_AMY"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + START_DATE_DESC_AMY"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                + END_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        CheckInCommand expectedCommand \u003d new CheckInCommand(VALID_PERSONAL_ID_AMY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_ROOM_ID_AMY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_START_DATE_AMY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                VALID_END_DATE_AMY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckInCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, CheckInCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no personalId"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, CheckInCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_ROOM_ID + nonEmptyRoomId + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_START_DATE + startDate + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_END_DATE + endDate,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no roomId"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, CheckInCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_PERSONAL_ID + nonEmptyPersonalId + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_START_DATE + startDate + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_END_DATE + endDate,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no startDate"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, CheckInCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_PERSONAL_ID + nonEmptyPersonalId + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_ROOM_ID + nonEmptyRoomId + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_END_DATE + endDate,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        // no endDate"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "        assertParseFailure(parser, CheckInCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_PERSONAL_ID + nonEmptyPersonalId + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_ROOM_ID + nonEmptyRoomId + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                        + PREFIX_START_DATE + startDate,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamgenechua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamgenechua": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CheckOutCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_ID_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.commands.CheckOutCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "public class CheckOutCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private CheckOutCommandParser parser \u003d new CheckOutCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parse_valuesSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String userInput \u003d ROOM_ID_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        CheckOutCommand expectedCommand \u003d new CheckOutCommand(VALID_ROOM_ID_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void parse_missingRoomIdField_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckOutCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BookingBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_ID_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalBookingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class BookingBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final BookingBook bookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(Collections.emptyList(), bookingBook.getBookingList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bookingBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData_withValidReadOnlyBookingBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook newData \u003d getTypicalBookingBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(newData, bookingBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void resetData_withDuplicateBookings_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // Two booking with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withId(VALID_BOOKING_ID_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withPersonId(VALID_PERSONAL_ID_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        List\u003cBooking\u003e newBookings \u003d Arrays.asList(BOOKING_AMY, editedBookingAmy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBookTest.BookingBookStub newData \u003d new BookingBookTest.BookingBookStub(newBookings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e bookingBook.resetData(newData));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bookingBook.hasBooking(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_bookingNotInBookingBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(bookingBook.hasBooking(BOOKING_AMY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_bookingInBookingBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(bookingBook.hasBooking(BOOKING_AMY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void hasBooking_bookingWithSameIdentityFieldsInBookingBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.addBooking(BOOKING_AMY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withId(VALID_BOOKING_ID_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withRoomId(VALID_ROOM_ID_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withPersonId(VALID_PERSONAL_ID_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(VALID_END_DATE_AMY).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(bookingBook.hasBooking(editedBookingAmy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void getBookingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e bookingBook.getBookingList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private static class BookingBookStub implements ReadOnlyBookingBook {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        private final ObservableList\u003cBooking\u003e bookings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBookStub(Collection\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            this.bookings.setAll(bookings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            return bookings;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(new BookingBook(), new BookingBook(modelManager.getBookingBook()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // modifying bookingBooking file path"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void hasPersonWithId_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPersonWithId(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void hasPersonWithId_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertFalse(modelManager.hasPersonWithId(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public void hasPersonWithId_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        modelManager.addPerson(AMY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(modelManager.hasPersonWithId(VALID_ID_AMY));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBook roomBook \u003d new RoomBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook bookingBook \u003d new BookingBookBuilder().withBooking(BOOKING_AMY).withBooking(BOOKING_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        BookingBook differentBookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, roomBook, bookingBook);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, roomBook, bookingBook);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, roomBook, bookingBook)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        // different bookingBook -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, roomBook, differentBookingBook)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, roomBook, bookingBook)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, roomBook, bookingBook)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 18,
      "Hazel1603": 1,
      "-": 127,
      "zeling595": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RoomBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final RoomBook roomBook \u003d new RoomBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertEquals(Collections.emptyList(), roomBook.getRoomList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(roomBook.hasRoom(ROOM_1.getRoomID()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        roomBook.addRoom(ROOM_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(roomBook.hasRoom(ROOM_1.getRoomID()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e roomBook.getRoomList().remove(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/BookingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BOOKING_DURATION_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_ID_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void hasConflict() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // other booking has same startDate, earlier endDate -\u003e return true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking conflictedAmy1 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 11)).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(conflictedAmy1.hasConflict(BOOKING_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // other booking has later startDate, same endDate -\u003e return true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        conflictedAmy1 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "                .withStartDate(LocalDate.of(2020, 10, 3)).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(conflictedAmy1.hasConflict(BOOKING_AMY));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // booking A starts on the day in which Booking B ends"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        conflictedAmy1 \u003d new BookingBuilder(BOOKING_AMY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .withStartDate(VALID_END_DATE_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "                .withEndDate(LocalDate.of(2020, 10, 11)).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(conflictedAmy1.hasConflict(BOOKING_AMY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // booking B starts on the day in which Booking A ends"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.hasConflict(conflictedAmy1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void getDuration() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int duration \u003d BOOKING_AMY.getDuration();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(duration, BOOKING_DURATION_AMY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different value -\u003e return false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        int duration1 \u003d 6;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertNotEquals(duration1, BOOKING_DURATION_AMY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking bookingAmyCopy \u003d new BookingBuilder(BOOKING_AMY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(bookingAmyCopy.equals(BOOKING_AMY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertTrue(BOOKING_AMY.equals(BOOKING_AMY));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different roomId -\u003e return false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withRoomId(VALID_ROOM_ID_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different personId -\u003e return false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withPersonId(VALID_PERSONAL_ID_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different startDate -\u003e return false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withStartDate(VALID_START_DATE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different endDate -\u003e return false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withEndDate(VALID_END_DATE_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        // different isActive -\u003e return false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withIsActive(true).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse((BOOKING_AMY.equals(editedBookingAmy)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        //different Booking Id -\u003e return false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withId(VALID_BOOKING_ID_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        assertFalse(BOOKING_AMY.equals(editedBookingAmy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 76,
      "zeling595": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/UniqueBookingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_ID_DAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.ACTIVE_BOOKING_DAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.BOOKING_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.CONFLICT_AMY_BOOKING_CHLOE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.ConflictingBookingException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.exception.DuplicateBookingException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class UniqueBookingListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private final UniqueBookingList uniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void contains_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.contains(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void contains_bookingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertFalse(uniqueBookingList.contains(BOOKING_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void contains_bookingInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertTrue(uniqueBookingList.contains(BOOKING_BOB));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.add(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add_duplicateBooking_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e uniqueBookingList.add(BOOKING_BOB));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void add_conflictingBooking_throwsConflictingBookingException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(ConflictingBookingException.class, () -\u003e uniqueBookingList.add(CONFLICT_AMY_BOOKING_CHLOE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_nullTargetBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBooking(null, BOOKING_AMY));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_nullEditedBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBooking(BOOKING_AMY, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_targetBookingNotInList_throwsBookingNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(BookingNotFoundException.class, () -\u003e uniqueBookingList.setBooking(BOOKING_AMY, BOOKING_AMY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_editedBookingIsSameBooking_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBooking(BOOKING_AMY, BOOKING_AMY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_editedBookingIsDifferentBooking_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking editedBookingAmy \u003d new BookingBuilder(BOOKING_AMY).withRoomId(VALID_ROOM_ID_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBooking(BOOKING_AMY, editedBookingAmy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(editedBookingAmy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_editedBookingsSameBooking_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e uniqueBookingList.setBooking(BOOKING_AMY, BOOKING_BOB));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBooking_editedBookingConflictWithBooking_throwsConflictBookingException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertThrows(ConflictingBookingException.class, () -\u003e uniqueBookingList.setBooking("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                BOOKING_BOB, CONFLICT_AMY_BOOKING_CHLOE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void getBooking_roomIdExistAndRoomActive() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        Booking expectedBooking \u003d uniqueBookingList.getBooking(VALID_ROOM_ID_DAN);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedBooking, ACTIVE_BOOKING_DAN);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void getBooking_roomIdDoNotExist_throwsBookingNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(BookingNotFoundException.class, () -\u003e uniqueBookingList.getBooking(INVALID_ROOM_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    // no test for setBookingInactive yet, set false anyway"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_nullUniqueBookingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBookings((UniqueBookingList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_uniqueBookingList_replacesOwnListWithProvidedUniqueBookingList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBookings(expectedUniqueBookingList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookingList.setBookings((List\u003cBooking\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.add(BOOKING_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        List\u003cBooking\u003e bookingList \u003d Collections.singletonList(BOOKING_BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        uniqueBookingList.setBookings(bookingList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        UniqueBookingList expectedUniqueBookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        expectedUniqueBookingList.add(BOOKING_BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertEquals(expectedUniqueBookingList, uniqueBookingList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void setBookings_listWithDuplicateBookings_throwsDuplicateBookingException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        List\u003cBooking\u003e listWithDuplicateBookings \u003d Arrays.asList(BOOKING_AMY, BOOKING_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(DuplicateBookingException.class, () -\u003e uniqueBookingList.setBookings(listWithDuplicateBookings));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            -\u003e uniqueBookingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 9,
      "zeling595": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        // same id -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        assertTrue(BOB.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 4,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/PriceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int invalidPrice \u003d -15;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //invalid price"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(Price.isValidPrice(-15)); // negative price"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //valid price"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(Price.isValidPrice(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(Price.isValidPrice(70));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(Price.isValidPrice(1000));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int invalidRoomId \u003d 123;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RoomID(invalidRoomId));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void isValidRoomID() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //invalid Room ID"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(RoomID.isValidRoomID(\"1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(RoomID.isValidRoomID(\"-123\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(RoomID.isValidRoomID(\"98765\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //valid Room ID"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(RoomID.isValidRoomID(\"1234\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(RoomID.isValidRoomID(\"0987\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.DEFAULT_ROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void isSameRoom() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(DEFAULT_ROOM.equals(DEFAULT_ROOM));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(DEFAULT_ROOM.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different roomID and price -\u003e return false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room editedRoom1 \u003d new RoomBuilder(ROOM_1).withRoomID(ROOM_2.getRoomID()).withPrice(ROOM_3.getPrice()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(ROOM_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different roomID only -\u003e return false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(ROOM_1).withRoomID(ROOM_2.getRoomID()).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(ROOM_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different price only -\u003e return false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(ROOM_1).withPrice(200).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(ROOM_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same roomID and price -\u003e return true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(ROOM_2).withRoomID(ROOM_1.getRoomID()).withPrice(ROOM_1.getPrice()).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(ROOM_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room room1Copy \u003d new RoomBuilder(ROOM_1).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(ROOM_1.equals(room1Copy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(ROOM_1.equals(ROOM_1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(ROOM_1.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(ROOM_1.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different room -\u003e return false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse((ROOM_1.equals(ROOM_2)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Room editedRoom1 \u003d new RoomBuilder(ROOM_1).withPrice(200).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(ROOM_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        //different room ID -\u003e return false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        editedRoom1 \u003d new RoomBuilder(ROOM_1).withRoomID(ROOM_2.getRoomID()).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(ROOM_1.equals(editedRoom1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/UniqueRoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.DEFAULT_ROOM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.DEFAULT_ROOMID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_4;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_6;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class UniqueRoomListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private final UniqueRoomList uniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertFalse(uniqueRoomList.contains(DEFAULT_ROOMID));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test public void contains_roomInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.add(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(uniqueRoomList.contains(DEFAULT_ROOMID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.add(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.add(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList.add(DEFAULT_ROOM));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void getComplementRooms_returnsCorrectList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d FXCollections.observableArrayList(ROOM_1, ROOM_2, ROOM_3, ROOM_4, ROOM_5, ROOM_6);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        uniqueRoomList.setRooms(rooms);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cInteger\u003e roomId \u003d FXCollections.observableArrayList(ROOM_1.getRoomID(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                    ROOM_2.getRoomID(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                    ROOM_3.getRoomID(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                    ROOM_4.getRoomID(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                    ROOM_5.getRoomID(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                    ROOM_6.getRoomID());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cInteger\u003e input \u003d FXCollections.observableArrayList(ROOM_1.getRoomID(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                            ROOM_3.getRoomID(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                                                                            ROOM_6.getRoomID());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        List\u003cInteger\u003e output \u003d uniqueRoomList.getComplementRooms(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertTrue(output.contains(ROOM_2.getRoomID())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 output.contains(ROOM_4.getRoomID())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 output.contains(ROOM_5.getRoomID())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 !output.contains(ROOM_1.getRoomID())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 !output.contains(ROOM_3.getRoomID())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            \u0026\u0026 !output.contains(ROOM_6.getRoomID()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            uniqueRoomList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private static final Integer VALID_ID \u003d BENSON.getId();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                        VALID_ID, VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 15,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        JsonBookingBookStorage bookingBookStorage \u003d new JsonBookingBookStorage(getTempFilePath(\"bb\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, bookingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "zeling595": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookingBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeling595"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": "public class BookingBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    private BookingBook bookingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBookBuilder() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook \u003d new BookingBook();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBookBuilder(BookingBook bookingBook) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.bookingBook \u003d bookingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     * Adds a new {@code Booking} to the {@code BookingBook} that we are building."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBookBuilder withBooking(Booking booking) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        bookingBook.addBooking(booking);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBook build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        return bookingBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeling595": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class BookingBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final Integer DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final Integer DEFAULT_ROOM_ID \u003d 1001;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final Integer DEFAULT_PERSON_ID \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final LocalDate DEFAULT_START_DATE \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final LocalDate DEFAULT_END_DATE \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static final boolean DEFAULT_IS_ACTIVE \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Integer roomId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Integer personId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private Boolean isActive;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Creates a {@code BookingBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        roomId \u003d DEFAULT_ROOM_ID;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personId \u003d DEFAULT_PERSON_ID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        startDate \u003d DEFAULT_START_DATE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        endDate \u003d DEFAULT_END_DATE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        isActive \u003d DEFAULT_IS_ACTIVE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Initializes the BookingBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder(Booking bookingToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        id \u003d bookingToCopy.getId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        roomId \u003d bookingToCopy.getRoomId();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        personId \u003d bookingToCopy.getPersonId();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        startDate \u003d bookingToCopy.getStartDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        endDate \u003d bookingToCopy.getEndDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        isActive \u003d bookingToCopy.isActive();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the roomId of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withRoomId(Integer roomId) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code personId} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withPersonId(Integer personId) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code startDate} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public BookingBuilder withStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeling595"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code endDate} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code isActive} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withIsActive(Boolean isActive) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Sets the {@code id} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public BookingBuilder withId(Integer id) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public Booking build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new Booking(roomId, personId, startDate, endDate, isActive, id);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 95,
      "zeling595": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Integer DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        id \u003d personToCopy.getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     * Sets the {@code id} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public PersonBuilder withId(Integer id) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "        return new Person(name, phone, email, address, tags, id);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 13,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * A utility class to help with building Room objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class RoomBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int DEFAULT_ROOMID \u003d 1234;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int DEFAULT_PRICE \u003d 100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private int roomId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private int price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Default Constructor for RoomBuilder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d DEFAULT_PRICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomId \u003d DEFAULT_ROOMID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Constructs a {@code RoomBuilder}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param tobeCopied a valid Room."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder(Room tobeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomId \u003d tobeCopied.getRoomID();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d tobeCopied.getPrice();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Sets RoomBuilder with new RoomID."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param roomId new RoomID"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a {@code RoomBuilder} with modified roomID"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder withRoomID(int roomId) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Sets RoomBuilder with new Price"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param price Price for room"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a {@code RoomBuilder} with modified price"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public RoomBuilder withPrice(int price) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates a Room object from the current fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return {@code Room}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Room build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new Room(this.price, this.roomId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBookings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.BookingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeling595"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "public class TypicalBookings {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate STARTDATE_1 \u003d LocalDate.of(2020, 10, 20);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate ENDDATE_1 \u003d LocalDate.of(2020, 10, 25);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate STARTDATE_2 \u003d LocalDate.of(2020, 10, 23);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate ENDDATE_2 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate STARTDATE_3 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final LocalDate ENDDATE_3 \u003d LocalDate.of(2020, 10, 27);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeling595"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_1 \u003d new Booking(1235, 1, STARTDATE_1, ENDDATE_1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_2 \u003d new Booking(1236, 2, STARTDATE_1, ENDDATE_1,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_3 \u003d new Booking(1237, 3, STARTDATE_2, ENDDATE_2,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_4 \u003d new Booking(1238, 4, STARTDATE_2, ENDDATE_2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_5 \u003d new Booking(1236, 5, STARTDATE_3, ENDDATE_3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_6 \u003d new Booking(1235, 1, STARTDATE_3, ENDDATE_3,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, 6);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_AMY \u003d new Booking(VALID_ROOM_ID_AMY, VALID_PERSONAL_ID_AMY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_START_DATE_AMY, VALID_END_DATE_AMY, false, VALID_BOOKING_ID_AMY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking BOOKING_BOB \u003d new Booking(VALID_ROOM_ID_BOB, VALID_PERSONAL_ID_BOB,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_START_DATE_BOB, VALID_END_DATE_BOB, false, VALID_BOOKING_ID_BOB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking CONFLICT_AMY_BOOKING_CHLOE \u003d new Booking(CONFLICT_AMY_ROOM_ID_CHLOE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_PERSONAL_ID_CHLOE, CONFLICT_AMY_START_DATE_CHLOE, CONFLICT_AMY_END_DATE_CHLOE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            false, CONFLICT_AMY_VALID_BOOKING_ID_CHLOE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeling595"
        },
        "content": "    public static final Booking ACTIVE_BOOKING_DAN \u003d new Booking(VALID_ROOM_ID_DAN, VALID_PERSONAL_ID_DAN,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeling595"
        },
        "content": "            VALID_START_DATE_DAN, VALID_END_DATE_DAN, true, VALID_BOOKING_ID_DAN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    private TypicalBookings() {} // prevents instantiation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static BookingBook getTypicalBookingBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        BookingBook ab \u003d new BookingBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        for (Booking r : getTypicalBookings()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "            ab.addBooking(r);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    public static List\u003cBooking\u003e getTypicalBookings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BOOKING_1, BOOKING_2, BOOKING_3, BOOKING_4, BOOKING_5, BOOKING_6));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SherryWu178"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SherryWu178": 32,
      "zeling595": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(1).withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(2).withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(3).withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(4).withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(5).withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(6).withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(7).withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(8).withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(9).withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(VALID_ID_AMY).withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shermz-lim"
        },
        "content": "            .withId(VALID_ID_BOB).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shermz-lim": 24,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRooms.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.RoomBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class TypicalRooms {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room DEFAULT_ROOM \u003d new Room(100, 1234);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final int DEFAULT_ROOMID \u003d 1234;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room ROOM_1 \u003d new Room(100, 1235);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room ROOM_2 \u003d new Room(100, 1236);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room ROOM_3 \u003d new Room(100, 1237);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room ROOM_4 \u003d new Room(100, 1238);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room ROOM_5 \u003d new Room(100, 1239);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static final Room ROOM_6 \u003d new Room(100, 1240);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static RoomBook getTypicalRoomBook() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        RoomBook ab \u003d new RoomBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (Room r : getTypicalRooms()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ab.addRoom(r);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static List\u003cRoom\u003e getTypicalRooms() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ROOM_1, ROOM_2, ROOM_3, ROOM_4, ROOM_5, ROOM_6));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 37
    }
  }
]
