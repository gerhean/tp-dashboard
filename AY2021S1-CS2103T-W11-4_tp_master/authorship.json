[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W11-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W11-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "# CliniCal - Clinic Calendar"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* CliniCal(Clinic Calendar) is a **desktop app that allows doctors to manage patient records and schedule upcoming appointments**."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* CliniCal comes with a built-in calendar function to allow doctors to track their schedule and record appointments."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* For the detailed documentation of this project, see the [CliniCal Product Website](https://ay2021s1-cs2103t-w11-4.github.io/tp/)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "# Site Map"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* [User Guide](https://github.com/AY2021S1-CS2103T-W11-4/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* [Developer Guide](https://github.com/AY2021S1-CS2103T-W11-4/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* [About Us](https://github.com/AY2021S1-CS2103T-W11-4/tp/blob/master/docs/AboutUs.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "# Acknowledgements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "Michaeliaaa": 7,
      "-": 4,
      "gsmoon97": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation(\"commons-io:commons-io:2.8.0\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation \u0027org.jfxtras:jfxtras-agenda:10.0-r1\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation \u0027org.jfxtras:jfxtras-icalendarfx:10.0-r1\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation \u0027org.jfxtras:jfxtras-icalendaragenda:10.0-r1\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    archiveName \u003d \u0027clinical.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "run {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 10,
      "afroneth": 1,
      "-": 70
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/suppressions_1_2.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"MissingJavadocMethodCheck\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "  \u003csuppress checks\u003d\"[a-zA-Z0-9]*\" files\u003d\"CustomEightDaySkin.java\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "-": 10
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "### Michaelia Tan Tong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cimg src\u003d\"images/michaeliaaa.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[github](https://github.com/michaeliaaa)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[portfolio](team/Michaeliaaa.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Responsibilities: Scheduling and tracking"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "### Eugene Chua"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cimg src\u003d\"images/eugene3231.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[github](https://github.com/eugene3231)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[portfolio](team/eugene3231.png.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "### Taekwon Kim"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cimg src\u003d\"images/ktaekwon000.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[github](https://github.com/ktaekwon000)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[portfolio](team/ktaekwon000.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "### Geon Sik Moon"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cimg src\u003d\"images/gsmoon97.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[github](https://github.com/gsmoon97)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[portfolio](team/gsmoon97.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "### Kenneth Ng"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cimg src\u003d\"images/afroneth.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[github](https://github.com/afroneth)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "[[portfolio](team/afroneth.md)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Responsibilities: Dev Ops"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "gsmoon97": 26
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103T-W11-4/tp/blob/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "-": 66
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "## **1. Introduction**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "### 1.1 Purpose"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "This document details the architecture and software design of the software application CliniCal, which is implemented as part of our CS2103T project. This document is updated when the design and implementation of the software is modified after every milestone. Each milestone will include a version of this document, and the current milestone of this project is `v1.3`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "### 1.2 Audience"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "The Developer Guide is for those who are interested in understanding the architecture and software design of CliniCal. Specifically, this guide has been written with the current and future CliniCal developers in mind, as this document details the knowledge necessary to modify the codebase to customize for specific operating needs or extend existing functionalities."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "### 1.3 Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "The code of CliniCal is open sourced and published for free on a git repository hosted on GitHub. Developers who wish to download the code and/or set up an environment to contribute code should refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **2. Design**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 2.1 Architecture"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 1. Architecture Diagram\u003c/em\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* At App launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "[**`Commons`**](#26-common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "The rest of the App consists of four components:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. [**`UI`**](#22-ui-component): The UI of the App."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "2. [**`Logic`**](#23-logic-component): The command executor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "3. [**`Model`**](#24-model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "4. [**`Storage`**](#25-storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/LogicClassDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 2. Class Diagram of Logic Component\u003c/em\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 3. Execution diagram for \"delete 1\" command\u003c/em\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 2.2 UI component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UiClassDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 4. Structure of the UI Component\u003c/em\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PatientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 2.3 Logic component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/LogicClassDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 5. Structure of the Logic Component\u003c/em\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "`Logic` uses the `CliniCalParser` class to parse the user command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "The command execution can affect the `Model` (e.g. adding a patient)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/DeleteSequenceDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 6. Logic Component Interactions for \"delete 1\" Command\u003c/em\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 2.4 Model component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/ModelClassDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 7. Structure of the Model Component\u003c/em\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* stores the CliniCal application data."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPatient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv align\u003d\"center\" markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has an `Allergy` list in the `CliniCal` application, which `Patient` references. This allows `CliniCal` to only require one `Allergy` object per unique `Allergy`, instead of each `Patient` needing their own `Allergy` object."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/BetterModelClassDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 8. Alternative structure for Model component\u003c/em\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 2.5 Storage component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/StorageClassDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 9. Structure of the Storage Component \u003c/em\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W11-4/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* can save the patient data in json format and read it back."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 2.6 Common classes"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **3. Implementation**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 3.1 Undo/Redo feature"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 3.1.1 Implementation"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afroneth"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedCliniCal`. It extends `CliniCal` with an undo/redo history, stored internally as an `CliniCalStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `VersionedCliniCal#commit()` — Saves the current CliniCal application state in its history."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `VersionedCliniCal#undo()` — Restores the previous CliniCal application state from its history."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `VersionedCliniCal#redo()` — Restores a previously undone CliniCal application state from its history."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afroneth"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitCliniCal()`, `Model#undoCliniCal()` and `Model#redoCliniCal()` respectively."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedCliniCal` will be initialized with the initial CliniCal application state, and the `currentStatePointer` pointing to that single CliniCal application state."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UndoRedoState0.png\"/\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 10. Initial CliniCalStateList\u003c/em\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th patient in the patient data list. The `delete` command calls `Model#commitCliniCal()`, causing the modified state of the CliniCal application after the `delete 5` command executes to be saved in the `CliniCalStateList`, and the `currentStatePointer` is shifted to the newly inserted CliniCal application state."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UndoRedoState1.png\"/\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 11. CliniCalStateList after \"delete 5\" command\u003c/em\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new patient. The `add` command also calls `Model#commitCliniCal()`, causing another modified CliniCal application state to be saved into the `CliniCalStateList`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UndoRedoState2.png\"/\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 12. CliniCalStateList after \"add n/David\" command\u003c/em\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitCliniCal()`, so the CliniCal application state will not be saved into the `CliniCalStateList`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 4. The user now decides that adding the patient was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoCliniCal()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous CliniCal application state, and restores the CliniCal application to that state."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UndoRedoState3.png\"/\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 13. CliniCalStateList after undo command\u003c/em\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial CliniCal state, then there are no previous CliniCal states to restore. The `undo` command uses `Model#canUndoCliniCal()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UndoSequenceDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 14. Logic and Model Component Interactions for Undo Command\u003c/em\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afroneth"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoCliniCal()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the CliniCal application to that state."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `CliniCalStateList.size() - 1`, pointing to the latest CliniCal application state, then there are no undone CliniCal states to restore. The `redo` command uses `Model#canRedoCliniCal()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the CliniCal application, such as `list`, will usually not call `Model#commitCliniCal()`, `Model#undoCliniCal()` or `Model#redoCliniCal()`. Thus, the `CliniCalStateList` remains unchanged."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UndoRedoState4.png\"/\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 15. CliniCalStateList after list command\u003c/em\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitCliniCal()`. Since the `currentStatePointer` is not pointing at the end of the `CliniCalStateList`, all CliniCal application states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UndoRedoState5.png\"/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 16. CliniCalStateList after clear command\u003c/em\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/CommitActivityDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 17. Activity Diagram for User Execution of Command\u003c/em\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 3.1.2 Design consideration"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.1.2.1 Aspect: Execution of undo/redo"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Current Implementation:** Saves the entire patient details in CliniCal application."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "       * It is easier to implement as the entire list of patients would be saved. The list of patients can then be"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  easily loaded to be used or saved for future use by `Model`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "       * This may have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Alternative Implementation:** Undo/redo function is handled by each individual command."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "       * The application will use less memory (e.g. for `delete`, just save the patient being deleted)."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "       * The implementation of undo/redo for each specific command must be correct."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.1.2.2 Aspect: Choice of data structure to store CliniCal application states"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * **Current Implementation:** List with `currentStatePointer` pointing to the current CliniCal state."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "         * It is easier to implement as only a single List is required and all states can be accessed."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "         * This requires constant updating of the `CliniCalStateList` such as purging of redundant states."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * **Alternative Implementation:** Two Stacks - CommandsExecutedStack and RedoStack"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "         * The more intuitive solution as a stack follows the Last In First Out principle. There would be no need for"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    any `currentStatePointer` since the current state would be at the top of the stacks."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "         * Harder to implement as two separate stacks would have to be tracked and there would be more dependencies to"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    implement before and after the execution of every command."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### 3.2 Add Profile Picture feature"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "afroneth"
        },
        "content": "#### 3.2.1 Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "afroneth"
        },
        "content": "This feature allows users to add image files to serve as the patient\u0027s profile picture. The mechanism utilises the `StorageManager#addPicture`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "afroneth"
        },
        "content": "method to update the patients\u0027 profile pictures."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "This feature comprises the `AddProfilePictureCommand` class. Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/AddProfilePictureSequenceDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 18. Logic Component Interactions for AddProfilePicture Command\u003c/em\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 1. User input is parsed to obtain the patient index and file path of the desired profile picture."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 2. After successful parsing of user input, the `AddProfilePictureCommand#execute(Model model)` method is called."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 3. The `StorageManager#addPicture` method is then called which adds the desired profile picture to the specified patient."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 4. Next, the patient\u0027s profile picture is updated in the `Model` by calling the `Model#setPatient` method."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Step 5. As a result of the successful update of the patient\u0027s profile picture, a `CommandResult` object is instantiated and returned to `LogicManager`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "afroneth"
        },
        "content": "#### 3.2.2 Design consideration"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.2.2.1 Aspect: Choice of component to save the profile pictures"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Current Implementation:** Save image file through `StorageManager`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "         * Mechanism can be extended from the existing architecture that the project is built upon (AB3)."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * There is a need to implement additional exception handling mechanism to inform the user in cases where invalid file path is provided."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Alternative Implementation:** Save image files through a new standalone class eg. `ImageCommand`. This class handles all mechanism related to profile pictures."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * Exception handling is simplified as informing the user of invalid file path will be similar to when an invalid command is given."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * It is harder to store and update patient\u0027s profile pictures."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * New dependencies need to be created to associate with the newly created `ImageCommand` class."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * Thus, our team decided to implement the first alternative as it follows the existing architecture closely and minimizes the risk of breaking the existing architecture."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.2.2.2 Aspect: Image type"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Current Implementation:** All types of files are accepted, including `.jpg` and `.png`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * User do not need to convert `.jpg` to `.png` file or vice versa before setting desired image file as profile picture."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * This enhances usability."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * Non-image files are still stored in \u0027data\u0027 folder even though the patient\u0027s profile picture in CliniCal will not be updated visually."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Alternative Implementation:** Accept only some types of files i.e `.jpg` and `.png`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * Acts as a form of validation check and non-image files will not be stored in the \u0027data\u0027 folder. This helps to save disk space."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * User is only limited to certain types of image files."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * As such, our team decided to implement the first alternative as this design maximizes application usability."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * User will not need to spend additional time converting their images into accepted file types."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        * Furthermore, our team assessed that users can easily delete non-image files from the \u0027data\u0027 folder if the need arises."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "### 3.3 View Command History feature"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "#### 3.3.1 Implementation"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "This feature allows users to view history of recently used commands."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "All entered user inputs (including those in format format or fails to execute) will be stored into a Stack data structure named `commandHistory`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "due to its Last In First Out (LIFO) property which allows the most recently used command to display first."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "The mechanism utilises the `CommandHistory#getCommandHistory()` to retrieve a list of past used commands from `commandHistory`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "This feature comprises the `HistoryCommand` and `CommandHistory` classes. Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/HistorySequenceDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 19. Logic Component Interactions for History Command\u003c/em\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 1. User inputs \"history\" to execute the history command."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 2. After successful parsing of user input, the `HistoryCommand#execute(Model model)` method is called."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 3. The `CommandHistory#getCommandHistory()` is then called which will return a list of past used commands arranged in the ascending order of time last used."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 4. As a result of successful retrieval of the command history, a `CommandResult` object is instantiated and returned to `LogicManager`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "#### 3.3.2 Design Considerations"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.3.2.1 Aspect: Choice of data structure to store commands"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Current Implementation:** Use of stack ADT"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "   * Pros:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "       * Most recently used command will show up at the top of the list. Also known as Last In First Out (LIFO) method."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "       * Data stored in stack is not persistent."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.3.2.2 Aspect: How commands are stored"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Current Implementation:** Store all entered commands"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "   * Pros:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "       * It is easy to implement."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "       * The user can check what went wrong with the previous command."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "       * The application will need more memory to store both valid and invalid commands."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Alternative Implementation:** Store only commands that are successfully executed"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "   * Pros:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "       * User do not need to view invalid commands."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "       * User cannot check what went wrong with the previous command."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "### 3.4 Clear Command History feature"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "#### 3.4.1 Implementation"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "This feature allows users to clear history of recently used commands."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "The mechanism utilises the `CommandHistory#clearHistory` to clear all stored commands from `commandHistory`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "This feature comprises the `ClearHistoryCommand` and `CommandHistory` classes. Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/ClearHistorySequenceDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 20. Logic Component Interactions for ClearHistory Command\u003c/em\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 1. User inputs \"clearhistory\" to execute the clear history command."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 2. After successful parsing of user input, the `ClearHistoryCommand#execute(Model model)` method is called."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 3. The `CommandHistory#clearHistory` is then called which will clear all commands stored in `commandHistory`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "#### 3.4.2 Design Considerations"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.4.2.1 Aspect: Choice of Data Structure to clear commands"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Current Implementation:** Use of stack ADT"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * Easy to implement clear function."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * Command history is not persistent so recently used commands is only kept during the same usage."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 3.5 Retrieve and reuse past commands using arrow keys feature"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "#### 3.5.1 Implementation"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "This feature allows users to navigate and reuse past commands using up and down arrow keys."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "The mechanism utilises the `CommandHistory#peekNext()` and `CommandHistory#peekPrev()`. Given below is an example usage scenario and how the up/down arrow key mechanism behaves at each step."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 1. The user launches the application for the first time. The `CommandHistory` will be initialised with the initial state, and the currentStatePointer pointing to that single state."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UpDownArrowKeyState0.png\" width\u003d\"350\"/\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 21. Initial CommandHistory\u003c/em\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th patient in the patient data list."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "The Logic Manager calls `CommandHistory#addUsedCommand()` to add a new command to the stack named `commandHistory`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UpDownArrowKeyState1.png\" width\u003d\"350\"/\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 22. CommandHistory after \"delete 5\" command\u003c/em\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 3. The user now decides to reuse `delete 5` in the command history and press the up arrow key (↑)."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "The actionListener of the TextField will detect the up arrow key being pressed and calls `CommandHistory#peekNext()`."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "This will shift the currentStatePointer to the right, pointing to the `delete 5` command and returns it."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UpDownArrowKeyState2.png\" width\u003d\"350\"/\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 23. CommandHistory after pressing up arrow\u003c/em\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 4. The user now decides not to reuse `delete 5` and go back to the previous command before `delete 5`, i.e. empty."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "The user will now press the down arrow key (↓) and the actionListener of the TextField will detect the down arrow key being pressed and calls `CommandHistory#peekPrev()`."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "This will shift the currentStatePointer to the left, pointing to the initial state that is empty and returns it."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UpDownArrowKeyState3.png\" width\u003d\"350\"/\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 24. CommandHistory after pressing down arrow\u003c/em\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "The following sequence diagram shows how the up down arrow key mechanism works:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cimg src\u003d\"images/UpDownArrowKeySequenceDiagram.png\" width\u003d\"400\"/\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \u003cem style\u003d\"color:#CC5500\"\u003eFigure 25. Ui Component Interactions for Peeking Commands\u003c/em\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "#### 3.5.2 Design Considerations"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "##### 3.5.2.1 Aspect: How commands are stored"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* **Current Implementation:** Peek through all entered commands (including those in wrong format or fails to execute)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * Users can edit invalid commands."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * Users can reuse the same command without typing it all out again."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * Only works if the past commands are previously used during the same usage session."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * **Alternative Implementation:** Peek through commands that can be successfully executed"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * All past commands reused are valid and can be reused safely."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * Users require less time to peek through all commands stored in commandHistory as it does not include invalid commands."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        * Users cannot edit invalid commands and will need to spend more time to retype the valid command."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **4. Documentation**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "afroneth"
        },
        "content": "This section highlights the documentation outline used for this software project."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Refer to the guide: [_Documentation Guide_](Documentation.md)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **5. Testing**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "afroneth"
        },
        "content": "This section highlights the kind of test cases that are included in CliniCal\u0027s codebase. It also shows"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "afroneth"
        },
        "content": "how these test cases can be run on IntelliJ."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Refer to the guide: [_Testing guide_](Testing.md)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **6. Logging**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "afroneth"
        },
        "content": "This section highlights the method of logging used in CliniCal\u0027s codebase."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Refer to the guide: [_Logging guide_](Logging.md)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **7. Configuration**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "afroneth"
        },
        "content": "This section highlights how certain properties of CliniCal can be controlled via the configuration file."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Refer to the guide: [_Configuration guide_](Configuration.md)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **8. Dev-ops**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "afroneth"
        },
        "content": "This section highlights the tools used to build and release updated versions of CliniCal."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Refer to the guide: [_DevOps guide_](DevOps.md)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **Appendix A: Product scope**"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* has a need to manage a significant number of patient records"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* prefer to access patient records electronically"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* prefer to check schedule on desktop application instead of relying on physical calendar"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Value proposition**: provide a platform for doctors to manage their upcoming appointments and access patient\u0027s medical records more easily"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **Appendix B: User stories**"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​  | I want to …​                                                  | So that I can…​                                                                  |"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| -------- | ------------| ---------------------------------------------------------------- | ----------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user    | see usage instructions                                           | refer to instructions when I forget how to use the App                              |"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `* * *`  | user        | add a new patient                                                |                                                                                     |"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `* * *`  | user        | delete a patient                                                 | remove entries that I no longer need                                                |"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "| `* * *`  | user        | find a patient by name                                           | locate details of patients without having to go through the entire list             |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "| `* *`    | user        | hide private contact details                                     | minimize chance of someone else seeing them by accident                             |"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `* * *`  | doctor      | retrieve the medical details/notes for each patient easily       | refer to it when the patient visits again                                           |"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `* * *`  | doctor      | type/store my patients\u0027 data on their individual profile pages   | update their condition after each appointment and not write everything down by hand |"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `* *`    | doctor      | have an undo command                                             | undo any mistakes I make in the software                                            |"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `* *`    | doctor      | have a redo command                                              | redo any work that I\u0027ve undone                                                      |"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `*`      | doctor      | retrieve past commands that I input in the application           | refer to my past commands                                                           |"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `*`      | doctor      | add profile picture to each patient\u0027s profile                    | can recognize the patient using the profile picture                                 |"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `*`      | doctor      | color code patients                                              | know which patients are more at risk (e.g. high blood pressure)                     |"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **Appendix C: Use Cases**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "(For all use cases below, the **System** is the `CliniCal` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC01 - Delete a patient"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1.  User requests to list patients"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "2.  CliniCal shows a list of patients"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "3.  User requests to delete a specific patient in the list"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "4.  CliniCal deletes the patient"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * 3a1. CliniCal shows an error message."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC02 - Add a patient"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1.  User keys in command to add a patient"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "2.  CliniCal shows an updated list of patients"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* 1a. The given command is invalid."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * 1a1. CliniCal shows an error message."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  Use case resumes at step 1."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC03 - Edit a patient"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1.  User requests to list patients"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "2.  CliniCal shows a list of patients"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "3.  User requests to edit a specific patient in the list, providing the details to edit the patient with"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "4.  CliniCal edits the patient"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "* 3a. The patient cannot be found."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * 3a1. CliniCal shows an error message."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Use case resumes at Step 3."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "* 3b. The patient cannot be found."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * 3b1. CliniCal shows an error message."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Use case resumes at Step 3."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC04 - Add a patient\u0027s profile picture using command line interface"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "afroneth"
        },
        "content": "1.  User keys in command to add profile picture to patient"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "afroneth"
        },
        "content": "2.  CliniCal adds the profile picture to the specified patient"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "afroneth"
        },
        "content": "3.  CliniCal shows an updated list of patients"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* 1a. The given command is invalid."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    * 1a1. CliniCal shows an error message."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC05 - Add a patient\u0027s profile picture using drag and drop"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "afroneth"
        },
        "content": "1.  User selects the desired profile picture and drags it onto the specified patient profile in CliniCal."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "afroneth"
        },
        "content": "2.  User releases mouse button."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "afroneth"
        },
        "content": "3.  CliniCal adds the profile picture to the specified patient."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "afroneth"
        },
        "content": "4.  CliniCal shows an updated list of patients."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  * 1a. The file being dragged into CliniCal application is not a valid image file."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "afroneth"
        },
        "content": "      * 1a1. Patient profile picture is not updated."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  * 1b. The profile picture is not dragged onto a valid space that represents patient profile in CliniCal."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * 1b1. Patient profile picture is not updated."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC06 - Undo a command"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. User keys in command to undo the previous command."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "2. CliniCal shows the command that has been undone."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  * 1a. There are no more previous commands to undo.\u003cbr\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC07 - Redo a command"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. User keys in command to redo the previous undone command."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "2. CliniCal shows the command that has been redone."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  * 1a. There are no more commands to redo.\u003cbr\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC08 - View command history"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "1. User requests to list command history."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "2. CliniCal shows a list of recently used commands from the command history."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* 2a. The command history is empty.\u003cbr\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### Use case: UC09 - Clear command history"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "1. User requests to clear command history."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "2. CliniCal shows a message that the command history is cleared."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **Appendix D: Non-Functional Requirements**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java `11` installed."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Should be able to schedule up to 100 patient appointments without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **Appendix E: Glossary**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **Patient records**: Extensive collection of patients’ private information (not meant to be shared) and medical histories."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **Main window**: Application’s opening window which displays a command bar and the list of patients."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## **Appendix F: Instructions for manual testing**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### F.1 Launch and shutdown"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "afroneth"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample patient contact details. The window size may not be optimum."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### F.2 Adding a patient"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "1. Adding a new patient to the list"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "   1. Test case: `add n/John Doe p/12345678 ic/s1234567a`\u003cbr\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "      Expected: A patient named John Doe should be added into the list with his phone number and IC number."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "   1. Test case: `add`\u003cbr\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "      Expected: No patient is added. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### F.3 Deleting a patient"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Deleting a patient while all patients are being shown"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "   1. Prerequisites: List all patients using the `list` command. Multiple patients in the list."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "afroneth"
        },
        "content": "      Expected: First patient is deleted from the list. Details of the deleted patient shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "##### F.4 Saving data"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 54,
      "Michaeliaaa": 110,
      "afroneth": 99,
      "eugene3231": 293,
      "-": 249,
      "gsmoon97": 45
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "You will need to fork the repo if you wish to contribute code to the CliniCal project. If you wish to only download the code without writing code, you can skip to the section for cloning the project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "If you wish to fork the repo:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Navigate to the [CliniCal repository on Github](https://github.com/AY2021S1-CS2103T-W11-4/tp)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Click on the \u003cimg src\u003d\"images/forkButton.png\" height\u003d\"40px\"\u003e button on the top-right hand corner of the page to fork the repository to your account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. You should be automatically redirected to the fork on your personal account."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "If you with to clone the repo:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Install Git."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. On your page of your fork (or the [CliniCal repository](https://github.com/AY2021S1-CS2103T-W11-4/tp) if you did not fork the repo), click on the \u003cimg src\u003d\"images/codeButton.png\" height\u003d\"40px\"\u003e and copy the link to the git repo by clicking on \u003cimg src\u003d\"images/copyButton.png\" height\u003d\"70px\"\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Navigate to the folder on your computer that you wish to clone the repo to and run the command `git clone (the link you copied earlier)`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#21-architecture)."
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 13,
      "-": 46
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "title: CliniCal User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "CliniCal(Clinic Calendar) is a **desktop app that allows doctors to manage patient records and schedule upcoming appointments**. With CliniCal, you can enhance your daily workflow through the effective scheduling of medical appointments. You can also have access to a digital database that safely stores all your patient records. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Furthermore, CliniCal is optimized for use via a Command Line Interface (CLI) and even retains the benefits of a Graphical User Interface (GUI). If you can type fast, CliniCal can get your work done faster than traditional GUI apps."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Interested to know more? Take a look at our [**Quick Start**](#3-quick-start) guide. Enjoy!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "## 2. About this document"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Welcome to the CliniCal User Guide!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "If you are new to CliniCal, this quick start guide will get you up and running in no time! It equips you with the basic knowledge you need to use CliniCal properly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 2.1 Formatting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "The CliniCal User Guide contains different formatting used throughout the document which is used to convey different meanings. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "This table below will illustrate what they mean."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| Formatting    | What                            | Meaning   | Example                     |"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| ----------    |-------------------------------------|-----------|--------------------------|"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `add`      | Words in light-blue highlight, also known as a mark-up| A command that can be typed into CliniCal|`help`|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `p/PHONE_NUMBER` | Words in UPPER_CASE | Parameters to be supplied by the user (can be in any order!)|`p/91234567`|"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `n/NAME [s/SEX]` | Words in square brackets| Optional|`n/John Doe` or \u003cbr\u003e `n/John s/M` |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| `[g/ALLERGY]…` | Words with `…` after them| Parameters that can be input multiple times including 0 times|`g/sulfa g/zyrtec` or `g/levocetirizine `|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "| [Blue underline](#2-about-this-document)| Blue words that show underline on mouse-over| A clickable hyperlink, to either an external webpage or other parts of this User Guide|[1. Introduction](#1-introduction)|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  e.g `n/NAME [g/ALLERGY]` can be used as `n/John Doe g/penicillin` or as `n/John Doe`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "  e.g. `[g/ALLERGY]…` can be used as ` ` (i.e. 0 times), `g/penicillin`, `g/sulfa g/aspirin` etc."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## 3. Quick Start"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "You can follow the steps below to get CliniCal up and running:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. Ensure you have Java `11` or above installed on your Computer."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. [Download](https://github.com/AY2021S1-CS2103T-W11-4/tp/releases) the latest `CliniCal.jar`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for CliniCal."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "1. Type the command in the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it. e.g. typing `help` and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "   * `list` : Lists all your patients."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "   * `add``n/John Doe p/98765432 ic/S2561932A a/Pickle street, Block 123, #01-01 e/johnd@example.com` : Adds a patient named `John Doe` to the patient database."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "   * `delete``3` : Deletes the 3rd patient shown in the patient list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "   * `clear` : Deletes all your patients."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "   * `exit` : Exits the app."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. Refer to the [**Features**](#4-features) below for details of each command or refer to the [**Command Summary**](#6-command-summary) to quickly refer to all available commands."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "This section highlights the commands that CliniCal supports. These include details about the format of the command and example scenarios of the command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 4.1 General Commands"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "General commands help enhance your general user experience while using CliniCal."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.1.1 Viewing help: `help`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Access help page by referring to the link provided in the message pop-up."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.1.2 Retrieving past commands: `history`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "View a list of past commands that you had used during the session."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of command history](images/historyExample.png)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.1.3 Clearing command history: `clearhistory`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Clear the command history."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of cleared history](images/clearHistoryExample.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `clearhistory`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * Use with caution, `clearhistory` cannot be undone using `undo`!"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.1.4 Undoing the previous command: `undo`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Revert your previous command which modified the patient database."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "![example of undoing command](images/undoExample.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Only applies for commands that modify the patient database such as `add`, `edit`, `delete`, `clear`,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "`addvisit`, `editvisit`, `deletevisit`, `addappt`, `editappt` and `deleteappt`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Does not support `addpicture`, so remember be careful when using modifying a patient\u0027s profile picture!"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Does not apply for undoable commands such as `find`, `list` and `clearhistory`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* While trying to `edit`, you accidentally deleted Alex Yeoh\u0027s patient details by accident."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Instead of re-entering all the information again, you can easily restore Alex Yeoh\u0027s details by using `undo` on your previous `delete` command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.1.5 Redoing a command: `redo`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Redo the most recent command that you have undone."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "![example redoing command](images/redoExample.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Only able to `redo` commands that have been previously undone such as `add`, `edit`, `delete`, `clear`,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "`addvisit`, `editvisit`, `deletevisit`, `addappt`, `editappt` and `deleteappt`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.1.6 Exiting the program: `exit`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Exit the program."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 4.2 Patient Commands"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Patient commands help you make changes to your database of patients."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.1 Adding a patient: `add`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Add a new patient to the patient database."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of newly added patient](images/addExample.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER ic/NRIC [a/ADDRESS] [e/EMAIL] [s/SEX] [b/BLOOD_TYPE] [ct/COLOR_TAG] [g/ALLERGY]…`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `add n/John Doe p/98765432 ic/S3857462J e/johnd@example.com a/Pickle street, block 123, #01-01` Adds a new patient named \u0027John Doe\u0027 with the respective fields."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `add n/Betsy Crowe ic/G7667353B e/betsycrowe@example.com a/Newgate Prison p/1234567 g/penicillin` Adds a new patient named \u0027Betsy Crowe\u0027 with the respective fields."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTips:\u003c/span\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Note that only Singaporean IC format(@xxxxxxx#) is accepted for NRIC."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* A patient can have any number of allergies (including 0)."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Allergy cannot contain a whitespace and should consist of one single word instead."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* The color tag can be any standard HTML color name, such as \u003cspan style\u003d\"color:red\"\u003ered\u003c/span\u003e, \u003cspan style\u003d\"color:green\"\u003egreen\u003c/span\u003e or \u003cspan style\u003d\"color:orange\"\u003eorange\u003c/span\u003e."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Check out \u003ca href\u003d\"https://www.w3schools.com/colors/colors_names.asp\"\u003ethis link\u003c/a\u003e for an extensive list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**:information_source: Note about color coding patients:**\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * When your patient is tagged with a color tag, the background of the patient will be styled to show that color. The color tags can be used for a variety of purposes."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * For example, you may color code patients at risk of terminal diseases as \u003cspan style\u003d\"color:red\"\u003ered\u003c/span\u003e, for easier reference."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.2 Adding profile picture: `addpicture`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Add a profile picture to your patient’s profile by specifying the filepath to desired profile picture."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of patient with new profile](images/addProfileExample.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `addpicture INDEX f/FILE_PATH`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* All patient profiles are preloaded with a stock profile picture."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Make sure to add the correct profile picture in, `addpicture` cannot be undone using `undo`!"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "*  `addpicture 3 f/data/profile_3.jpg` Replaces existing profile picture with \u0027profile_3.jpg\u0027 found in"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                                                  \u0027data\u0027 folder for the 3rd patient, i.e Carl Kurz"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* You can also add a profile picture using drag and drop with your mouse!"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. Select your desired profile picture and drag it onto the space reserved for patient profile picture in CliniCal."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. Release the mouse button and your patient\u0027s profile picture would be updated with the desired picture."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.3 Editing a patient: `edit`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Edit an existing patient in the patient database."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of edited patient](images/editExample.png)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [ic/NRIC] [a/ADDRESS] [e/EMAIL] [s/SEX] [b/BLOOD_TYPE] [ct/COLOR_TAG] [g/ALLERGY]…`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Edits the patient at the specified `INDEX`. `INDEX` refers to the index number shown in the displayed patient list. The index **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Note that only Singaporean IC format(@xxxxxxx#) is accepted for NRIC."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* When editing allergies (or color tag), the existing allergies (or color tag) of the patient will be removed i.e adding of allergies (or color tag) is not cumulative."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Allergy cannot contain a whitespace and should consist of one single word instead."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* You can remove all the patient’s allergies by typing `g/` without specifying any allergies after it. The same applies for color tags of a patient."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "*  `edit 1 p/11111111 e/pauline@example.com` Edits the phone number and email address of the 1st patient to be `11111111` and `pauline@example.com` respectively."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "*  `edit 2 ct/red` Clears the existing color tag and edits the color tag of the 2nd patient to be \u003cspan style\u003d\"color:red\"\u003ered\u003c/span\u003e."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of color coded patient](images/colorTagExample.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* If you have edited **patient name** or **patient NRIC**, please make sure to update the changes to any relevant appointments, using the `editappt` command.;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.4 Deleting a patient: `delete`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of deleted patient](images/deleteExample.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Delete a specified patient from the patient database."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `INDEX` refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* `INDEX` **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* `list` followed by `delete 9` Deletes the 9th patient (duplicated entry of John Doe) in the patient database."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `find Betsy` followed by `delete 1` Deletes the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Please make sure to delete **any appointments related to the deleted patient**, using the `deleteappt` command.;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.5 Deleting all patients: `clear`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of cleared list](images/clearExample.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Clear all patient entries from the patient database."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Reverse the `clear` command using the `undo` command!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Please make sure to delete **any appointments related to the deleted patient**, using the `deleteappt` command.;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.6 Finding patients: `find`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Find patients whose names or NRIC contain any of the given keywords."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of finding meier](images/findExample.png)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `find KEYWORDS`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* You can search for the patient\u0027s name or NRIC."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* The search is case-insensitive. "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * `benson` will match `Benson`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* The search keyword entered can consist of just one word or even multiple keywords. "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * `Benson` or `Benson Meier` "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Patient will be matched even if the keyword matches the search parameters only partially "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * `Ben` will match `Benson`, `7435696` will match `S7435696B`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* The order of the keywords does not matter. "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * `Meier Benson` will match `Benson Meier`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Patients matching at least one keyword will be returned (i.e. OR search)."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    * `Benson Meier` will return `Benson Yu`, `Andrew Meier`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `find John` Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `find ben` Returns `benjamin`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `find alex david` Returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `find 9123456` Returns the patient with the NRIC `s9123456z`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.7 Listing all patients: `list`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "![example of listing patients](images/listExample.png)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "View a list of all your patients in the patient database."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "You can revert your previous command which modified the patient database."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Useful to view all patients after a `find` command!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.2.8 Viewing patient profile: `profile`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Display the patient\u0027s profile in a separate window."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Format: `profile INDEX`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* Displays the patient\u0027s profile that is specified by `INDEX`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `INDEX` refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* `INDEX` **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Example**: You want to display the profile of the 1st patient on the list."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 1**: Input `profile 1` into the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e on your keyboard."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 2**: A window displaying the patient\u0027s profile will appear. All relevant patient records and visitation logs will be shown."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 3**: To close the patient profile window, you can click on the \u0027Close\u0027 button on the top-right section of the window. Alternatively, you can press"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003ckbd\u003eESC\u003c/kbd\u003e key on your keyboard."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 4.3 Patient Visitation Commands"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Visitation commands help you make changes to the visitation logs specific to a patient. "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "These visitation logs store the following as a short summary of a patient\u0027s visit:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Diagnosis"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Prescription"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Comments"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.3.1 Adding a new visitation log for patient: `addvisit`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Display a new window to add a new visitation log for the specified patient."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Format: `addvisit INDEX [vd/VISIT_DATE]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `INDEX` refers to the patient\u0027s index number as shown in the displayed patient list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `VISIT_DATE` refers to the date of visitation."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    * It follows the format of `dd/MM/yyyy`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    * Do note that for numerical inputs `1-9`, you will need to include an additional `0` in front. For example, enter `05` instead of `5`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `VISIT_DATE`is optional. If no visit date is being specified in the command, then the current date on the local machine will be used to record the patient\u0027s visit."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Example**: You want to add a visitation log to the 1st patient on the list."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 1**: Input `addvisit 1 vd/23/10/2020` into the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 2**: A window displaying the three parameters - Diagnosis, Prescription and Comments will be shown. Type in relevant"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            details in each text box."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 3**: Click on the \u0027Save\u0027 button or press \u003ckbd\u003eCTRL\u003c/kbd\u003e + \u003ckbd\u003eS\u003c/kbd\u003e on your keyboard to save the visitation log."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 4**: The window will close, and a message will be displayed to indicate that the visitation log has been successfully saved."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* Use \u003ckbd\u003eSHIFT\u003c/kbd\u003e + \u003ckbd\u003eTAB\u003c/kbd\u003e and \u003ckbd\u003eCTRL\u003c/kbd\u003e + \u003ckbd\u003eTAB\u003c/kbd\u003e to move to the previous and next text box respectively!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* Do note that after entering relevant details for the Comments text box, your mouse cursor will automatically move to the Save button "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  if you press \u003ckbd\u003eCTRL\u003c/kbd\u003e + \u003ckbd\u003eTAB\u003c/kbd\u003e. At this point, you can simply press \u003ckbd\u003eENTER\u003c/kbd\u003e to save the visitation log."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* You can press \u003ckbd\u003eEsc\u003c/kbd\u003e or the close button at the top right to close the window without saving."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.3.2 Editing patient\u0027s visitation log: `editvisit`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Display a new window to edit the visitation log for a specified patient."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Format: `editvisit INDEX i/VISIT_INDEX`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `INDEX` refers to the patient\u0027s index number as shown in the displayed patient list."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* `VISIT_INDEX` refers to the visitation\u0027s index number as shown in the patient\u0027s profile."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Both indexes **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Example**: You want to edit the 1st visitation log belonging to the 2nd patient on the list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Step 1**: Input `editvisit 2 i/1` into the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 2**: A window displaying the three parameters - Diagnosis, Prescription and Comments will be shown. Type in updated"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            details in each text box."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "afroneth"
        },
        "content": "   * You may press \u003ckbd\u003eCTRL\u003c/kbd\u003e + \u003ckbd\u003eTAB\u003c/kbd\u003e on your keyboard to move to the next text box."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "afroneth"
        },
        "content": "   * You may press \u003ckbd\u003eCTRL\u003c/kbd\u003e + \u003ckbd\u003eSHIFT\u003c/kbd\u003e on your keyboard to move to the previous text box."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 3**: Click on the \u0027Save\u0027 button or press \u003ckbd\u003eCTRL\u003c/kbd\u003e + \u003ckbd\u003eS\u003c/kbd\u003e on your keyboard to save the visitation log."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "afroneth"
        },
        "content": "**Step 4**: The window will close, and a message will be displayed to indicate that the visitation log has been successfully updated."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.3.3 Deleting patient\u0027s visitation log: `deletevisit`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Delete the patient\u0027s visitation log."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Format: `deletevisit INDEX i/VISIT_INDEX`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* `INDEX` refers to the patient\u0027s index number as shown in the displayed patient list."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* `VISIT_INDEX` refers to the visitation\u0027s index number as shown in the patient\u0027s profile."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* Both indexes **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**Example**: You want to delete the 2nd visitation log belonging to the 1st patient on the list."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**Step 1**: Input `deletevisit 1 i/2` into the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**Step 2**: A message will be displayed to indicate that the patient\u0027s second visitation log has been successfully deleted."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 4.4 Patient Appointment Commands"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Patient Appointment commands help you manage your upcoming patient appointments."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.4.1 Adding an appointment: `addappt`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "![example of add appointment](images/addApptExample.png)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Add a new appointment for the specified patient to the appointment database."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Format: `addappt INDEX st/APPOINTMENT_START_TIME d/DURATION`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* `INDEX` refers to the patient\u0027s index number as shown in the displayed patient list in the **Patients** tab."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * It **must be a positive number**, eg. 1, 2, 3, …​"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `APPOINTMENT_START_TIME` refers to the date and starting time of the appointment."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * It follows the format of `dd/MM/yyyy HH:mm`."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * Note that you will need to input the hour (`HH`) in  the 24-hour format."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* `DURATION` refers to the duration of the appointment, in minutes."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Note that only appointments of upcoming dates (including today) will be accepted."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* If you are having trouble converting your time to 24 hour format, check out a time format converter at \u003ca href\u003d\"https://www.timecalculator.net/12-hour-to-24-hour-converter\"\u003ethis link\u003c/a\u003e."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* You can retrieve your desired patient `INDEX` from the **Patients** tab."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Example: You want to add an appointment with the first patient on the list."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Step 1: Input `addappt 6 st/29/12/2020 16:00 d/120` into the command box and press Enter."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Step 2: On the **Overview** tab, you can find your newly added appointment saved inside the appointment list."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 3: If your newly added appointment is happening within a week from today, you can see the appointment being reflected in the calendar on the right of the appointment list."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* You are highly recommended to use a duration of at least 30 minutes to optimise your experience with our CliniCal calendar feature."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.4.2 Editing an appointment: `editappt`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "![example of edit appointment](images/editApptExample.png)"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Edit the specified appointment in the appointment database."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Format: `editappt INDEX [pn/PATIENT_NAME] [pi/PATIENT_IC] [st/APPOINTMENT_START_TIME] [d/DURATION]`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Edits the appointment at the specified `INDEX`. `INDEX` refers to the index number shown in the displayed appointment list. The index **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* `INDEX` refers to the appointment\u0027s index number as shown in the displayed appointment list in the **Overview** tab. "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * It **must be a positive number**, eg. 1, 2, 3, …​"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* `PATIENT_NAME` refers to the name of the patient involved in the appointment as shown in the displayed calendar in the **Overview** tab."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `PATIENT_IC` refers to the NRIC of the patient involved in the appointment as shown in the displayed calendar in the **Overview** tab. "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `APPOINTMENT_START_TIME` refers to the date and starting time of the appointment. "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * It follows the format of `dd/MM/yyyy HH:mm`. "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * Note that you will need to input the hour (`HH`) in  the 24-hour format. "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* `DURATION` refers to the duration of the appointment, in minutes."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Example: You want to reschedule the first appointment in the appointment list."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Step 1: Input `editappt 1 st/29/12/2020 17:00 d/120` into the command box and press Enter."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Step 2: On the **Overview** tab, you can find the newly updated appointment inside the appointment list. "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Step 3: If the newly updated appointment is due within a week from today, you can also see the appointment details inside the calendar."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* If you are having trouble converting your time to 24 hour format, check out the time format converter at \u003ca href\u003d\"https://www.timecalculator.net/12-hour-to-24-hour-converter\"\u003ethis link\u003c/a\u003e."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* You can retrieve your desired appointment `INDEX` from the **Overview** tab."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "* Please make sure to **update the changes to the relevant patient**, using the `edit` command.;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "#### 4.4.3 Deleting an appointment: `deleteappt`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "![example of delete appointment](images/DeleteApptExample.png)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Delete the specified appointment from the appointment database."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Format: `deleteappt INDEX`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* `INDEX` refers to the appointment\u0027s index number as shown in the displayed appointment list in the **Overview** tab."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * It **must be a positive number**, eg. 1, 2, 3, …​"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Example: You want to delete your next upcoming appointment as your patient could not make it for the appointment."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 1: Input `deleteappt 1` and press Enter."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Step 2: The first appointment displayed will be removed from the appointment list immediately. You can also see that the appointment is no longer being displayed on the calendar."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* You can retrieve your desired appointment `INDEX` from the **Overview** tab."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 4.5 Retrieving past commands using arrow keys"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Retrieve and reuse past commands using the \u003ckbd\u003e↑\u003c/kbd\u003e arrow and \u003ckbd\u003e↓\u003c/kbd\u003e arrow keys on the keyboard."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "1. Click on the text field of the command box."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "2. Press the \u003ckbd\u003e↑\u003c/kbd\u003e arrow key to display the most recent past command."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "3. Press the \u003ckbd\u003e↓\u003c/kbd\u003e and \u003ckbd\u003e↑\u003c/kbd\u003e arrow keys to navigate through the list of past commands."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "4. Press \u003ckbd\u003eEnter\u003c/kbd\u003e/\u003ckbd\u003eReturn\u003c/kbd\u003e key to reuse the command."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ":bulb: \u003cspan style\u003d\"font-weight:bold\"\u003eTip: \u003c/span\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* Useful when inputting repeated commands."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "* No need to retype them all over again!"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "### 4.6 Saving the data"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCal data is saved in your hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CliniCal home folder."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "## 6. Command summary"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Add** | `add n/NAME p/PHONE_NUMBER ic/NRIC [a/ADDRESS] [e/EMAIL] [s/SEX] [b/BLOOD_TYPE] [ct/COLOR_TAG] [g/ALLERGY]…​` \u003cbr\u003e e.g. `add n/James Ho p/22224444 ic/S2686887R e/jamesho@example.com a/123, Clementi Rd, 1234665 s/M b/B+ g/sulfa g/aspirin`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Add profile picture** | `addpicture 1 f/data/profile_picture.png`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Add Visit** | `addvisit INDEX [vd/VISIT_DATE]` \u003cbr\u003e e.g. `addvisit 1 vd/06/10/2020`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**Add Appointment** | `addappt INDEX st/APPOINTMENT_START_TIME d/DURATION` \u003cbr\u003e e.g., `addappt 1 st/27/12/2020 14:00 d/60`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**Clear command history** | `clearhistory`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g. `delete 3`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Delete Visit** | `deletevisit INDEX i/VISIT_INDEX` \u003cbr\u003e e.g. `deletevisit 1 i/2`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Delete Appointment** | `deleteappt INDEX` \u003cbr\u003e e.g. `delete 3`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [ic/NRIC] [a/ADDRESS] [e/EMAIL] [s/SEX] [b/BLOOD_TYPE] [ct/COLOR_TAG] [g/ALLERGY]…`\u003cbr\u003e e.g.`edit 2 n/James Lee e/jameslee@example.com `"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "**Edit Appointment** | `editappt INDEX [pn/PATIENT_NAME] [pi/PATIENT_IC] [st/APPOINTMENT_START_TIME] [d/DURATION]` \u003cbr\u003e e.g. `editappt 3 st/12/12/2020 10:10 d/40`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Edit Visit** | `editvisit INDEX i/VISIT_INDEX` \u003cbr\u003e e.g. `editvisit 1 i/2`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g. `find James Jake`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Undo** | `undo`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Redo** | `redo`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "**Retrieve past commands** | `history`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**View patient profile** | `profile INDEX`\u003cbr\u003e e.g. `profile 2`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 6,
      "Michaeliaaa": 78,
      "afroneth": 70,
      "eugene3231": 210,
      "-": 125,
      "gsmoon97": 114
    }
  },
  {
    "path": "docs/diagrams/AddProfilePictureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "skinparam defaultFontSize 25"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "participant \":CliniCalParser\" as CliniCalParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "participant \":AddProfilePictureCommandParser\" as AddProfilePictureCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "participant \"d:AddProfilePictureCommand\" as AddProfilePictureCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "participant \":StorageManager\" as StorageManager LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "[-\u003e LogicManager : execute(\"addpicture 1 f/data/image.png\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "LogicManager -\u003e CliniCalParser : parseCommand(\"addpicture 1 f/data/image.png\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate CliniCalParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "create AddProfilePictureCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "CliniCalParser -\u003e AddProfilePictureCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate AddProfilePictureCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommandParser --\u003e CliniCalParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate AddProfilePictureCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "CliniCalParser -\u003e AddProfilePictureCommandParser : parse(\"1 f/data/image.png\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate AddProfilePictureCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "create AddProfilePictureCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommandParser -\u003e AddProfilePictureCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate AddProfilePictureCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommand --\u003e AddProfilePictureCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate AddProfilePictureCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommandParser --\u003e CliniCalParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate AddProfilePictureCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommandParser -[hidden]-\u003e CliniCalParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "destroy AddProfilePictureCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "CliniCalParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate CliniCalParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "LogicManager -\u003e AddProfilePictureCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate AddProfilePictureCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "create StorageManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommand -\u003e StorageManager : addPicture(name, picture)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate StorageManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "StorageManager --\u003e Model : setPatient()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Model --\u003e StorageManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "StorageManager --\u003e AddProfilePictureCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate StorageManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "CommandResult --\u003e AddProfilePictureCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "AddProfilePictureCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate AddProfilePictureCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "afroneth": 76
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePatient(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveCliniCal(cliniCal)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCal *-right-\u003e \"1\" UniquePatientList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "CliniCal *-right-\u003e \"1\" UniqueAllergyList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "UniqueAllergyList -[hidden]down- UniquePatientList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "UniqueAllergyList -[hidden]down- UniquePatientList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "UniqueAllergyList *-right-\u003e \"*\" Allergy"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "UniquePatientList o-right-\u003e Patient"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient -up-\u003e \"*\" Allergy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Patient *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Patient *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient *--\u003e IcNumber"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 4,
      "-": 10,
      "gsmoon97": 6
    }
  },
  {
    "path": "docs/diagrams/ClearHistorySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":CliniCalParser\" as CliniCalParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \"ch:ClearHistoryCommand\" as ClearHistoryCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":CommandHistory\" as CommandHistory MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "[-\u003e LogicManager : execute(clearhistory)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "LogicManager -\u003e CliniCalParser : parseCommand(clearhistory)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate CliniCalParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "create ClearHistoryCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CliniCalParser -\u003e ClearHistoryCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate ClearHistoryCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "ClearHistoryCommand --\u003e CliniCalParser : ch"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate ClearHistoryCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CliniCalParser --\u003e LogicManager : ch"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate CliniCalParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "LogicManager -\u003e ClearHistoryCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate ClearHistoryCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "ClearHistoryCommand -\u003e CommandHistory : clearHistory()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate ClearHistoryCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "destroy ClearHistoryCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 41
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "if () then ([command commits CliniCal])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    :Save CliniCal to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    CliniCalStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "participant \":CliniCalParser\" as CliniCalParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "LogicManager -\u003e CliniCalParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "activate CliniCalParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCalParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "DeleteCommandParser --\u003e CliniCalParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCalParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "DeleteCommandParser --\u003e CliniCalParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e CliniCalParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCalParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "deactivate CliniCalParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "DeleteCommand -\u003e Model : deletePatient(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/HistorySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":CliniCalParser\" as CliniCalParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \"h:HistoryCommand\" as HistoryCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":CommandHistory\" as CommandHistory MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "[-\u003e LogicManager : execute(history)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "LogicManager -\u003e CliniCalParser : parseCommand(history)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate CliniCalParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "create HistoryCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CliniCalParser -\u003e HistoryCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate HistoryCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "HistoryCommand --\u003e CliniCalParser : h"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate HistoryCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CliniCalParser --\u003e LogicManager : h"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate CliniCalParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "LogicManager -\u003e HistoryCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate HistoryCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "HistoryCommand -\u003e CommandHistory : getCommandHistory()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CommandHistory --\u003e HistoryCommand : result"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "HistoryCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate HistoryCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "destroy HistoryCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 45
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class CliniCalParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "LogicManager --\u003e\"1\" CliniCalParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCalParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Interface ReadOnlyCliniCal \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class CliniCal"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class ReadOnlyCliniCal"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Package Patient {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class Patient"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Class IcNumber"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Class ProfilePicture"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Class Sex"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Class BloodType"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class UniquePatientList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "Class ColorTag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Package Allergy {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Class Allergy"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Package History {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Class CommandHistory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCal .up.|\u003e ReadOnlyCliniCal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "ModelManager o--\u003e \"1\" CliniCal"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "ModelManager o-right-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCal *--\u003e \"1\" UniquePatientList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CliniCal *--\u003e \"1\" CommandHistory"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "UniquePatientList o--\u003e \"*\" Patient"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Patient *--\u003e Name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Patient *--\u003e Phone"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient *--\u003e IcNumber"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Patient *--\u003e Address"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient *--\u003e Email"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient *--\u003e ProfilePicture"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient *--\u003e Sex"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient *--\u003e BloodType"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Patient *--\u003e \"*\" Allergy"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "Patient *--\u003e ColorTag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Phone -[hidden]right-\u003e IcNumber"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "IcNumber -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Email -[hidden]right-\u003e ProfilePicture"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "ProfilePicture -[hidden]right-\u003e Sex"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Sex -[hidden]right-\u003e BloodType"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "Allergy -[hidden]right-\u003e BloodType"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "ModelManager --\u003e\"1\" Patient : filtered list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 2,
      "Michaeliaaa": 4,
      "eugene3231": 14,
      "-": 36,
      "gsmoon97": 23
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Interface CliniCalStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class JsonCliniCalStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "StorageManager o--\u003e CliniCalStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "JsonCliniCalStorage .left.|\u003e CliniCalStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "JsonCliniCalStorage .down.\u003e JsonSerializableCliniCalStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "JsonSerializableCliniCalStorage .right.\u003e JsonSerializablePatient"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "JsonSerializablePatient .right.\u003e JsonAdaptedAllergy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 6,
      "-": 17,
      "gsmoon97": 1
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class PatientListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Class PatientCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "MainWindow *-down-\u003e PatientListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "PatientListPanel -down-\u003e PatientCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "PatientListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "PatientCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "PatientCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "PatientListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State1 as \"__ab0:CliniCal__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State2 as \"__ab1:CliniCal__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State3 as \"__ab2:CliniCal__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State1 as \"__ab0:CliniCal__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State2 as \"__ab1:CliniCal__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State3 as \"__ab2:CliniCal__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State1 as \"__ab0:CliniCal__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State2 as \"__ab1:CliniCal__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State3 as \"__ab2:CliniCal__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State1 as \"__ab0:CliniCal__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State2 as \"__ab1:CliniCal__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State3 as \"__ab2:CliniCal__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State1 as \"__ab0:CliniCal__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State2 as \"__ab1:CliniCal__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State3 as \"__ab2:CliniCal__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State1 as \"__ab0:CliniCal__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State2 as \"__ab1:CliniCal__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    class State3 as \"__ab3:CliniCal__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "participant \":CliniCalParser\" as CliniCalParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "participant \":VersionedCliniCal\" as VersionedCliniCal MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "LogicManager -\u003e CliniCalParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "activate CliniCalParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCalParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "UndoCommand --\u003e CliniCalParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "CliniCalParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "deactivate CliniCalParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "UndoCommand -\u003e Model : undoCliniCal()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Model -\u003e VersionedCliniCal : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "activate VersionedCliniCal"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "VersionedCliniCal -\u003e VersionedCliniCal :resetData(ReadOnlyCliniCal)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "VersionedCliniCal --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "deactivate VersionedCliniCal"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/UpDownArrowKeySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "box CommandBox LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":TextField\" as TextField LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "box CommandHistory MODEL_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "participant \":CommandHistory\" as CommandHistory MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "[-\u003e TextField : onKeyPressed(e)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "alt e is up arrow key"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "TextField -\u003e CommandHistory : peekNext()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CommandHistory --\u003e TextField : command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "TextField -\u003e TextField : setText(command)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "TextField --\u003e TextField"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "else e is down arrow key"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "TextField -\u003e CommandHistory : peekPrev()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CommandHistory --\u003e TextField : command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "TextField -\u003e TextField : setText(command)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "TextField --\u003e TextField"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "[\u003c--TextField"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 48
    }
  },
  {
    "path": "docs/diagrams/UpDownArrowKeyState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package commandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class command as \"__delete 5:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class initState as \"__empty:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "initState -[hidden]right-\u003e command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "hide command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Pointer -up-\u003e initState"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 19
    }
  },
  {
    "path": "docs/diagrams/UpDownArrowKeyState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package commandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class command as \"__delete 5:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class initState as \"__empty:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "initState -[hidden]right-\u003e command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Pointer -up-\u003e initState"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 17
    }
  },
  {
    "path": "docs/diagrams/UpDownArrowKeyState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "title After up arrow key"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package commandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class command as \"__delete 5:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class initState as \"__empty:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "initState -[hidden]right-\u003e command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Pointer -up-\u003e command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 17
    }
  },
  {
    "path": "docs/diagrams/UpDownArrowKeyState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "title After down arrow key"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package commandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class command as \"__delete 5:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class initState as \"__empty:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "initState -[hidden]right-\u003e command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Pointer -up-\u003e initState"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 17
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "Participant \":CliniCalParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "ecp -\u003e ec ++: index, editPatientDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 2,
      "-": 19
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "title: CliniCal"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W11-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W11-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W11-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W11-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "**CliniCal is a desktop application for managing your clinic.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "* If you are interested in using CliniCal, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "* If you are interested about developing CliniCal, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/michaeliaaa.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "title: Michaelia\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "## Project: CliniCal"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "CliniCal is a desktop app that allows doctors to manage patient records and schedule upcoming appointments."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **New Feature**: Add/delete appointment for existing patients"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * What it does: Add and delete appointments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Justification: Allows user to add and delete appointments for existing patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Highlights: The add appointment command is made simple to use as all you need to provide is the patient index, appointment\u0027s start date, time and duration. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  Based on the provided patient index, the command will retrieve the patient\u0027s name and IC. It will also generate the appointment\u0027s end date and time automatically based on the provided duration."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Credits: NIL"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **New Feature**: Added a view command history and clear command history commands that allows the user to view and clear the command history."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * What it does: Show a list of previous commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Justification: Allows user to recall their previous commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Highlights: There is a shortcut which is even better and I am going to mention it below this feature."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Credits: NIL"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **New Feature**: Added a navigation feature that allows the user to view and reuse previous commands using up/down arrow keys."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * What it does: View and reuse previous commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Justification: Allows user to conveniently reuse commonly used previous commands and even check what they input wrongly previously."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Highlights: Highly user-centric and is extremely convenient and common to use. A lot of my peers who tested our application really liked this feature."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Credits: NIL  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **Morphing of AddressBook**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Refactor Person name to Patient. [\\#51](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/51)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmichaeliaaa)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Added documentation for the features `history`, `clearhistory`, `up arrow arrow keys`, `addappt` and `deleteappt`. [\\#59](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/59), [\\#72](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/72), [\\#161](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/161)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Did cosmetic tweaks to existing documentation: [\\#177](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/177)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Added glossary. [\\#38](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/38)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    * Added implementation details and use cases of the `history`, `clearhistory` and `up down arrow keys` features. [\\#100](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/100)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Setup tP Team Organisation and Repo Setup."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#235](https://github.com/AY2021S1-CS2103T-W11-4/tp/pull/235)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Contributed to forum discussions (examples: [3](https://github.com/nus-cs2103-AY2021S1/forum/issues/3), [147](https://github.com/nus-cs2103-AY2021S1/forum/issues/147))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (during Practical Dry Run): [Issues link](https://github.com/Michaeliaaa/ped/issues)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.storage.CliniCalStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.storage.JsonCliniCalStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CliniCal ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCalStorage cliniCalStorage \u003d new JsonCliniCalStorage(userPrefs.getCliniCalFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        storage \u003d new StorageManager(cliniCalStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        storage.initializePlaceholderImage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s CliniCal application"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * The data from the sample CliniCal application will be used instead if {@code storage}\u0027s CliniCal application"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * is not found, or an empty CliniCal application with zero patient data will be used instead if errors occur when"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * reading {@code storage}\u0027s CliniCal application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Optional\u003cReadOnlyCliniCal\u003e cliniCalOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ReadOnlyCliniCal initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            cliniCalOptional \u003d storage.readCliniCal();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (!cliniCalOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CliniCal\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            initialData \u003d cliniCalOptional.orElseGet(SampleDataUtil::getSampleCliniCal);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CliniCal\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            initialData \u003d new CliniCal();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CliniCal\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            initialData \u003d new CliniCal();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CliniCal\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        logger.info(\"Starting CliniCal \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CliniCal ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "afroneth": 6,
      "eugene3231": 1,
      "-": 159,
      "gsmoon97": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // Following settings were tested on a 1366x768 display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1200;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 2,
      "eugene3231": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String LOG_FILE \u003d \"clinical.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_PICTURE_DOES_NOT_EXIST \u003d \"Profile picture cannot be found\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String MESSAGE_PICTURE_HAS_WRONG_EXTENSION \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \"Profile picture should be a file with extension .jpg or .png\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n\\n%1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_UNDONE_REDONE_INPUT \u003d \"%1$s%2$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_START_END \u003d \"Invalid appointment time range.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        + \" Starting time of the appointment should be earlier than ending time.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        \"The appointment index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_INVALID_VISIT_HISTORY_INDEX \u003d \"The visit history index provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_INVALID_VISIT_INDEX \u003d \"The visit index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 2,
      "Michaeliaaa": 2,
      "afroneth": 1,
      "eugene3231": 8,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/PatientProfileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Handles the conversion of {@code Patient} parameters into appropriate strings for display in {@code ProfileWindow}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class PatientProfileUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code Name} object into a {@code String} instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientName Name of patient"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code Name} object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertNameToString(Name patientName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(patientName, \"Patient\u0027s name cannot be null.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientName.fullName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code Allergy} set into a {@code String} instance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param allergiesSet Allergies belonging to the patient"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code Allergy} set"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertAllergiesToString(Set\u003cAllergy\u003e allergiesSet) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(allergiesSet, \"Patient\u0027s allergies set cannot be null.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfSet \u003d allergiesSet.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (sizeOfSet \u003c\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            for (Allergy allergy: allergiesSet) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                stringBuilder.append(allergy.allergyName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                stringBuilder.append(\"; \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code Phone} object into a {@code String} instance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientPhone Phone number of patient"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code Phone} object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertPhoneToString(Phone patientPhone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(patientPhone, \"Patient\u0027s phone cannot be null.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientPhone.value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code Email} object into a {@code String} instance."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientEmail Email of patient"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code Email} object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertEmailToString(Email patientEmail) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(patientEmail, \"Patient\u0027s email cannot be null.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientEmail.value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code Address} object into a {@code String} instance."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientAddress Address of patient"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code Address} object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertAddressToString(Address patientAddress) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(patientAddress, \"Patient\u0027s address cannot be null.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientAddress.value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code IcNumber} object into a {@code String} instance."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param icNumber IC number of patient"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code IcNumber} object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertIcToString(IcNumber icNumber) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(icNumber, \"Patient\u0027s IC number cannot be null.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return icNumber.value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code BloodType} object into a {@code String} instance."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param bloodType Blood type of patient"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code BloodType} object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertBloodTypeToString(BloodType bloodType) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(bloodType, \"Patient\u0027s blood type cannot be null.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return bloodType.type;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts the {@code Sex} object into a {@code String} instance."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param sex Sex of patient"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return a {@code String} object converted from the {@code Sex} object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String convertSexToString(Sex sex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(sex, \"Patient\u0027s sex cannot be null.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return sex.value;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Returns true if the {@code sentence} is a subsequence of the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *   Ignores case, and a full match is not necessary. Partial matching will be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"gh\") \u003d\u003d false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true // Partial matching"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean flagLower;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean flagUpper;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean checkFlag \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        for (String testString: wordsInPreppedSentence) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            // To prepare user input in both lower and upper cases"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String preppedWordLower \u003d preppedWord.toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String preppedWordUpper \u003d preppedWord.toUpperCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            // To prepare clinical data in both lower and upper cases"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String checkingStringLower \u003d testString.toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String checkingStringUpper \u003d testString.toUpperCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            // Return true if user input string matches either partially or fully with patient\u0027s name or IC"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            flagLower \u003d checkingStringLower.contains(preppedWordLower);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            flagUpper \u003d checkingStringUpper.contains(preppedWordUpper);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (flagLower || flagUpper) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                checkFlag \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return checkFlag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 25,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/VEventUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Utility methods for manipulation of Appointment and VEvent objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class VEventUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Maps all appointments in @param appointments to a list of vEvents"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static ArrayList\u003cVEvent\u003e appsToVEventsMapper(List\u003c? extends Appointment\u003e appointments) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ArrayList\u003cVEvent\u003e resultVEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        for (Appointment appointment : appointments) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            resultVEventList.add(appToVEventMapper(appointment));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return resultVEventList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Maps an appointment to vEvent"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static VEvent appToVEventMapper(Appointment appToMap) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VEvent resultVEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        resultVEvent.setSummary(appToMap.getPatientName().fullName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        resultVEvent.setDateTimeStart(appToMap.getStartTime().dateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        resultVEvent.setDateTimeEnd(appToMap.getEndTime().dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        resultVEvent.setUniqueIdentifier();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return resultVEvent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Compares between 2 vEvents to see whether they are the same. Attributes used to determine this include"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * patient name, start, and end time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param vEventOne first event to be compared"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param vEventTwo second event to be compared"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @return true if both vEvents are the same"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static boolean isSameVEvent(VEvent vEventOne, VEvent vEventTwo) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (vEventOne \u003d\u003d vEventTwo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return vEventOne !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 vEventTwo !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 vEventOne.getSummary().equals(vEventTwo.getSummary())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 vEventOne.getDateTimeStart().equals(vEventTwo.getDateTimeStart())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 vEventOne.getDateTimeEnd().equals(vEventTwo.getDateTimeEnd());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 9,
      "gsmoon97": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param command The command as entered by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    CommandResult execute(Command command) throws CommandException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Executes profile picture transfer and returns the result."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patient The patient"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param profilePic The profile picture"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws IllegalValueException If an error occurs during parsing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    CommandResult runImageTransfer(Patient patient, File profilePic) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns the CliniCal."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @see seedu.address.model.Model#getCliniCal()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    ReadOnlyCliniCal getCliniCal();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of patients."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns an unmodifiable view of the list of appointments."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Returns the user prefs\u0027 CliniCal application file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Path getCliniCalFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 7,
      "Michaeliaaa": 2,
      "afroneth": 21,
      "-": 44,
      "gsmoon97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.CliniCalParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final CliniCalParser cliniCalParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        cliniCalParser \u003d new CliniCalParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Command command \u003d cliniCalParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            storage.saveCliniCal(model.getCliniCal());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult execute(Command command) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String commandString \u003d command.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandString + \"]\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            ReadOnlyCliniCal copyOfClinical \u003d model.getCliniCal();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            storage.saveCliniCal(copyOfClinical);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + exception, exception);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult runImageTransfer(Patient patient, File profilePic) throws CommandException,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                                                   IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(profilePic);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert patient !\u003d null || profilePic !\u003d null : \"Patient and profile picture cannot be null\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int patientIndex \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e listOfPatients \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        for (Patient thisPatient: listOfPatients) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Name thisPatientName \u003d thisPatient.getName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Name selectedPatientName \u003d patient.getName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Phone thisPatientPhone \u003d thisPatient.getPhone();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Phone selectedPatientPhone \u003d patient.getPhone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (thisPatientName.equals(selectedPatientName) \u0026\u0026 thisPatientPhone.equals(selectedPatientPhone)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                patientIndex++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String filePath \u003d profilePic.getPath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String commandToRun \u003d \"addpicture \" + patientIndex + \" f/\" + filePath;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandToRun + \"]\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult commandResult \u003d execute(commandToRun);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public ReadOnlyCliniCal getCliniCal() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return model.getCliniCal();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Path getCliniCalFilePath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return model.getCliniCalFilePath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 3,
      "Michaeliaaa": 3,
      "afroneth": 43,
      "eugene3231": 7,
      "-": 72,
      "gsmoon97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLORTAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ICNUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Adds a patient to the CliniCal application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the list of patients.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_ICNUMBER + \"NRIC \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_SEX + \"SEX] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_BLOODTYPE + \"BLOODTYPE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"[\" + PREFIX_ALLERGY + \"ALLERGY] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"[\" + PREFIX_COLORTAG + \"COLOR]\\n\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_ICNUMBER + \"S1234567A \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_SEX + \"M \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_BLOODTYPE + \"A+ \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_ALLERGY + \"penicillin \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_ALLERGY + \"sulfa \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_COLORTAG + \"green\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added:\\n%1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the list of patients.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"Please note that patients with duplicate IC number will not be accepted.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public AddCommand(Patient patient) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, COMMAND_WORD, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 9,
      "afroneth": 1,
      "eugene3231": 4,
      "-": 47,
      "gsmoon97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProfilePictureCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class AddProfilePictureCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpicture\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a profile picture to the patient specified by \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"the index. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"Parameters: INDEX (must be a positive number) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + PREFIX_FILE_PATH + \"File path to the image \\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + PREFIX_FILE_PATH + \"downloads/profile_picture\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_ADD_PROFILE_PICTURE_SUCCESS \u003d \"Profile picture added for %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final File profilePicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Adds a profile picture to the patient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public AddProfilePictureCommand(File profilePicture, Index patientIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(profilePicture);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(patientIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int index \u003d patientIndex.getZeroBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert index \u003e -1 : \"Index cannot be negative\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Name patientNameObject \u003d patientToEdit.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String patientName \u003d patientNameObject.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String filePath \u003d StorageManager.addPicture(patientName, profilePicture);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient patientEdited \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                patientToEdit.getIcNumber(), patientToEdit.getVisitHistory(), patientToEdit.getAddress(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                patientToEdit.getEmail(), profilePicture, patientToEdit.getSex(), patientToEdit.getBloodType(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                patientToEdit.getAllergies(), patientToEdit.getColorTag());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        model.setPatient(patientToEdit, patientEdited);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Name editedPersonNameObject \u003d patientEdited.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String editedPersonName \u003d editedPersonNameObject.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_ADD_PROFILE_PICTURE_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                editedPersonName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 71,
      "eugene3231": 4,
      "gsmoon97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddVisitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Adds a visit record to the visitHistory of a patient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class AddVisitCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addvisit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a visit record to the patient \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"by specifying the patient\u0027s index in the list of patients. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"Parameters: INDEX (must be a positive number) [\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + PREFIX_VISIT_DATE + \"DATE]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"Input DATE as dd/MM/yyyy. Visit date can be any date up till and including today.\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + PREFIX_VISIT_DATE + \"30/10/2020\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_POPUP_PROMPT \u003d \"Please refer to the popup window and enter visitation log.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final String visitDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientIndex Index of the patient"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param visitDate Date of patient visit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public AddVisitCommand(String visitDate, Index patientIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CollectionUtil.requireAllNonNull(patientIndex, visitDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitDate \u003d visitDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(patientIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_POPUP_PROMPT, patientToEdit),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                 visitDate, patientIndex.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!(other instanceof AddVisitCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        AddVisitCommand e \u003d (AddVisitCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientIndex.equals(e.patientIndex) \u0026\u0026 visitDate.equals(e.visitDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 76,
      "eugene3231": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All patient data has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        model.setCliniCal(new CliniCal());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 1,
      "eugene3231": 1,
      "-": 20,
      "gsmoon97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearHistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.history.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Clears command history in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class ClearHistoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearhistory\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your command history has been cleared.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isShowHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /** The application should display patient\u0027s profile. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isDisplayProfile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /** The application should display current visit history. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isDisplayVisitHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /** The application should add a new visit. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isAddVisit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /** The application should edit a specified visit. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isEditVisit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String visitDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Patient patientProfile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ObservableList\u003cVisit\u003e visitHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Visit previousVisit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private int visitIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowHelp, boolean isAddVisit, boolean isDisplayVisitHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                         boolean isEditVisit, boolean isDisplayProfile, boolean isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isShowHelp \u003d isShowHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isAddVisit \u003d isAddVisit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isDisplayVisitHistory \u003d isDisplayVisitHistory;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isEditVisit \u003d isEditVisit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isDisplayProfile \u003d isDisplayProfile;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * All other parameters are set to false for this constructor."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * This constructor is used for adding visits."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult(String feedbackToUser, String visitDate, int patientIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(feedbackToUser, false, true, false, false, false, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitDate \u003d visitDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * This constructor is used for displaying visit history."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult(String feedbackToUser, ObservableList\u003cVisit\u003e visitHistory) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this(feedbackToUser, false, false, true, false,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            false, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitHistory \u003d visitHistory;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * This constructor is used for editing visits."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult(String feedbackToUser, ObservableList\u003cVisit\u003e visitHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                         Visit previousVisit, int visitIndex, int patientIndex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(feedbackToUser, false, false, false, true, false, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitHistory \u003d visitHistory;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.previousVisit \u003d previousVisit;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitIndex \u003d visitIndex;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * This constructor is used for displaying patient profile."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult(String feedbackToUser, ObservableList\u003cVisit\u003e visitHistory, Patient patientProfile) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(feedbackToUser, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitHistory \u003d visitHistory;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientProfile \u003d patientProfile;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isDisplayProfile() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isDisplayProfile;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isAddVisit() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isAddVisit;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isDisplayVisitHistory() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isDisplayVisitHistory;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isEditVisit() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isEditVisit;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Patient getPatientProfile() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientProfile;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public int getPatientIndex() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientIndex;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public int getVisitIndex() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return visitIndex;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String getVisitDate() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return visitDate;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Visit getPreviousVisit() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this.previousVisit;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ObservableList\u003cVisit\u003e getObservableVisitHistory() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this.visitHistory;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 isAddVisit \u003d\u003d otherCommandResult.isAddVisit"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 isEditVisit \u003d\u003d otherCommandResult.isEditVisit"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 isDisplayVisitHistory \u003d\u003d otherCommandResult.isDisplayVisitHistory"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 isDisplayProfile \u003d\u003d otherCommandResult.isDisplayProfile"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isAddVisit, isDisplayProfile, isExit);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 117,
      "eugene3231": 6,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the list of patient in CliniCal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"Parameters: INDEX (must be a positive number)\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted patient:\\n%1$s\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"WARNING : Please make sure to delete any appointments related to the deleted patient, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"using the \u0027deleteappt\u0027 command.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            COMMAND_WORD + \" \", targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 7,
      "afroneth": 1,
      "eugene3231": 3,
      "-": 43,
      "gsmoon97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteVisitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class DeleteVisitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletevisit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        + \": Deletes the visitation log of the patient identified\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        + \" by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        + \"Parameters: \" + \"PATIENT_INDEX \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        + PREFIX_VISIT_INDEX + \"VISIT_INDEX (both must be positive numbers)\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        + PREFIX_VISIT_INDEX + \"2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_DELETE_VISIT_SUCCESS \u003d \"Deleted visitation log for the \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                              + \"following patient: \\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX_PROMPT \u003d \"Please specify index of visitation to be deleted\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        + \"Usage: \" + COMMAND_WORD + \" [PATIENT INDEX] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        + PREFIX_VISIT_INDEX + \"[VISIT INDEX]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int EMPTY_VISIT_LOG \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int visitIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientIndex Patient\u0027s index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param visitIndex Visit\u0027s index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public DeleteVisitCommand(Index patientIndex, int visitIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CollectionUtil.requireAllNonNull(patientIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitIndex \u003d visitIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int listSize \u003d lastShownList.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d listSize) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(patientIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientEdited \u003d patientToEdit;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        VisitHistory visitHistory \u003d patientEdited.getVisitHistory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cVisit\u003e observableHistory \u003d visitHistory.getObservableVisits();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (visitIndex \u003d\u003d EMPTY_VISIT_LOG) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (!observableHistory.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                return new CommandResult(MESSAGE_MISSING_INDEX_PROMPT, observableHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                return new CommandResult(\"\", observableHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                VisitHistory newVisitHistory \u003d VisitHistory.deepCopyVisitHistory(patientToEdit.getVisitHistory());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                patientEdited \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        patientToEdit.getIcNumber(), newVisitHistory.deleteVisit(visitIndex),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        patientToEdit.getAddress(), patientToEdit.getEmail(), patientToEdit.getProfilePicture(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        patientToEdit.getSex(), patientToEdit.getBloodType(), patientToEdit.getAllergies(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        patientToEdit.getColorTag());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                model.setPatient(patientToEdit, patientEdited);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_VISIT_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.updateFilteredPatientList(Model.PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, COMMAND_WORD + \" for the following \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"patient:\\n\", patientEdited));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VISIT_SUCCESS, patientToEdit), observableHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (!(other instanceof DeleteVisitCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        DeleteVisitCommand e \u003d (DeleteVisitCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientIndex.equals(e.patientIndex) \u0026\u0026 visitIndex \u003d\u003d e.visitIndex;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 42,
      "eugene3231": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLORTAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ICNUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Edits the details of an existing patient in the CliniCal application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"by the index number used in the displayed patient list. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"Parameters: INDEX (must be a positive number) \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_ICNUMBER + \"NRIC] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_SEX + \"SEX] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_BLOODTYPE + \"BLOODTYPE] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"[\" + PREFIX_ALLERGY + \"ALLERGY] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"[\" + PREFIX_COLORTAG + \"COLORTAG]\\n\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited patient:\\n%1$s\\n\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"WARNING : If you have edited patient name or patient NRIC, \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"please make sure to update the changes to any relevant appointments, using the \u0027editappt\u0027 command.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the list of patients.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(editPatientDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, COMMAND_WORD, editedPatient));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert patientToEdit !\u003d null : \"Patient cannot be null.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        IcNumber updatedIcNumber \u003d editPatientDescriptor.getIcNumber().orElse(patientToEdit.getIcNumber());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VisitHistory updatedVisitHistory \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            editPatientDescriptor.getVisitHistory().orElse(patientToEdit.getVisitHistory());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Email updatedEmail \u003d editPatientDescriptor.getEmail().orElse(patientToEdit.getEmail());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture updatedProfilePicture \u003d editPatientDescriptor.getProfilePicture()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .orElse(patientToEdit.getProfilePicture());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Sex updatedSex \u003d editPatientDescriptor.getSex().orElse(patientToEdit.getSex());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        BloodType updatedBloodtype \u003d editPatientDescriptor.getBloodType().orElse(patientToEdit.getBloodType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Set\u003cAllergy\u003e updatedAllergies \u003d editPatientDescriptor.getAllergies().orElse(patientToEdit.getAllergies());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ColorTag updatedColorTag \u003d editPatientDescriptor.getColorTag().orElse(patientToEdit.getColorTag());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new Patient(updatedName, updatedPhone, updatedIcNumber, updatedVisitHistory,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                updatedAddress, updatedEmail, updatedProfilePicture,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                updatedSex, updatedBloodtype, updatedAllergies, updatedColorTag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private IcNumber icNumber;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        private VisitHistory visitHistory;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        private ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private Sex sex;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private BloodType bloodType;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        private ColorTag colorTag;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setIcNumber(toCopy.icNumber);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            setVisitHistory(toCopy.visitHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            setProfilePicture(toCopy.profilePicture);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setSex(toCopy.sex);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setBloodType(toCopy.bloodType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setAllergies(toCopy.allergies);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            setColorTag(toCopy.colorTag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, icNumber, address, email, sex, bloodType,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    allergies, colorTag);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setIcNumber(IcNumber icNumber) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.icNumber \u003d icNumber;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public Optional\u003cVisitHistory\u003e getVisitHistory() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return Optional.ofNullable(visitHistory);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public void setVisitHistory(VisitHistory visitHistory) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            this.visitHistory \u003d visitHistory;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cIcNumber\u003e getIcNumber() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(icNumber);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public void setProfilePicture(ProfilePicture profilePicture) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public Optional\u003cProfilePicture\u003e getProfilePicture() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return Optional.ofNullable(profilePicture);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setSex(Sex sex) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.sex \u003d sex;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cSex\u003e getSex() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(sex);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setBloodType(BloodType bloodType) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cBloodType\u003e getBloodType() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(bloodType);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * Sets {@code allergies} to this object\u0027s {@code allergies}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setAllergies(Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code allergies} is null."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        public void setColorTag(ColorTag colorTag) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            this.colorTag \u003d colorTag;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        public Optional\u003cColorTag\u003e getColorTag() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return Optional.ofNullable(colorTag);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getIcNumber().equals(e.getIcNumber())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getProfilePicture().equals(e.getProfilePicture())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getSex().equals(e.getSex())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getBloodType().equals(e.getBloodType())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getAllergies().equals(e.getAllergies())"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    \u0026\u0026 getColorTag().equals(e.getColorTag());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 11,
      "Michaeliaaa": 37,
      "afroneth": 16,
      "eugene3231": 18,
      "-": 159,
      "gsmoon97": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditVisitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Edits record of patient by index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class EditVisitCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editvisit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \": Edits the visitation log of the patient identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"Parameters: \" + \"PATIENT_INDEX \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + PREFIX_VISIT_INDEX + \"VISIT_INDEX (both must be positive numbers)\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + PREFIX_VISIT_INDEX + \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_EDIT_VISIT_PROMPT \u003d \"Please refer to the popup window and edit visitation log.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX_PROMPT \u003d \"Please specify the index of visitation to be edited\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"Usage: \" + COMMAND_WORD + \" [PATIENT INDEX] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + PREFIX_VISIT_INDEX + \"[VISIT INDEX]\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int EMPTY_VISIT_LOG \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int visitIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientIndex Patient\u0027s index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param visitIndex Visit\u0027s index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public EditVisitCommand(Index patientIndex, int visitIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireAllNonNull(patientIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitIndex \u003d visitIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int listSize \u003d lastShownList.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d listSize) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(patientIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VisitHistory visitHistory \u003d patientToEdit.getVisitHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cVisit\u003e observableHistory \u003d visitHistory.getObservableVisits();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (visitIndex \u003d\u003d EMPTY_VISIT_LOG) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return new CommandResult(MESSAGE_MISSING_INDEX_PROMPT, observableHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                Visit visit \u003d visitHistory.getVisitByIndex(visitIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, COMMAND_WORD, patientToEdit));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_EDIT_VISIT_PROMPT, patientToEdit),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    observableHistory, visit, visitIndex, patientIndex.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_VISIT_HISTORY_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!(other instanceof EditVisitCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        EditVisitCommand e \u003d (EditVisitCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientIndex.equals(e.patientIndex)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 visitIndex \u003d\u003d e.visitIndex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 89,
      "eugene3231": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting CliniCal as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, false, false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Finds and lists all patients in CliniCal whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 4,
      "afroneth": 1,
      "eugene3231": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.history.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Lists all past used commands in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_EMPTY_HISTORY \u003d \"There is no command history.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!CommandHistory.hasCommand()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_HISTORY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            CommandResult history \u003d new CommandResult(CommandHistory.getCommandHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Lists all patients in the CliniCal application to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 2,
      "afroneth": 1,
      "-": 20,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Changes the visit history of an existing person in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profile\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the profile of the patient identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            + \"Parameters: INDEX (must be a positive number) \\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_VIEW_PROFILE_SUCCESS \u003d \"Displayed profile of the following patient: \\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientIndex of the person in the last listing whose profile is to be viewed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ProfileCommand(Index patientIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireAllNonNull(patientIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfList \u003d lastShownList.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d sizeOfList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientToDisplay \u003d lastShownList.get(patientIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        VisitHistory visitHistory \u003d patientToDisplay.getVisitHistory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ObservableList\u003cVisit\u003e copyOfObservableHistory \u003d visitHistory.getObservableVisits();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_PROFILE_SUCCESS, patientToDisplay), copyOfObservableHistory,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                 patientToDisplay);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!(other instanceof ProfileCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfileCommand e \u003d (ProfileCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientIndex.equals(e.patientIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 76,
      "eugene3231": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * Redoes the previously undone command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo-ed the command:\\n\\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // Defensive programming"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (!model.canRedoCliniCal()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.redoCliniCal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getRedoCommand()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveVisitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class SaveVisitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_SAVE_VISIT_SUCCESS \u003d \"Successfully saved visit for the \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                            + \"following patient: \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int NEW_VISIT \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Visit visit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String prescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private int visitIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Saves new record to Visit List."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public SaveVisitCommand(int patientIndex, String visitDate, String diagnosis, String prescription,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            String comments, int visitIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CollectionUtil.requireAllNonNull(patientIndex, visitIndex, visitDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d Index.fromOneBased(patientIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visit \u003d new Visit(visitDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.prescription \u003d prescription;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitIndex \u003d visitIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfList \u003d lastShownList.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d sizeOfList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(patientIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Name patientName \u003d patientToEdit.getName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visit.setPatientName(patientName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visit.setParameters(diagnosis, prescription, comments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient patientEdited;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (visitIndex !\u003d NEW_VISIT) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            VisitHistory newVisitHistory \u003d VisitHistory.deepCopyVisitHistory(patientToEdit.getVisitHistory());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            // Edit existing Visit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            patientEdited \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getIcNumber(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    newVisitHistory.editVisit(visitIndex, visit), patientToEdit.getAddress(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    patientToEdit.getEmail(), patientToEdit.getProfilePicture(), patientToEdit.getSex(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    patientToEdit.getBloodType(), patientToEdit.getAllergies(), patientToEdit.getColorTag());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            // Add new Visit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            VisitHistory newVisitHistory \u003d VisitHistory.deepCopyVisitHistory(patientToEdit.getVisitHistory());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            patientEdited \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getIcNumber(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    newVisitHistory.addVisit(visit), patientToEdit.getAddress(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    patientToEdit.getEmail(), patientToEdit.getProfilePicture(), patientToEdit.getSex(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    patientToEdit.getBloodType(), patientToEdit.getAllergies(), patientToEdit.getColorTag());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert patientEdited !\u003d null : \"Patient cannot be null.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        model.setPatient(patientToEdit, patientEdited);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, \"Add/Edit visit for the patient:\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            patientEdited));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SAVE_VISIT_SUCCESS, patientToEdit));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!(other instanceof SaveVisitCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand e \u003d (SaveVisitCommand) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return patientIndex.equals(e.patientIndex)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 diagnosis.equals(e.diagnosis)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 prescription.equals(e.prescription)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 comments.equals(e.comments)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 visit.getVisitDate().equals(e.visit.getVisitDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 99,
      "eugene3231": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * Undoes the previous user command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo-ed the command:\\n\\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // Defensive programming"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (!model.canUndoCliniCal()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.undoCliniCal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getUndoCommand()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/AddAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_STARTTIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class AddAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addappt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds appointment to the appointment list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"PATIENT_INDEX \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_APP_STARTTIME + \"START_TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_APP_DURATION + \"DURATION_IN_MINUTES\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + PREFIX_APP_STARTTIME + \"12/12/2020 10:00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_APP_DURATION + \"15\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New appointment added:\\n%1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONFLICTING_APP \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            \"This appointment clashes with another appointment in your schedule.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private Appointment toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final AppointmentDateTime startTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final AppointmentDateTime endTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public AddAppointmentCommand(Index targetIndex, AppointmentDateTime startTime, AppointmentDateTime endTime) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assert targetIndex !\u003d null : \"targetIndex cannot be null.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assert startTime !\u003d null : \"startTime cannot be null.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assert endTime !\u003d null : \"endTime cannot be null.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public AddAppointmentCommand(Appointment appointment) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        toAdd \u003d appointment;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        startTime \u003d appointment.getStartTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        endTime \u003d appointment.getEndTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        targetIndex \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (targetIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            if (model.hasAppointment(toAdd)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                throw new CommandException(MESSAGE_CONFLICTING_APP);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            model.addAppointment(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            Patient patient \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            Name patientName \u003d patient.getName();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            IcNumber patientIC \u003d patient.getIcNumber();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            toAdd \u003d new Appointment(patientName, patientIC, startTime, endTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (model.hasAppointment(toAdd)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                throw new CommandException(MESSAGE_CONFLICTING_APP);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            model.addAppointment(toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, COMMAND_WORD + \" for \","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                toAdd));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!(other instanceof AddAppointmentCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddAppointmentCommand e \u003d (AddAppointmentCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return toAdd.equals(e.toAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 98,
      "eugene3231": 2,
      "gsmoon97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/DeleteAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class DeleteAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteappt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \": Deletes the appointment identified by the index number used in the displayed appointment list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted appointment:\\n%1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Creates an DeleteAppointmentCommand to delete the specified {@code Appointment}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public DeleteAppointmentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Appointment toDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.deleteAppointment(toDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, COMMAND_WORD + \" for \", toDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 54,
      "eugene3231": 1,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/EditAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_PATIENTIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_PATIENTNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_STARTTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Edits the details of an existing appointment in the CliniCal application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class EditAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editappt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"by the index number used in the displayed appointment list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_APP_PATIENTNAME + \"PATIENT_NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_APP_PATIENTIC + \"PATIENT_IC] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_APP_STARTTIME + \"START_TIME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"[\" + PREFIX_APP_DURATION + \"DURATION_IN_MINUTES]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + PREFIX_APP_STARTTIME + \"23/12/2020 11:00 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + PREFIX_APP_DURATION + \"40\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited appointment:\\n%1$s\\n\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"WARNING : If you have edited patient name or patient NRIC, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"please make sure to update the changes to the relevant patient, using the \u0027edit\u0027 command.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONFLICTING_APPOINTMENT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            \"The new appointment time clashes with another appointment time.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final EditAppointmentDescriptor editAppointmentDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param index of the Appointment in the filtered Appointment list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param editAppointmentDescriptor details to edit the Appointment with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(editAppointmentDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment appointmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // check if the updated appointment clashes with other appointments"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!appointmentToEdit.isSameAppointmentTime(editedAppointment)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            UniqueAppointmentList temp \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            temp.setAppointments(model.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            temp.remove(appointmentToEdit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (temp.clashes(editedAppointment)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                throw new CommandException(MESSAGE_CONFLICTING_APPOINTMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        model.setAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT, COMMAND_WORD + \" for \","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            editedAppointment));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * edited with {@code editAppointmentDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static Appointment createEditedAppointment(Appointment appointmentToEdit, EditAppointmentDescriptor"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editAppointmentDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assert appointmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int oldDuration \u003d appointmentToEdit.getDuration();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Name updatedPatientName \u003d editAppointmentDescriptor.getPatientName().orElse(appointmentToEdit.getPatientName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        IcNumber updatedPatientIc \u003d editAppointmentDescriptor.getPatientIc().orElse(appointmentToEdit.getPatientIc());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        AppointmentDateTime updatedStartTime \u003d appointmentToEdit.getStartTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        AppointmentDateTime updatedEndTime \u003d appointmentToEdit.getEndTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // when start edited, duration not edited"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // update endTime based on updated startTime"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (editAppointmentDescriptor.getStartTime().isPresent()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 !editAppointmentDescriptor.getDuration().isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            updatedStartTime \u003d editAppointmentDescriptor.getStartTime().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            updatedEndTime \u003d new AppointmentDateTime(updatedStartTime.getDateTimeStr(), oldDuration);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // when start not edited, duration edited"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // update endTime based on updated duration"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!editAppointmentDescriptor.getStartTime().isPresent()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 editAppointmentDescriptor.getDuration().isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            updatedEndTime \u003d new AppointmentDateTime(appointmentToEdit.getStartTime().getDateTimeStr(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    editAppointmentDescriptor.getDuration().get());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // when start edited, duration edited"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // update endTime based on updated startTime and duration"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (editAppointmentDescriptor.getStartTime().isPresent()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 editAppointmentDescriptor.getDuration().isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            updatedStartTime \u003d editAppointmentDescriptor.getStartTime().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            updatedEndTime \u003d new AppointmentDateTime(updatedStartTime.getDateTimeStr(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    editAppointmentDescriptor.getDuration().get());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // when start not edited, duration not edited"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // no need to update startTime and endTime"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!editAppointmentDescriptor.getStartTime().isPresent()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 !editAppointmentDescriptor.getDuration().isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (updatedStartTime.compareTo(updatedEndTime) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_START_END);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new Appointment(updatedPatientName, updatedPatientIc, updatedStartTime, updatedEndTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!(other instanceof EditAppointmentCommand)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Stores the details to edit the Appointment with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * corresponding field value of the Appointment."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static class EditAppointmentDescriptor {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private Name patientName;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private IcNumber patientIc;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private AppointmentDateTime startTime;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private Integer duration;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public EditAppointmentDescriptor() {}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setPatientName(toCopy.patientName);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setPatientIc(toCopy.patientIc);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(patientName, patientIc, startTime, duration);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setPatientName(Name patientName) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cName\u003e getPatientName() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(patientName);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setPatientIc(IcNumber patientIc) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.patientIc \u003d patientIc;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cIcNumber\u003e getPatientIc() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(patientIc);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setStartTime(AppointmentDateTime startTime) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cAppointmentDateTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setDuration(Integer duration) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Optional\u003cInteger\u003e getDuration() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (!(other instanceof EditAppointmentDescriptor)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return getPatientName().equals(e.getPatientName())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getPatientIc().equals(e.getPatientIc())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    \u0026\u0026 getDuration().equals(e.getDuration());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 2,
      "eugene3231": 2,
      "gsmoon97": 245
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLORTAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ICNUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ICNUMBER,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_SEX, PREFIX_BLOODTYPE, PREFIX_ALLERGY, PREFIX_COLORTAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_ICNUMBER)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // mandatory fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        IcNumber icNumber \u003d ParserUtil.parseIcNumber(argMultimap.getValue(PREFIX_ICNUMBER).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VisitHistory visitHistory \u003d new VisitHistory(new ArrayList\u003cVisit\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assert name !\u003d null : \"Patient should be given a name.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assert phone !\u003d null : \"Patient should be given a phone number.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assert icNumber !\u003d null : \"Patient should be given an IC number.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // optional fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Address address \u003d new Address();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Email email \u003d new Email();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Sex sex \u003d new Sex();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        BloodType bloodType \u003d new BloodType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(\"data/stock_picture.png\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEX).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            sex \u003d ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOODTYPE).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Set\u003cAllergy\u003e allergyList \u003d ParserUtil.parseAllergies(argMultimap.getAllValues(PREFIX_ALLERGY));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ColorTag colorTag \u003d ParserUtil.parseColorTag(argMultimap.getValue(PREFIX_COLORTAG).orElse(\"\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        Patient patient \u003d new Patient(name, phone, icNumber, visitHistory, address, email, profilePicture,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                sex, bloodType, allergyList, colorTag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new AddCommand(patient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 3,
      "Michaeliaaa": 6,
      "afroneth": 2,
      "eugene3231": 5,
      "-": 48,
      "gsmoon97": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProfilePictureCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PICTURE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PICTURE_HAS_WRONG_EXTENSION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.AddProfilePictureCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Parses input arguments and creates a new AddProfilePicture object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class AddProfilePictureCommandParser implements Parser\u003cAddProfilePictureCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProfilePicture"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * and returns an AddProfilePicture object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public AddProfilePictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                   AddProfilePictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!argMultiMap.getValue(PREFIX_FILE_PATH).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                   AddProfilePictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String filePath \u003d argMultiMap.getValue(PREFIX_FILE_PATH).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String extension \u003d filePath.substring(filePath.lastIndexOf(\u0027.\u0027) + 1).toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (!extension.equals(\"jpg\") \u0026\u0026 !extension.equals(\"png\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new ParseException(MESSAGE_PICTURE_HAS_WRONG_EXTENSION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        File profilePicture \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!profilePicture.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_PICTURE_DOES_NOT_EXIST,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                   AddProfilePictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new AddProfilePictureCommand(profilePicture, index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 9,
      "afroneth": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddVisitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.AddVisitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Parses input arguments and creates a new AddVisitCommandParser object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class AddVisitCommandParser implements Parser\u003cAddVisitCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddVisitCommandParser}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * and returns a {@code AddVisitCommandParser} object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public AddVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index patientIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String visitDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_VISIT_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            visitDate \u003d ParserUtil.parseVisit(argMultimap.getValue(PREFIX_VISIT_DATE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        .orElse(LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IllegalValueException exception) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                     AddVisitCommand.MESSAGE_USAGE), exception);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new AddVisitCommand(visitDate, patientIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 23,
      "eugene3231": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Prefix PREFIX_ICNUMBER \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Prefix PREFIX_FILE_PATH \u003d new Prefix((\"f/\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Prefix PREFIX_SEX \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Prefix PREFIX_ALLERGY \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Prefix PREFIX_COLORTAG \u003d new Prefix(\"ct/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Prefix PREFIX_APP_PATIENTNAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Prefix PREFIX_APP_PATIENTIC \u003d new Prefix(\"pi/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Prefix PREFIX_APP_STARTTIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Prefix PREFIX_APP_DURATION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Prefix PREFIX_VISIT_DATE \u003d new Prefix(\"vd/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final Prefix PREFIX_VISIT_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 7,
      "-": 12,
      "gsmoon97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliniCalParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.AddProfilePictureCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.AddVisitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.ClearHistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.DeleteVisitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.EditVisitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.appointment.AddAppointmentCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.appointment.DeleteAppointmentCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.appointment.EditAppointmentCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class CliniCalParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        case ClearHistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new ClearHistoryCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case AddProfilePictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return new AddProfilePictureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        case AddVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return new AddVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        case DeleteVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            return new DeleteVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case EditVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return new EditVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case ProfileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return new ProfileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        case AddAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        case EditAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return new EditAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        case DeleteAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new DeleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 16,
      "afroneth": 9,
      "eugene3231": 22,
      "-": 74,
      "gsmoon97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteVisitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.DeleteVisitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Parses input arguments and creates a new DeleteVisitCommandParser object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class DeleteVisitCommandParser implements Parser\u003cDeleteVisitCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteVisitCommandParser}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * and returns a {@code DeleteVisitCommandParser} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws IllegalValueException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws NumberFormatException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public DeleteVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index patientIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int visitIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_VISIT_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            String input \u003d argMultimap.getValue(PREFIX_VISIT_INDEX).orElse(ParserUtil.MESSAGE_EMPTY_VISIT_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            visitIndex \u003d ParserUtil.parseVisitIndex(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        } catch (IllegalValueException | NumberFormatException ive) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    DeleteVisitCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new DeleteVisitCommand(patientIndex, visitIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 20,
      "eugene3231": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLORTAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ICNUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ICNUMBER,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_SEX, PREFIX_BLOODTYPE, PREFIX_ALLERGY, PREFIX_COLORTAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ICNUMBER).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editPatientDescriptor.setIcNumber(ParserUtil.parseIcNumber(argMultimap.getValue(PREFIX_ICNUMBER).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEX).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editPatientDescriptor.setSex(ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOODTYPE).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editPatientDescriptor.setBloodType(ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_ALLERGY)).ifPresent(editPatientDescriptor::setAllergies);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLORTAG).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            editPatientDescriptor.setColorTag(ParserUtil.parseColorTag(argMultimap.getValue(PREFIX_COLORTAG).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new EditCommand(index, editPatientDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Optional\u003cSet\u003cAllergy\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Optional.of(ParserUtil.parseAllergies(tagSet));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 4,
      "Michaeliaaa": 7,
      "-": 68,
      "gsmoon97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditVisitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.EditVisitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class EditVisitCommandParser implements Parser\u003cEditVisitCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditVisitCommandParser}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * and returns a {@code EditVisitCommandParser} object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws IllegalValueException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws NumberFormatException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public EditVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_VISIT_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index patientIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int visitIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            String input \u003d argMultimap.getValue(PREFIX_VISIT_INDEX).orElse(ParserUtil.MESSAGE_EMPTY_VISIT_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            visitIndex \u003d ParserUtil.parseVisitIndex(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        } catch (IllegalValueException | NumberFormatException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                     EditVisitCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new EditVisitCommand(patientIndex, visitIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 34,
      "eugene3231": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final String MESSAGE_EMPTY_VISIT_INDEX \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final int MESSAGE_EMPTY_VISIT_INDICATOR \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_INVALID_DURATION \u003d \"The given duration should be a positive number. \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"Duration provided is invalid.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            + \"It should not be more than 2147483647 or in decimal form.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses a {@code String icNumber} into an {@code IcNumber}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws ParseException if the given {@code icNumber} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static IcNumber parseIcNumber(String icNumber) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(icNumber);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedIcNumber \u003d icNumber.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!IcNumber.isValidIcNumber(trimmedIcNumber)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(IcNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new IcNumber(trimmedIcNumber);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses a {@code String bloodType} into an {@code BloodType}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws ParseException if the given {@code bloodType} is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static BloodType parseBloodType(String bloodType) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(bloodType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedBloodType \u003d bloodType.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!BloodType.isValidBloodType(trimmedBloodType)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new BloodType(trimmedBloodType);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses a {@code String sex} into an {@code Sex}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws ParseException if the given {@code sex} is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static Sex parseSex(String sex) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedSex \u003d sex.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!Sex.isValidSex(trimmedSex)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new Sex(trimmedSex);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses a {@code String allergy} into a {@code Allergy}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws ParseException if the given {@code allergy} is invalid."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static Allergy parseAllergy(String allergy) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(allergy);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedAllergy \u003d allergy.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!Allergy.isValidAllergyName(trimmedAllergy)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(Allergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new Allergy(trimmedAllergy);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static Set\u003cAllergy\u003e parseAllergies(Collection\u003cString\u003e allergies) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(allergies);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final Set\u003cAllergy\u003e allergySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        for (String allergyName : allergies) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            allergySet.add(parseAllergy(allergyName));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return allergySet;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Parses a {@code String colorTag} into a {@code ColorTag}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @throws ParseException if the given {@code ColorTag} is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static ColorTag parseColorTag(String colorTag) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        requireNonNull(colorTag);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String trimmedColorTag \u003d colorTag.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (trimmedColorTag.equals(\"\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new ColorTag();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (!ColorTag.isValidColorName(colorTag)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new ParseException(ColorTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return new ColorTag(trimmedColorTag);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Validates {@code index} as a valid number."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws ParseException if the given {@code index} is invalid."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static int parseVisitIndex(String index) throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!index.equals(MESSAGE_EMPTY_VISIT_INDEX)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (Integer.parseInt(index) \u003c 1) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_VISIT_INDEX);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                return Integer.parseInt(index);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return MESSAGE_EMPTY_VISIT_INDICATOR;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Validates {@code date} and  returns a  trimmed {@code trimmedDate}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static String parseVisit(String date) throws ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (Visit.isValidVisitDate(trimmedDate)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            // Do nothing."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new ParseException(Visit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return trimmedDate;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * Parses a {@code String dateTime} into an {@code AppointmentDateTime}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static AppointmentDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!AppointmentDateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(AppointmentDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new AppointmentDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses a {@code String dateTimeStr, durationStr} into an {@code AppointmentDateTime}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws ParseException if the given {@code dateTimeStr, durationStr} is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static AppointmentDateTime parseDurationWithStart(String dateTimeStr, String durationStr)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(dateTimeStr, durationStr);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedDateTime \u003d dateTimeStr.trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedDuration \u003d durationStr.trim();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int duration;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!AppointmentDateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(AppointmentDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            duration \u003d Integer.parseInt(trimmedDuration);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (duration \u003c\u003d 0) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                throw new ParseException(MESSAGE_NEGATIVE_INVALID_DURATION);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new AppointmentDateTime(trimmedDateTime, duration);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses a {@code String durationStr} into an {@code Integer}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws ParseException if the given {@code durationStr} is invalid."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static int parseDuration(String durationStr) throws ParseException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(durationStr);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String trimmedDuration \u003d durationStr.trim();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int duration;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            duration \u003d Integer.parseInt(trimmedDuration);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (duration \u003c\u003d 0) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                throw new ParseException(MESSAGE_NEGATIVE_INVALID_DURATION);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            if (duration \u003e Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 20,
      "Michaeliaaa": 17,
      "afroneth": 11,
      "eugene3231": 31,
      "-": 114,
      "gsmoon97": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ProfileCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Parses input arguments and creates a new {@code ProfileCommand} object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ProfileCommandParser implements Parser\u003cProfileCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ProfileCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * and returns a {@code ProfileCommand} object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index patientIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IllegalValueException exception) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProfileCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                     exception);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new ProfileCommand(patientIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/appointment/AddAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_STARTTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public AddAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_APP_STARTTIME, PREFIX_APP_DURATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_APP_STARTTIME, PREFIX_APP_DURATION)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        AppointmentDateTime startTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_APP_STARTTIME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        AppointmentDateTime endTime \u003d ParserUtil.parseDurationWithStart("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                argMultimap.getValue(PREFIX_APP_STARTTIME).get(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                argMultimap.getValue(PREFIX_APP_DURATION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new AddAppointmentCommand(index, startTime, endTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 41,
      "gsmoon97": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/appointment/DeleteAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public DeleteAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new DeleteAppointmentCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/appointment/EditAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_PATIENTIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_PATIENTNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_STARTTIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Parses input arguments and creates a new AppointmentEditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AppointmentEditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * and returns an AppointmentEditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_APP_PATIENTNAME, PREFIX_APP_PATIENTIC,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        PREFIX_APP_STARTTIME, PREFIX_APP_DURATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    EditAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APP_PATIENTNAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editAppointmentDescriptor.setPatientName(ParserUtil.parseName("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    argMultimap.getValue(PREFIX_APP_PATIENTNAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APP_PATIENTIC).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editAppointmentDescriptor.setPatientIc(ParserUtil.parseIcNumber("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    argMultimap.getValue(PREFIX_APP_PATIENTIC).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APP_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editAppointmentDescriptor.setStartTime(ParserUtil.parseDateTime("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    argMultimap.getValue(PREFIX_APP_STARTTIME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APP_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            editAppointmentDescriptor.setDuration(ParserUtil.parseDuration("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    argMultimap.getValue(PREFIX_APP_DURATION).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!editAppointmentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new EditAppointmentCommand(index, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CliniCal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Wraps all data at the CliniCal application level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class CliniCal implements ReadOnlyCliniCal {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final UniqueAppointmentList appointments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointments \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CliniCal() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Creates a CliniCal using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CliniCal(ReadOnlyCliniCal toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Replaces the contents of the appointment list with {@code appointments}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * {@code appointments} must not contain any duplicate appointments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.appointments.setAppointments(appointments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Resets the existing data of this {@code CliniCal} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void resetData(ReadOnlyCliniCal newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        setAppointments(newData.getAppointmentList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient database."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Adds a patient to the patient database."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * The patient must not already exist in the database."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * {@code target} must exist in the patient database."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * patient in the database."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Removes {@code key} from this {@code CliniCal}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * {@code key} must exist in the patient database."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    //// appointment-level operations"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if an appointment with the same identity as {@code appointment} exists in the appointment list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return appointments.clashes(appointment);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Adds an appointment to the appointments."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * The appointment must not already exist in the appointment list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointments.add(appointment);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * {@code target} must exist in the appointment list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * appointment in the appointment list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        requireNonNull(editedAppointment);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointments.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Removes {@code key} from this {@code CliniCal}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * {@code key} must exist in the appointments list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void removeAppointment(Appointment key) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointments.remove(key);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return appointments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || (other instanceof CliniCal // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 patients.equals(((CliniCal) other).patients));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 55,
      "Michaeliaaa": 27,
      "afroneth": 1,
      "-": 78,
      "gsmoon97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Returns the user prefs\u0027 CliniCal application file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Path getCliniCalFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sets the user prefs\u0027 CliniCal application file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    void setCliniCalFilePath(Path cliniCalFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Replaces CliniCal application data with the data in {@code cliniCal}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    void setCliniCal(ReadOnlyCliniCal cliniCal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /** Returns the CliniCal */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    ReadOnlyCliniCal getCliniCal();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the CliniCal application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * The patient must exist in the CliniCal application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * {@code patient} must not already exist in the CliniCal application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * {@code target} must exist in the CliniCal application."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * in the CliniCal application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns an unmodifiable view of the filtered patient list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns true if an appointment with the same identity as {@code appointment} exists in the CliniCal application."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    boolean hasAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Deletes the given appointment."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * The appointment must exist in the CliniCal application."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void deleteAppointment(Appointment target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Adds the given appointment."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * {@code appointment} must not already exist in the CliniCal application."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void addAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedAppointment}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * {@code target} must exist in the CliniCal application."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * in the CliniCal application."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void setAppointment(Appointment target, Appointment editedAppointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns an unmodifable view of the appointment list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null/"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Saves the current CliniCal application state in its history."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void commitCliniCal(String command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Checks if there are any valid commands to undo."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    boolean canUndoCliniCal();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Restores the previous CliniCal application state from its history."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void undoCliniCal();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns the command that was undone successfully."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    String getUndoCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns the command that was redone successfully."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    String getRedoCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Checks if there are any valid commands to redo."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    boolean canRedoCliniCal();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     *  Restores a previously undone CliniCal application state from its history."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void redoCliniCal();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 15,
      "Michaeliaaa": 39,
      "afroneth": 8,
      "eugene3231": 36,
      "-": 60,
      "gsmoon97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Represents the in-memory model of the CliniCal application data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final CliniCal cliniCal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final VersionedCliniCal versionedCliniCal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Initializes a ModelManager with the given cliniCal and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public ModelManager(ReadOnlyCliniCal cliniCal, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireAllNonNull(cliniCal, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.fine(\"Initializing with CliniCal application: \" + cliniCal + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.cliniCal \u003d new CliniCal(cliniCal);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(this.cliniCal.getPatientList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        filteredAppointments \u003d new FilteredList\u003c\u003e(this.cliniCal.getAppointmentList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.versionedCliniCal \u003d new VersionedCliniCal(this.cliniCal);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this(new CliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Path getCliniCalFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return userPrefs.getCliniCalFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setCliniCalFilePath(Path cliniCalFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(cliniCalFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userPrefs.setCliniCalFilePath(cliniCalFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CliniCal \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void setCliniCal(ReadOnlyCliniCal cliniCal) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.cliniCal.resetData(cliniCal);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public ReadOnlyCliniCal getCliniCal() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return cliniCal;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return cliniCal.hasPatient(patient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        cliniCal.removePatient(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        cliniCal.addPatient(patient);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        cliniCal.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Appointment \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return cliniCal.hasAppointment(appointment);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        cliniCal.removeAppointment(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void addAppointment(Appointment toAdd) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        cliniCal.addAppointment(toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        cliniCal.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void commitCliniCal(String command) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.commit(cliniCal, command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public boolean canUndoCliniCal() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return versionedCliniCal.canUndoCliniCal();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void undoCliniCal() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.undo();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public String getUndoCommand() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return versionedCliniCal.getUndoCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public boolean canRedoCliniCal() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return versionedCliniCal.canRedoCliniCal();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void redoCliniCal() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.redo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public String getRedoCommand() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return versionedCliniCal.getRedoCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * {@code versionedCliniCal}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * {@code versionedCliniCal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return filteredAppointments;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        filteredAppointments.setPredicate(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return cliniCal.equals(other.cliniCal)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 9,
      "Michaeliaaa": 38,
      "afroneth": 2,
      "eugene3231": 46,
      "-": 127,
      "gsmoon97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCliniCal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Unmodifiable view of the CliniCal application"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public interface ReadOnlyCliniCal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns an unmodifiable view of the patients list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * This list will not contain any duplicate patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns an unmodifiable view of the appointments list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * This list will not contain any duplicate appointments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    ObservableList\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 7,
      "Michaeliaaa": 4,
      "afroneth": 1,
      "-": 11,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Path getCliniCalFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Path cliniCalFilePath \u003d Paths.get(\"data\", \"clinical.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        setCliniCalFilePath(newUserPrefs.getCliniCalFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Path getCliniCalFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return cliniCalFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setCliniCalFilePath(Path cliniCalFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(cliniCalFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.cliniCalFilePath \u003d cliniCalFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 cliniCalFilePath.equals(o.cliniCalFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Objects.hash(guiSettings, cliniCalFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cliniCalFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "gsmoon97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedCliniCal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * Keeps track of CliniCal states."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class VersionedCliniCal extends CliniCal {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final int INITIAL_POINTER \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final ArrayList\u003cReadOnlyCliniCal\u003e clinicalStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final CliniCal cliniCal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Initializes and saves the initial {@code CliniCal} state on first start of CliniCal and assigns the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * {@code currentStatePointer} to it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public VersionedCliniCal(CliniCal initialCliniCal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        clinicalStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        currentStatePointer \u003d INITIAL_POINTER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.cliniCal \u003d initialCliniCal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        clinicalStateList.add(new CliniCal(initialCliniCal));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        commandList.add(\"Initial patient-list\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Saves the current CliniCal application state in its history, after purging redundant states."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void commit(ReadOnlyCliniCal currentCliniCal, String command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assert currentStatePointer \u003e -1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (currentStatePointer !\u003d clinicalStateList.size() - 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            clinicalStateList.subList(currentStatePointer + 1, clinicalStateList.size()).clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            commandList.subList(currentStatePointer + 1, commandList.size()).clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        clinicalStateList.add(new CliniCal(currentCliniCal));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        commandList.add(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Restores the previous CliniCal application state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        cliniCal.resetData(clinicalStateList.get(--currentStatePointer));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Restores the previously undone CliniCal application state."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        cliniCal.resetData(clinicalStateList.get(++currentStatePointer));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns true if there are CliniCal states available to undo."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public boolean canUndoCliniCal() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return currentStatePointer !\u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns true if there are CliniCal states available to redo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public boolean canRedoCliniCal() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return currentStatePointer !\u003d clinicalStateList.size() - 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns the input corresponding to the command that is undone."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public String getUndoCommand() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return commandList.get(currentStatePointer + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns the input corresponding to the command that is redone."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public String getRedoCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return commandList.get(currentStatePointer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns the current state being pointed at for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public ReadOnlyCliniCal getCurrentCliniCalState() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return clinicalStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/allergy/Allergy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.allergy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents an Allergy in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidAllergyName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class Allergy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Allergy names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public final String allergyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a {@code Allergy}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param allergyName A valid allergy name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Allergy(String allergyName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(allergyName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        checkArgument(isValidAllergyName(allergyName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.allergyName \u003d allergyName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if a given string is a valid allergy name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static boolean isValidAllergyName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || (other instanceof Allergy // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 allergyName.equals(((Allergy) other).allergyName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return allergyName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return \u0027[\u0027 + allergyName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_START_END;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents a patient\u0027s Appointment in the CliniCal application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Name patientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private IcNumber patientIc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private AppointmentDateTime startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private AppointmentDateTime endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Patient name, appointment time must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Appointment(Name patientName, IcNumber patientIc, AppointmentDateTime startTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                       AppointmentDateTime endTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireAllNonNull(patientName, startTime, endTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        checkArgument(isValidStartEnd(startTime, endTime), MESSAGE_INVALID_APPOINTMENT_START_END);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // should also check whether a patient is inside the patient database"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientIc \u003d patientIc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Validates that starting time of appointment provided is earlier than ending time provided"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param startTime starting time of the appointment"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param endTime   ending time of the appointment"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @return true if starting time is earlier than ending time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static boolean isValidStartEnd(AppointmentDateTime startTime, AppointmentDateTime endTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return startTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static int compare(Appointment appointment1, Appointment appointment2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return appointment1.getStartTime().compareTo(appointment2.getStartTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Name getPatientName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return patientName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public IcNumber getPatientIc() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return patientIc;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public AppointmentDateTime getStartTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public AppointmentDateTime getEndTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return (int) getStartTime().computeDuration(getEndTime());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if both appointments have the same patient name and appointment time."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * This defines a stronger notion of equality between two appointments."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return otherAppointment.getPatientName().equals(getPatientName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatientIc().equals(getPatientIc())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherAppointment.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndTime().equals(getEndTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if both appointments have the same appointment time."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * This defines a weaker notion of equality between two appointments."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean isSameAppointmentTime(Appointment other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 other.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 other.getEndTime().equals(getEndTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if both appointments have overlapping appointment time that causes time conflict."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean hasTimeConflict(Appointment other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int startDiff \u003d this.getStartTime().compareTo(other.getStartTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int endDiff \u003d this.getEndTime().compareTo(other.getEndTime());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int startEndDiff \u003d this.getStartTime().compareTo(other.getEndTime());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int endStartDiff \u003d this.getEndTime().compareTo(other.getStartTime());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (startDiff * endDiff \u003c\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (startDiff * startEndDiff \u003c 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (endDiff * endStartDiff \u003c 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Objects.hash(patientName, startTime, endTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        builder.append(\"Patient Name: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(getPatientName() + \"\\n\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"Patient NRIC: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(getPatientIc() + \"\\n\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"Starting Time: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(getStartTime() + \"\\n\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"Ending Time: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(getEndTime());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 15,
      "Michaeliaaa": 3,
      "gsmoon97": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class AppointmentDateTime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            \"Please check if you have entered a valid date in the following format: dd/MM/yyyy HH:mm\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                    + \"Please note that only appointments of upcoming dates (including today) will be accepted.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"\\nInput YYYY as 2xxx.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                    + \"\\nInput MM as 01 to 12.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                    + \"\\nInput dd as 01 to 31 (29 - 31 only if it is a valid day in that month).\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"\\nInput HH as 00 to 23.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                    + \"\\nInput mm as 00 to 59.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // Compared to other classes, this class uses the LocalDateTime class to check validity of the String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // rather than a regex."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Constructs a {@code AppointmentDateTime}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param dateTime a valid dateTime string to be parsed by LocalDateTime."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public AppointmentDateTime(String dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Constructs a {@code AppointmentDateTime}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @param dateTime a valid dateTime string to be parsed by LocalDateTime."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @param duration a valid duration to add on"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public AppointmentDateTime(String dateTime, int duration) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assert duration \u003e 0 : \"Invalid duration\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DATE_TIME_FORMATTER).plusMinutes(duration);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String getDateTimeStr() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this.dateTime.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public long computeDuration(AppointmentDateTime other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Duration.between(this.dateTime, other.dateTime).toMinutes();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if a given string is a valid AppointmentDateTime."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            LocalDateTime parsed \u003d LocalDateTime.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (parsed.isBefore(currentDateTime)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return parsed.format(DATE_TIME_FORMATTER).equals(test);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int compareTo(AppointmentDateTime other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return dateTime.compareTo(other.dateTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                || (other instanceof AppointmentDateTime"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u0026\u0026 dateTime.equals(((AppointmentDateTime) other).dateTime));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return dateTime.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 60,
      "Michaeliaaa": 18,
      "gsmoon97": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.exceptions.ConflictingAppointmentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A list of appointments that prevents time conflicts between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A time conflict between two appointments is checked using {@code Appointment#hasTimeConflict(Appointment)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * As such, adding and updating of appointments uses Appointment#hasTimeConflict(Appointment) so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * that the appointment being added or updated is unique in terms of appointment time in the UniqueAppointmentList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * However, the removal of an appointment uses Appointment#equals(Object) so as to ensure"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * that the appointment with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * @see Appointment#hasTimeConflict(Appointment)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if the list contains an appointment that clashes with the given appointment."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean clashes(Appointment toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasTimeConflict);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Adds an appointment to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * The appointment must not clash with other appointments in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void add(Appointment toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (clashes(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ConflictingAppointmentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * The appointment time of {@code editedAppointment} must not clash with another existing appointment in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        internalList.set(index, editedAppointment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Removes the equivalent appointment from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * The appointment must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void remove(Appointment toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setAppointments(UniqueAppointmentList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Replaces the contents of this list with {@code Appointments}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * {@code Appointments} must not contain duplicate Appointments."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        requireAllNonNull(appointments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (!appointmentsAreUnique(appointments)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new ConflictingAppointmentException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        internalList.setAll(appointments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return new SortedList\u003c\u003e(internalUnmodifiableList, Appointment::compare);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Iterator\u003cAppointment\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || (other instanceof UniqueAppointmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if {@code Appointments} contains only unique Appointments."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (appointments.get(i).hasTimeConflict(appointments.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 18,
      "gsmoon97": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueVEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.commons.util.VEventUtil.isSameVEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateVEventException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A list of vEvents that provides functionality to map from appointments to vEvents."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * VEvents with the same patientName, startTime and endTime are not allowed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class UniqueVEventList implements Iterable\u003cVEvent\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEvents \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEventsUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            FXCollections.unmodifiableObservableList(vEvents);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if the list contains an equivalent vEvent as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean contains(VEvent toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return vEvents.stream().anyMatch(vEvent -\u003e isSameVEvent(vEvent, toCheck));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Add a new vEvent to the vEvents list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param vEvent to add to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void addVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(vEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (contains(vEvent)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new DuplicateVEventException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        vEvents.add(vEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Deletes the vEvent at the specified index in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param index of the vEvent in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @return VEvent object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEvent deleteVEvent(Index index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return vEvents.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    //  * Get all appointments backed by vEvents observable list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // public List\u003cAppointment\u003e getAllAppointments() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    //     return VEventUtil.vEventsToAppsMapper(this.vEvents);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns the VEvent object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @return VEvent object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEvent getVEvent(Index index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return vEvents.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the vEvent object at the specified index in the list. This should not result in a duplicate"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * vEvent"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param index  of the vEvent in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param vEvent object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setVEvent(Index index, VEvent vEvent) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VEvent targetVEvent \u003d vEvents.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!isSameVEvent(targetVEvent, vEvent) \u0026\u0026 contains(vEvent)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new DuplicateVEventException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        vEvents.set(index.getZeroBased(), vEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setVEvents(UniqueVEventList replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        vEvents.setAll(replacement.vEvents);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Replaces the contents of this list with {@code vEvents}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * vEvents must be unique."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setVEvents(List\u003cVEvent\u003e vEvents) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireAllNonNull(vEvents);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!vEventsAreUnique(vEvents)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new DuplicateVEventException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.vEvents.setAll(vEvents);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public ObservableList\u003cVEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return vEventsUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Iterator\u003cVEvent\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return vEvents.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || (other instanceof UniqueVEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 vEvents.equals(((UniqueVEventList) other).vEvents));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return vEvents.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Validates if all events in the list are unique"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param vEventList list to be checked"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @return true if all events are unique"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private boolean vEventsAreUnique(List\u003cVEvent\u003e vEventList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        for (int i \u003d 0; i \u003c vEventList.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c vEventList.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                if (isSameVEvent(vEventList.get(i), vEventList.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 16,
      "gsmoon97": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Signals that the operation is unable to find the specified appointment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class AppointmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/ConflictingAppointmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Signals that the operation will result in conflicting Appointments (Appointments are considered conflicting"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * if they have overlapping appointment time)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class ConflictingAppointmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public ConflictingAppointmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        super(\"Operation would result in conflicting appointments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/DuplicateVEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Signals that the operation will result in duplicate vEvents (vEvents are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * if they have the same summary, start time, and end time)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class DuplicateVEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public DuplicateVEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        super(\"Operation would result in conflicting vEvents\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/history/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Represents command history in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String STRING \u003d \"Here is your command history:%s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private static Stack\u003cString\u003e commandHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private static int stateKey \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Adds command to command history."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static void addUsedCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        commandHistory.push(command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        stateKey \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns true if command history have past commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static boolean hasCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return commandHistory.size() !\u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns true if command history is empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static boolean isEmpty() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return commandHistory.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Prints a list of past used commands in the command history."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @return history of commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static String getCommandHistory() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String history \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        for (int i \u003d commandHistory.size() - 1; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            history +\u003d (\"\\n -\\t\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            history +\u003d (commandHistory.get(i - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return String.format(STRING, history);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Clears command history."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static void clearHistory() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        commandHistory.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Peeks at the next command in the command history."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @return next command in the command box"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static String peekNext() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (commandHistory.empty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } else if (stateKey \u003d\u003d commandHistory.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return commandHistory.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            stateKey++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            int indexNext \u003d commandHistory.size() - stateKey;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return commandHistory.get(indexNext);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Peeks at the previous command in the command history."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @return previous command in the command box"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static String peekPrev() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (commandHistory.empty() || stateKey \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } else if (stateKey \u003d\u003d 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            stateKey--;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            stateKey--;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            int indexPrev \u003d commandHistory.size() - stateKey;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return commandHistory.get(indexPrev);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Represents a Patient\u0027s address in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a default {@code Address}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Address() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        value \u003d \"N/A\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (test.equals(\"N/A\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "afroneth": 1,
      "-": 55,
      "gsmoon97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/BloodType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents a Patient\u0027s blood type in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class BloodType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Blood type should be 1 of the following: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"A+ | A- | B+ | B-| O+ | O- | AB+ | AB-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // a blood group that can be \"A\", \"B\", \"O\" or \"AB\" depending on the presence of antigens A, B"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String BLOOD_TYPE_ABO \u003d \"(?i)^(A|B|AB|O)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // a rh system that can be \"+\" or \"-\" depending on the presence of RhD antigen"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String BLOOD_TYPE_RHD \u003d \"[+-]$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d BLOOD_TYPE_ABO + BLOOD_TYPE_RHD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs an {@code BloodType}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param bloodType A valid blood type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public BloodType(String bloodType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(bloodType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        checkArgument(isValidBloodType(bloodType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        type \u003d bloodType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a default {@code BloodType}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public BloodType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        type \u003d \"N/A\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns if a given string is a valid blood type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static boolean isValidBloodType(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (test.equals(\"N/A\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || (other instanceof BloodType // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 type.equals(((BloodType) other).type)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Represents a Patient\u0027s email in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a default {@code Email}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Email() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        value \u003d \"N/A\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (test.equals(\"N/A\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "afroneth": 1,
      "-": 65,
      "gsmoon97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/IcNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents a Patient\u0027s IC number in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIcNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class IcNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"IC numbers should be of the format @xxxxxxx# \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"where each of the three parts adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"1. @ is a letter that can be \\\"S\\\", \\\"T\\\", \\\"F\\\" or \\\"G\\\" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"depending on the status of the holder.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"2. xxxxxxx is a 7-digit serial number assigned to the document holder.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"3. # is the checksum letter calculated with respect to @ and xxxxxxx.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // a letter that can be \"S\", \"T\", \"F\" or \"G\" depending on the status of the patient"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String IC_FIRST_CHARACTER_REGEX \u003d \"(?i)^[STFG]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // a 7-digit serial number assigned to the document holder"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String IC_MIDDLE_REGEX \u003d \"\\\\d{7}\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // the checksum letter calculated with respect to first character and 7 digits"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String IC_LAST_CHARACTER_REGEX \u003d \"[a-zA-Z]$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            IC_FIRST_CHARACTER_REGEX + IC_MIDDLE_REGEX + IC_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs an {@code IcNumber}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param icNumber A valid ic number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public IcNumber(String icNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(icNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        checkArgument(isValidIcNumber(icNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        value \u003d icNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static boolean isValidIcNumber(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || (other instanceof IcNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 value.equals(((IcNumber) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Represents a Patient\u0027s name in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "afroneth": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                     || StringUtil.containsWordIgnoreCase(patient.getIcNumber().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 4,
      "afroneth": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Represents a Patient in the CliniCal application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // Mandatory fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final IcNumber icNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final Sex sex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final BloodType bloodType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final ColorTag colorTag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // List of past visits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final VisitHistory visitHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Name, phone, and IC number must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public Patient(Name name, Phone phone, IcNumber icNumber, VisitHistory visitHistory, Address address, Email email,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                   ProfilePicture profilePicture, Sex sex, BloodType bloodType,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                   Set\u003cAllergy\u003e allergies, ColorTag colorTag) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireAllNonNull(name, phone, icNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.icNumber \u003d icNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.allergies.addAll(allergies);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.colorTag \u003d colorTag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.visitHistory \u003d visitHistory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public IcNumber getIcNumber() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return icNumber;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ProfilePicture getProfilePicture() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return profilePicture;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Sex getSex() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return sex;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public BloodType getBloodType() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return bloodType;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns an immutable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Set\u003cAllergy\u003e getAllergies() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Collections.unmodifiableSet(allergies);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public ColorTag getColorTag() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return colorTag;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitHistory getVisitHistory() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return visitHistory;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if both patients have the same NRIC."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getIcNumber().equals(getIcNumber());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getIcNumber().equals(getIcNumber())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getProfilePicture().equals(getProfilePicture())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getSex().equals(getSex())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getBloodType().equals(getBloodType())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getAllergies().equals(getAllergies())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getColorTag().equals(getColorTag())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherPatient.getVisitHistory().equals(getVisitHistory());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Objects.hash(name, phone, icNumber, address, email, profilePicture, sex, bloodType, allergies, colorTag);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Phone: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getPhone() + \"\\n\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"NRIC: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getIcNumber() + \"\\n\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Address: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getAddress() + \"\\n\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"Email: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getEmail() + \"\\n\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"Sex: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getSex() + \"\\n\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"Blood Type: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getBloodType() + \"\\n\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                .append(\"Color Tag: \")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .append(getColorTag() + \"\\n\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\"Allergies: [ \");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        getAllergies().forEach(builder::append);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        builder.append(\" ]\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 8,
      "Michaeliaaa": 13,
      "afroneth": 15,
      "eugene3231": 2,
      "-": 75,
      "gsmoon97": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Represents a Patient\u0027s phone number in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "afroneth": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/ProfilePicture.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Represents a Patient\u0027s profile picture in the CliniCal application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFilePath(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ProfilePicture {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File path should not be blank or null.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructs a {@code profile picture}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param filePath A valid file path that leads to the profile picture."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ProfilePicture(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert filePath !\u003d \"\" : \"File Path cannot be blank\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.value \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Returns true if a given file path is valid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static boolean isValidFilePath(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert test !\u003d \"\" : \"File Path cannot be blank\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                || (other instanceof ProfilePicture"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u0026\u0026 value.equals(((ProfilePicture) other).value));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Sex.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents a Patient\u0027s sex in the CliniCal application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSex(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class Sex {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sex should be one of the two: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"M | F\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // a letter that can be \"M\" or \"F\" depending on the sex of the patient"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String SEX \u003d \"(?i)^[MF]$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d SEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs an {@code Sex}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param sex A valid sex."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Sex(String sex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        checkArgument(isValidSex(sex), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        value \u003d sex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a default {@code Sex}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Sex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        value \u003d \"N/A\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns if a given string is a valid sex."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static boolean isValidSex(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (test.equals(\"N/A\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                || (other instanceof Sex // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 value.equals(((Sex) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/UniquePatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * adding and updating of patients uses Patient#isSamePatient(Patient) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * the patient being added or updated is unique in terms of identity in the UniquePatientList. However,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * the removal of a patient uses Patient#equals(Object) so as to ensure that the patient with exactly the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/ColorTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a ColorTag in the CliniCal application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidColorName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * When a patient does not have a ColorTag, this class will be initialised with a placeholder transparent color"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * equivalent to Color.rgb(0,0,0,0)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class ColorTag {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The color tag must be a standard HTML color name, or \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            + \"a hex string beginning with #.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // Compared to other classes, this class uses the javafx Color class to check validity of the String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // rather than a regex."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // Keeping 2 separate strings, one for what the user originally entered, and one for code use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // Doing this because the code modifies the original entry of the user into something darker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public final String originalColor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public final String cssColor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Constructs a {@code ColorTag}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param colorName A valid color name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public ColorTag(String colorName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        requireNonNull(colorName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (colorName.equals(\"None\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            cssColor \u003d \"transparent\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            originalColor \u003d \"None\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            checkArgument(isValidColorName(colorName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Color tempColor \u003d Color.web(colorName).darker();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            cssColor \u003d String.format(\"rgba(%d,%d,%d,%d)\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    (int) (255 * tempColor.getRed()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    (int) (255 * tempColor.getGreen()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    (int) (255 * tempColor.getBlue()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    (int) tempColor.getOpacity());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            originalColor \u003d colorName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Constructs a placeholder {@code ColorTag}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public ColorTag() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        cssColor \u003d \"transparent\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        originalColor \u003d \"None\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if the ColorTag is a placeholder."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean isPlaceholder() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return cssColor.equals(\"transparent\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static boolean isValidColorName(String test) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (test.equals(\"None\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Color.web(test);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                || (other instanceof ColorTag // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u0026\u0026 cssColor.equals(((ColorTag) other).cssColor)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return cssColor.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return originalColor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.model.appointment.AppointmentDateTime.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Contains utility methods for populating {@code CliniCal} with sample data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final VisitHistory VISIT_HISTORY1 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        new VisitHistory(new ArrayList\u003cVisit\u003e()).addVisit(new Visit(LocalDate.of(2020, 10, 28),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            new Name(\"Alex Yeoh\"), \"Reflux esophagitis\", \"Synthroid\", \"No need to follow up\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final VisitHistory VISIT_HISTORY2 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        new VisitHistory(new ArrayList\u003cVisit\u003e()).addVisit(new Visit(LocalDate.of(2020, 9, 3),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            new Name(\"Bernice Yu\"), \"COVID-19\", \"Remdesivir\", \"Quarantined for 14 days\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final VisitHistory EMPTY_VISIT_HISTORY3 \u003d new VisitHistory(new ArrayList\u003cVisit\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final VisitHistory EMPTY_VISIT_HISTORY4 \u003d new VisitHistory(new ArrayList\u003cVisit\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final VisitHistory EMPTY_VISIT_HISTORY5 \u003d new VisitHistory(new ArrayList\u003cVisit\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final VisitHistory EMPTY_VISIT_HISTORY6 \u003d new VisitHistory(new ArrayList\u003cVisit\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(\"data/stock_picture.png\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ColorTag placeholderColorTag \u003d new ColorTag();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new IcNumber(\"S7908430A\"), VISIT_HISTORY1,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    profilePicture, new Sex(\"M\"), new BloodType(\"A+\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    getAllergySet(\"penicillin\"), placeholderColorTag),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new IcNumber(\"G4329854B\"), VISIT_HISTORY2,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    profilePicture, new Sex(\"F\"), new BloodType(\"B+\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    getAllergySet(\"sulfa\", \"penicillin\"), new ColorTag(\"maroon\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new IcNumber(\"S7856411C\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                EMPTY_VISIT_HISTORY4, new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    new Email(\"charlotte@example.com\"), profilePicture, new Sex(\"F\"), new BloodType(\"O+\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    getAllergySet(\"sulfa\"), placeholderColorTag),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"), new IcNumber(\"F1155948D\"), EMPTY_VISIT_HISTORY3,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    profilePicture, new Sex(\"M\"), new BloodType(\"AB+\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    getAllergySet(\"aspirin\"), placeholderColorTag),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new IcNumber(\"S1568938I\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                EMPTY_VISIT_HISTORY5, new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    profilePicture, new Sex(\"M\"), new BloodType(\"A+\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    getAllergySet(\"aspirin\", \"sulfa\"), placeholderColorTag),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new IcNumber(\"T9584423R\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                EMPTY_VISIT_HISTORY6, new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    profilePicture, new Sex(\"M\"), new BloodType(\"O+\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    getAllergySet(\"penicillin\"), placeholderColorTag),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static Appointment[] getSampleAppointments() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String start1 \u003d LocalDateTime.now().plusMinutes(10).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String end1 \u003d LocalDateTime.now().plusMinutes(70).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String start2 \u003d LocalDateTime.now().plusDays(1).minusMinutes(90).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String end2 \u003d LocalDateTime.now().plusDays(1).minusMinutes(30).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String start3 \u003d LocalDateTime.now().plusDays(1).plusMinutes(10).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String end3 \u003d LocalDateTime.now().plusDays(1).plusMinutes(70).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String start4 \u003d LocalDateTime.now().plusDays(2).plusMinutes(20).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String end4 \u003d LocalDateTime.now().plusDays(2).plusMinutes(140).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String start5 \u003d LocalDateTime.now().plusDays(2).plusMinutes(160).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String end5 \u003d LocalDateTime.now().plusDays(2).plusMinutes(220).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new Appointment[] {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Appointment(new Name(\"Alex Yeoh\"), new IcNumber(\"G4329854B\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new AppointmentDateTime(start1), new AppointmentDateTime(end1)),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Appointment(new Name(\"Bernice Yu\"), new IcNumber(\"S7908430A\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new AppointmentDateTime(start2), new AppointmentDateTime(end2)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Appointment(new Name(\"Charlotte Oliveiro\"), new IcNumber(\"S7856411C\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new AppointmentDateTime(start3), new AppointmentDateTime(end3)),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Appointment(new Name(\"David Li\"), new IcNumber(\"F1155948D\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new AppointmentDateTime(start4), new AppointmentDateTime(end4)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new Appointment(new Name(\"Irfan Ibrahim\"), new IcNumber(\"S1568938I\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    new AppointmentDateTime(start5), new AppointmentDateTime(end5))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static ReadOnlyCliniCal getSampleCliniCal() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal sampleAb \u003d new CliniCal();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        for (Patient samplePatient : getSamplePatients()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            sampleAb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        for (Appointment sampleAppointment : getSampleAppointments()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            sampleAb.addAppointment(sampleAppointment);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns an allergy set containing the list of strings given."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static Set\u003cAllergy\u003e getAllergySet(String... strings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .map(Allergy::new)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 2,
      "Michaeliaaa": 9,
      "afroneth": 4,
      "eugene3231": 21,
      "-": 25,
      "gsmoon97": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/Visit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents a patient\u0027s visit in the CliniCal application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class Visit implements Comparable\u003cVisit\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visits should take date in valid format.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private LocalDate visitDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Name patientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String prescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates a Visit object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Visit(LocalDate visitDate, Name patientName, String diagnosis, String prescription, String comment) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireAllNonNull(visitDate, patientName, diagnosis, prescription, comment);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.visitDate \u003d visitDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.prescription \u003d prescription;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates a Visit object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Visit(String value) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitDate \u003d LocalDate.parse(value, formatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        patientName \u003d new Name(\"null\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public LocalDate getVisitDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return visitDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Name getPatientName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return patientName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String getDiagnosis() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return diagnosis;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String getPrescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return prescription;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String getComment() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sets patient parameters in profile window."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setParameters(String diagnosis, String prescription, String comment) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.prescription \u003d prescription;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sets patient name."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setPatientName(Name patientName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Validates visit date in dd/MM/yyyy format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Visit date must occur before current local machine date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static boolean isValidVisitDate(String input) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean isBefore \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            LocalDate inputLocalDate \u003d LocalDate.parse(input, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (inputLocalDate.isAfter(currentDate)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                isBefore \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isBefore;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if both visits have the same fields."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!(other instanceof Visit)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Visit otherVisit \u003d (Visit) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return otherVisit.getVisitDate().equals(getVisitDate())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherVisit.getPatientName().equals(getPatientName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherVisit.getDiagnosis().equals(getDiagnosis())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherVisit.getPrescription().equals(getPrescription())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                \u0026\u0026 otherVisit.getComment().equals(getComment());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int compareTo(Visit otherVisit) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        LocalDate currentVisitDate \u003d this.getVisitDate();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        LocalDate otherVisitDate \u003d otherVisit.getVisitDate();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return currentVisitDate.compareTo(otherVisitDate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Objects.hash(visitDate, patientName, diagnosis, prescription, comment);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        builder.append(getVisitDate().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 52,
      "eugene3231": 4,
      "gsmoon97": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/VisitHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents a patient\u0027s visit history in the CliniCal application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class VisitHistory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visit history should take any valid Visit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final ArrayList\u003cVisit\u003e visits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a {@code VisitHistory}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param visits A list of valid visits."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitHistory(ArrayList\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.visits \u003d visits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public ObservableList\u003cVisit\u003e getObservableVisits() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return FXCollections.observableArrayList(this.visits);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Adds a new visit to the visit history."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public VisitHistory addVisit(Visit toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.visits.add(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        Collections.sort(this.visits);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Collections.reverse((this.visits));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Edits a visit(specified by index) from the visit history."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public VisitHistory editVisit(int idx, Visit toEdit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.visits.set(idx - 1, toEdit);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Deletes a visit(specified by index) from the visit history."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public VisitHistory deleteVisit(int idx) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.visits.remove(idx - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public Visit getVisitByIndex(int idx) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return visits.get(idx - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public ArrayList\u003cVisit\u003e getVisits() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this.visits;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Deep-copies an existing visit history to facilitate undo/redo functions."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * @return a new VisitHistory with no reference to the existingVisitHistory"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory deepCopyVisitHistory(VisitHistory existingVisitHistory) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e newVisitArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        for (Visit v : existingVisitHistory.getVisits()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Visit newVisit \u003d new Visit(LocalDate.parse(v.getVisitDate().toString()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new Name(v.getPatientName().toString()), v.getDiagnosis(), v.getPrescription(), v.getComment());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            newVisitArrayList.add(newVisit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(newVisitArrayList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns true if both visit history have the same list of visits."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * This defines a stronger notion of equality between two visit history."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!(other instanceof VisitHistory)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VisitHistory otherVisitHistory \u003d (VisitHistory) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return otherVisitHistory.getVisits().equals(getVisits());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return Objects.hash(visits);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (visits.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"This patient has no prior visits.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        builder.append(\"Most recent visit date: \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        builder.append(visits.get(0).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 8,
      "eugene3231": 48,
      "gsmoon97": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CliniCalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Represents a storage for {@link CliniCal}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public interface CliniCalStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Path getCliniCalFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns CliniCal data as a {@link ReadOnlyCliniCal}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Optional\u003cReadOnlyCliniCal\u003e readCliniCal() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @see #getCliniCalFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Optional\u003cReadOnlyCliniCal\u003e readCliniCal(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Saves the given {@link ReadOnlyCliniCal} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param cliniCal cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    void saveCliniCal(ReadOnlyCliniCal cliniCal) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @see #saveCliniCal(ReadOnlyCliniCal)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    void saveCliniCal(ReadOnlyCliniCal cliniCal, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAllergy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Jackson-friendly version of {@link Allergy}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "class JsonAdaptedAllergy {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String allergyName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a {@code JsonAdaptedAllergy} with the given {@code allergyName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonAdaptedAllergy(String allergyName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.allergyName \u003d allergyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Converts a given {@code Allergy} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonAdaptedAllergy(Allergy source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        allergyName \u003d source.allergyName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public String getAllergyName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return allergyName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Converts this Jackson-friendly adapted allergy object into the model\u0027s {@code Allergy} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted allergy."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Allergy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!Allergy.isValidAllergyName(allergyName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(Allergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new Allergy(allergyName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAppointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "class JsonAdaptedAppointment {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String patientName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String patientIcNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonAdaptedAppointment(@JsonProperty(\"patientName\") String patientName,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                                  @JsonProperty(\"patientIcNumber\") String patientIcNumber,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                                  @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                                  @JsonProperty(\"endTime\") String endTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientIcNumber \u003d patientIcNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientName \u003d source.getPatientName().fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientIcNumber \u003d source.getPatientIc().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Appointment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (patientName \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!Name.isValidName(patientName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final Name modelName \u003d new Name(patientName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (patientIcNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    IcNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!IcNumber.isValidIcNumber(patientIcNumber)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(IcNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final IcNumber modelIcNumber \u003d new IcNumber(patientIcNumber);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    AppointmentDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!AppointmentDateTime.isValidDateTime(startTime)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(AppointmentDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final AppointmentDateTime modelStartTime \u003d new AppointmentDateTime(startTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    AppointmentDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!AppointmentDateTime.isValidDateTime(endTime)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(AppointmentDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final AppointmentDateTime modelEndTime \u003d new AppointmentDateTime(endTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new Appointment(modelName, modelIcNumber, modelStartTime, modelEndTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String icNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final List\u003cJsonAdaptedVisit\u003e visitHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final String profilePicture;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String sex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final String bloodType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final List\u003cJsonAdaptedAllergy\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final String color;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"icNumber\") String icNumber,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                              @JsonProperty(\"visitHistory\") List\u003cJsonAdaptedVisit\u003e visitHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"profilePicture\") String profilePicture,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"sex\") String sex,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"bloodType\") String bloodType,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                              @JsonProperty(\"allergies\") List\u003cJsonAdaptedAllergy\u003e allergies,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                              @JsonProperty(\"color\") String color) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.icNumber \u003d icNumber;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (visitHistory !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            this.visitHistory.addAll(visitHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (allergies !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            this.tagged.addAll(allergies);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        icNumber \u003d source.getIcNumber().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        VisitHistory tempVisitHistory \u003d source.getVisitHistory();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ArrayList\u003cVisit\u003e arrayOfVisits \u003d tempVisitHistory.getVisits();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitHistory.addAll(arrayOfVisits.stream().map(JsonAdaptedVisit::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        profilePicture \u003d source.getProfilePicture().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sex \u003d source.getSex().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        bloodType \u003d source.getBloodType().type;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        tagged.addAll(source.getAllergies().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .map(JsonAdaptedAllergy::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        color \u003d source.getColorTag().originalColor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final List\u003cAllergy\u003e patientAllergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        for (JsonAdaptedAllergy tag: tagged) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            patientAllergies.add(tag.toModelType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        final ArrayList\u003cVisit\u003e patientVisits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        for (JsonAdaptedVisit visit: visitHistory) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            patientVisits.add(visit.toModelType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (icNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    IcNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!IcNumber.isValidIcNumber(icNumber)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(IcNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final IcNumber modelIcNumber \u003d new IcNumber(icNumber);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        final VisitHistory modelVisitHistory \u003d new VisitHistory(patientVisits);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (profilePicture \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    ProfilePicture.class.getSimpleName()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!ProfilePicture.isValidFilePath(profilePicture)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new IllegalValueException(ProfilePicture.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        final ProfilePicture modelProfilePicture \u003d new ProfilePicture(profilePicture);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (sex \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Sex.class.getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!Sex.isValidSex(sex)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final Sex modelSex \u003d new Sex(sex);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (bloodType \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    BloodType.class.getSimpleName()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!BloodType.isValidBloodType(bloodType)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final BloodType modelBloodType \u003d new BloodType(bloodType);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final Set\u003cAllergy\u003e modelAllergies \u003d new HashSet\u003c\u003e(patientAllergies);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (color \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    ColorTag.class.getSimpleName()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (!ColorTag.isValidColorName(color)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalValueException(ColorTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        final ColorTag modelColorTag \u003d new ColorTag(color);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new Patient(modelName, modelPhone, modelIcNumber, modelVisitHistory, modelAddress, modelEmail,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            modelProfilePicture, modelSex, modelBloodType, modelAllergies, modelColorTag);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 14,
      "Michaeliaaa": 14,
      "afroneth": 17,
      "eugene3231": 16,
      "-": 73,
      "gsmoon97": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVisit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " * Jackson-friendly version of {@link Visit}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class JsonAdaptedVisit {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final String visitDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final String patientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final String diagnosis;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final String prescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final String comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisit} with the given visit details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public JsonAdaptedVisit(@JsonProperty(\"visitDate\") String visitDate,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                            @JsonProperty(\"patientName\") String patientName,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                            @JsonProperty(\"diagnosis\") String diagnosis,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                            @JsonProperty(\"prescription\") String prescription,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                            @JsonProperty(\"comment\") String comment) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.visitDate \u003d visitDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.prescription \u003d prescription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Converts a given {@code Visit} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public JsonAdaptedVisit(Visit visit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String formattedString \u003d visit.getVisitDate().format(formatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitDate \u003d formattedString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        patientName \u003d visit.getPatientName().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        diagnosis \u003d visit.getDiagnosis();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        prescription \u003d visit.getPrescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        comment \u003d visit.getComment();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts this Visit object into the model\u0027s {@code Visit} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted allergy."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public Visit toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (Visit.isValidVisitDate(visitDate)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            // Do nothing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new IllegalValueException(Visit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new Visit(LocalDate.parse(visitDate, formatter), new Name(patientName), diagnosis, prescription,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            comment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 15,
      "eugene3231": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCliniCalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A class to access CliniCal data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class JsonCliniCalStorage implements CliniCalStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCliniCalStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonCliniCalStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Path getCliniCalFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Optional\u003cReadOnlyCliniCal\u003e readCliniCal() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return readCliniCal(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Similar to {@link #readCliniCal()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Optional\u003cReadOnlyCliniCal\u003e readCliniCal(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Optional\u003cJsonSerializableCliniCal\u003e jsonCliniCal \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                filePath, JsonSerializableCliniCal.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (!jsonCliniCal.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return Optional.of(jsonCliniCal.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void saveCliniCal(ReadOnlyCliniCal cliniCal) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        saveCliniCal(cliniCal, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Similar to {@link #saveCliniCal(ReadOnlyCliniCal)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void saveCliniCal(ReadOnlyCliniCal cliniCal, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        requireNonNull(cliniCal);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCliniCal(cliniCal), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "gsmoon97": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCliniCal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * An Immutable CliniCal that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "@JsonRootName(value \u003d \"clinical\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "class JsonSerializableCliniCal {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointment list contains duplicate appointment(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Constructs a {@code JsonSerializableCliniCal} with the given patients and appointments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonSerializableCliniCal(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                                    @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.appointments.addAll(appointments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Converts a given {@code ReadOnlyCliniCal} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCliniCal}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public JsonSerializableCliniCal(ReadOnlyCliniCal source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Converts this CliniCal application into the model\u0027s {@code CliniCal} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CliniCal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal cliniCal \u003d new CliniCal();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (cliniCal.hasPatient(patient)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            cliniCal.addPatient(patient);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (cliniCal.hasAppointment(appointment)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            cliniCal.addAppointment(appointment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return cliniCal;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 8,
      "afroneth": 1,
      "-": 36,
      "gsmoon97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public interface Storage extends CliniCalStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Path getCliniCalFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    Optional\u003cReadOnlyCliniCal\u003e readCliniCal() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    void saveCliniCal(ReadOnlyCliniCal cliniCal) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    void initializePlaceholderImage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "-": 28,
      "gsmoon97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Manages storage of CliniCal data in local storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private CliniCalStorage cliniCalStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code CliniCalStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public StorageManager(CliniCalStorage cliniCalStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.cliniCalStorage \u003d cliniCalStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CliniCal methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Path getCliniCalFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return cliniCalStorage.getCliniCalFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Optional\u003cReadOnlyCliniCal\u003e readCliniCal() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return readCliniCal(cliniCalStorage.getCliniCalFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Optional\u003cReadOnlyCliniCal\u003e readCliniCal(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return cliniCalStorage.readCliniCal(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void saveCliniCal(ReadOnlyCliniCal cliniCal) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        saveCliniCal(cliniCal, cliniCalStorage.getCliniCalFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void saveCliniCal(ReadOnlyCliniCal cliniCal, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        cliniCalStorage.saveCliniCal(cliniCal, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Image methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Adds profile picture to patient and returns destination file path."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patientName Patient\u0027s name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param profilePic Patient\u0027s profile picture"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String destination file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static String addPicture(String patientName, File profilePic) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assert patientName !\u003d \"\" || profilePic !\u003d null : \"Patient name cannot be blank.\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                            + \"Profile picture cannot be null.\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String profilePicPath \u003d profilePic.getPath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String profilePicExtension \u003d FilenameUtils.getExtension(profilePicPath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            //TODO: replace hardcoded path"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String destinationPath \u003d \"data/\" + patientName.replaceAll(\" \", \"_\") + \".\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                     + profilePicExtension;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            byte[] profilePicInBytes \u003d FileUtils.readFileToByteArray(profilePic);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assert profilePicInBytes !\u003d null : \"Profile picture cannot be null\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String profilePicInString \u003d Base64.getEncoder().encodeToString(profilePicInBytes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            File finalProfilePic \u003d new File(destinationPath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            byte[] decodedBytes \u003d Base64.getDecoder().decode(profilePicInString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assert decodedBytes !\u003d null : \"Profile picture cannot be null\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FileUtils.writeByteArrayToFile(finalProfilePic, decodedBytes);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return destinationPath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return error.getMessage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Initialises a placeholder images in the {@code data} folder."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void initializePlaceholderImage() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            InputStream is \u003d MainApp.class.getResourceAsStream(\"/images/stock_picture.png\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Path targetPath \u003d cliniCalStorage.getCliniCalFilePath().getParent().resolve(\"stock_picture.png\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            if (Files.exists(targetPath)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                System.out.println(\"stock_picture.png already exists. Using existing file.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            FileUtils.copyInputStreamToFile(is, targetPath.toFile());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            System.out.println(error.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 23,
      "afroneth": 35,
      "-": 64,
      "gsmoon97": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppointmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class AppointmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMMM yyyy - h:mma\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public final Appointment appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private HBox appointmentCardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Label icNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a {@code AppointmentCard} with the given {@code Appointment} and index to display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public AppointmentCard(Appointment appointment, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assert appointment !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        name.setText(appointment.getPatientName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        icNumber.setText(\"IC: \" + appointment.getPatientIc().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        startTime.setText(formatter.format(appointment.getStartTime().dateTime));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        int minutes \u003d (int) ChronoUnit.MINUTES"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        .between(appointment.getStartTime().dateTime, appointment.getEndTime().dateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        duration.setText(\"Duration: \" + minutes + (minutes \u003d\u003d 1 ? \" minute\" : \" minutes\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (!(other instanceof AppointmentCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        AppointmentCard otherACard \u003d (AppointmentCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return id.getText().equals(otherACard.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u0026\u0026 appointment.equals(otherACard.appointment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 64,
      "gsmoon97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppointmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Panel containing the list of appointments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private ListView\u003cAppointment\u003e appointmentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assert appointmentList !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointmentListView.setItems(appointmentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using a {@code AppointmentCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        protected void updateItem(Appointment appointment, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            super.updateItem(appointment, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            if (empty || appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.commons.util.VEventUtil.appsToVEventsMapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.ListChangeListener.Change;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.input.MouseDragEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.input.TouchEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import jfxtras.icalendarfx.VCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import jfxtras.scene.control.agenda.Agenda;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import jfxtras.scene.control.agenda.icalendar.ICalendarAgenda;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.ui.skin.CustomEightDaySkin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * A ui for the calendar displayed in one of the tabs of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class CalendarDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final String FXML \u003d \"CalendarDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private ICalendarAgenda calendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private StackPane calendarPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a {@code Calendar} with a blank {@code Agenda}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public CalendarDisplay(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        VCalendar vCalendar \u003d new VCalendar().withVEvents(appsToVEventsMapper(appointmentList));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        calendar \u003d new ICalendarAgenda(vCalendar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        calendar.setSkin(new CustomEightDaySkin(calendar));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        disableMouseInteraction(calendar);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendar);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointmentList.addListener((Change\u003c? extends Appointment\u003e c) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            calendarPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            VCalendar vCalendarNew \u003d new VCalendar().withVEvents(appsToVEventsMapper(c.getList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            calendar \u003d new ICalendarAgenda(vCalendarNew);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            calendar.setSkin(new CustomEightDaySkin(calendar));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            disableMouseInteraction(calendar);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            calendarPlaceholder.getChildren().add(calendar);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static void disableMouseInteraction(ICalendarAgenda agenda) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setAllowDragging(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setAllowResize(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setActionCallback((Agenda.Appointment n) -\u003e null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setNewAppointmentCallback((Agenda.LocalDateTimeRange n) -\u003e null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setSelectedOneAppointmentCallback((Agenda.Appointment n) -\u003e null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setNewAppointmentDrawnCallback((Agenda.Appointment a) -\u003e null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setAppointmentChangedCallback((Agenda.Appointment a) -\u003e null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setOnMouseClicked((MouseEvent e) -\u003e {});"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setOnMousePressed((MouseEvent e) -\u003e {});"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setAllowDragging(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setOnMouseDragEntered((MouseDragEvent e) -\u003e {});"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setOnMouseDragExited((MouseDragEvent e) -\u003e {});"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setOnTouchPressed((TouchEvent e) -\u003e {});"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setOnMouseEntered((MouseEvent e) -\u003e {});"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        agenda.setOnMouseExited((MouseEvent e) -\u003e {});"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.history.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // Returns text from command history using up and down key"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        commandTextField.setOnKeyPressed(e -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            if (e.getCode().equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                commandTextField.setText(CommandHistory.peekPrev());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            if (e.getCode().equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                commandTextField.setText(CommandHistory.peekNext());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            CommandHistory.addUsedCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 13,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmptyVisitHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class EmptyVisitHistory extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String EMPTY_MESSAGE \u003d \"Patient has no past visitation records.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String FXML \u003d \"EmptyVisitHistoryWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Button button;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates new HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public EmptyVisitHistory(Stage root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        text.setText(EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates new HelpWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public EmptyVisitHistory() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.fine(\"Displaying help window for CliniCal.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if help window is being displayed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Hides help window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Focuses on help window."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Copies CliniCal\u0027s user guide link to clipboard."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w11-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        setEscAsClose();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private void setEscAsClose() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                Stage stage \u003d ((Stage) getRoot().getScene().getWindow());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                stage.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 14,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private CalendarDisplay calendarDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ProfileWindow profilePanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private VisitFormWindow visitWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private ProfileVisitPanel profileVisitPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private EmptyVisitHistory emptyVisitHistory;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private StackPane appointmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private StackPane calendarDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Consumer\u003cString\u003e executorConsumer \u003d s -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            executeCommand(s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        visitWindow \u003d new VisitFormWindow(windowEvent -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            resultDisplay.setFeedbackToUser(visitWindow.getFeedbackMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            visitWindow.flushParameters();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        profilePanel \u003d new ProfileWindow();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        profileVisitPanel \u003d new ProfileVisitPanel();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        emptyVisitHistory \u003d new EmptyVisitHistory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList(), executorConsumer);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCliniCalFilePath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        calendarDisplay \u003d new CalendarDisplay(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        calendarDisplayPlaceholder.getChildren().add(calendarDisplay.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        profilePanel.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitWindow.hide();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        profileVisitPanel.hide();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Displays the visit window."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * If it is already open, focus on the visit window."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void handleDisplayVisit() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        if (profileVisitPanel.isShowing()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            profileVisitPanel.hide();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!visitWindow.isShowing()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            visitWindow.show();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            visitWindow.focus();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            visitWindow.focus();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Displays the empty visit window."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * If it is already open, focus on the empty visit window."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void handleEmptyVisitHistory() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!emptyVisitHistory.isShowing()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            emptyVisitHistory.show();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            emptyVisitHistory.focus();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Displays the patient profile panel."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * If it is already open, focus on the profile panel."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void handleProfilePanel() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!profilePanel.isShowing()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            profilePanel.show();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            profilePanel.focus();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int patientIndex \u003d commandResult.getPatientIndex();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String visitDate \u003d commandResult.getVisitDate();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int visitIndex \u003d commandResult.getVisitIndex();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Visit previousVisit \u003d commandResult.getPreviousVisit();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            ObservableList\u003cVisit\u003e observableHistory \u003d commandResult.getObservableVisitHistory();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Patient patient \u003d commandResult.getPatientProfile();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (commandResult.isAddVisit()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                visitWindow.setVisitDetails(logic, visitDate, patientIndex);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                handleDisplayVisit();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (commandResult.isEditVisit()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                visitWindow.setPreviousVisitDetails(logic, previousVisit, visitIndex, patientIndex);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                if (profileVisitPanel.isShowing()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    profileVisitPanel.hide();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                handleDisplayVisit();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (commandResult.isDisplayVisitHistory()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                if (observableHistory.isEmpty()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    if (profileVisitPanel.isShowing()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        profileVisitPanel.hide();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    handleEmptyVisitHistory();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (commandResult.isDisplayProfile()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                profilePanel.setup(patient, logic);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                handleProfilePanel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Check that there are no misspellings in your command, \""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"expecially in the prefixes!\\n\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 26,
      "Michaeliaaa": 3,
      "afroneth": 81,
      "eugene3231": 12,
      "-": 187,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.DragEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.Dragboard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.TransferMode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final Consumer\u003cString\u003e executor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ImageView profilePicture;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Label icNumber;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Label sex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Label bloodType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Label visitHistory;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private FlowPane allergies;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Creates a {@code PatientCode} with the given {@code Patient} and index to display."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex, Consumer\u003cString\u003e executor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.index \u003d displayedIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.executor \u003d executor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture thisProfilePic \u003d patient.getProfilePicture();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        File profilePic \u003d new File(thisProfilePic.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assert profilePic !\u003d null : \"Profile picture cannot be null\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(profilePic);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Image finalProfilePic \u003d new Image(fileInputStream);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            setupImageView(finalProfilePic, profilePicture);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            error.getMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        phone.setText(\"Phone: \" + patient.getPhone().value);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        icNumber.setText(\"NRIC: \" + patient.getIcNumber().value);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        address.setText(\"Address: \" + patient.getAddress().value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        email.setText(\"Email: \" + patient.getEmail().value);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        sex.setText(\"Sex: \" + patient.getSex().value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        bloodType.setText(\"Blood Type: \" + patient.getBloodType().type);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        visitHistory.setText(patient.getVisitHistory().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patient.getAllergies().stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.allergyName))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .forEach(tag -\u003e allergies.getChildren().add(new Label(tag.allergyName)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        cardPane.setStyle(\"-fx-background-color: \" + patient.getColorTag().cssColor + \";\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static void setupImageView(Image img, ImageView imgView) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        // Adopted from https://stackoverflow.com/a/43669816"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        double width \u003d img.getWidth();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        double height \u003d img.getHeight();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        double newMeasure \u003d Math.min(width, height);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        double x \u003d (width - newMeasure) / 2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        double y \u003d (height - newMeasure) / 2;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Rectangle2D rect \u003d new Rectangle2D(x, y, newMeasure, newMeasure);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        imgView.setViewport(rect);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        imgView.setImage(img);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void dragPictureOver(DragEvent event) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Dragboard dragboard \u003d event.getDragboard();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (dragboard.hasFiles()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            event.acceptTransferModes(TransferMode.COPY_OR_MOVE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            // Do nothing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private void dropPicture(DragEvent event) throws IOException, CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Dragboard dragboard \u003d event.getDragboard();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        List\u003cFile\u003e fileToTransfer \u003d dragboard.getFiles();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        File imageFile \u003d fileToTransfer.get(0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert imageFile !\u003d null : \"Profile picture cannot be null\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        executor.accept(\"addpicture \" + index + \" f/\" + imageFile.getCanonicalPath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 24,
      "Michaeliaaa": 11,
      "afroneth": 48,
      "-": 56,
      "gsmoon97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private ListView\u003cPatient\u003e patientListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final Consumer\u003cString\u003e executor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList, Consumer\u003cString\u003e executor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.executor \u003d executor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patientListView.setItems(patientList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    class PatientListViewCell extends ListCell\u003cPatient\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        protected void updateItem(Patient patient, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            super.updateItem(patient, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            if (empty || patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                setGraphic(new PatientCard(patient, getIndex() + 1, executor).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 5,
      "Michaeliaaa": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProfileVisitCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * A UI class to show parameters of a {@code Visit} object on the patient\u0027s {@code ProfileWindow}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ProfileVisitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String FXML \u003d \"ProfileVisitCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public final Visit visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public final String visitDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String prescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private HBox profileVisitCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Label profileDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Label profileDiagnosis;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Label profilePrescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Label profileComment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates a ProfileVisitCard object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public ProfileVisitCard(Visit visit, String visitIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.id \u003d visitIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitDate \u003d visit.getVisitDate().format(formatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.diagnosis \u003d visit.getDiagnosis();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.prescription \u003d visit.getPrescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.comment \u003d visit.getComment();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        profileDate.setText(\"Visitation Log \" + id + \" on [\" + visitDate + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        setParameter(diagnosis, profileDiagnosis);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        setParameter(prescription, profilePrescription);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        setParameter(comment, profileComment);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sets the specified parameter in {@code ProfileVisitCard}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param visitParameter Patient field to display"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param label {@code Label} object to represent specified patient field"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void setParameter(String visitParameter, Label label) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (label \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!(visitParameter.isBlank() || visitParameter \u003d\u003d null)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            label.setText(visitParameter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            label.setText(\"-\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!(other instanceof ProfileVisitCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfileVisitCard card \u003d (ProfileVisitCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this.visitDate.equals(card.visitDate) \u0026\u0026 visit.equals(card.visit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 85,
      "eugene3231": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProfileVisitPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Panel containing the list of visits."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class ProfileVisitPanel extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final String FXML \u003d \"ProfileVisitPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ListView\u003cVisit\u003e visitHistoryView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Creates a ProfileVisitPanel object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public ProfileVisitPanel(Stage root) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        setup(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Creates a new profile visit panel."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public ProfileVisitPanel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setup(ObservableList\u003cVisit\u003e visitHistory) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitHistoryView.setItems(visitHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitHistoryView.setCellFactory(listView -\u003e new VisitHistoryViewCell());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Class to display {@code Visit} using {@code VisitHistoryViewCell}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    class VisitHistoryViewCell extends ListCell\u003cVisit\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        protected void updateItem(Visit visit, boolean empty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            super.updateItem(visit, empty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (visit \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                setGraphic(new ProfileVisitCard(visit, String.valueOf(getIndex() + 1)).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Displays the ProfileVisitPanel window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.fine(\"Displaying visitation log.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().setAlwaysOnTop(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            KeyCode userInput \u003d event.getCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (userInput \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                this.hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the ProfileVisitPanel window is being displayed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Hides the ProfileVisitPanel window."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Focuses on the ProfileVisitPanel window."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 96,
      "eugene3231": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProfileWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.util.PatientProfileUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Popup window displaying patient\u0027s parameters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ProfileWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String FXML \u003d \"ProfileWindow.fxml\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProfileWindow.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea allergy;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ListView\u003cVisit\u003e visitHistory;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea icNumber;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea sex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea bloodType;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ImageView profilePicture;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Creates a ProfileWindow object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ProfileWindow() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.getRoot().initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            KeyCode userInput \u003d event.getCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (userInput \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                logger.info(\"User pressed \u0027ESC\u0027. Profile Panel closing..\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                getRoot().hide();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                logger.info(\"Profile Panel successfully closed.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Creates a ProfileWindow object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ProfileWindow(Stage root) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        populateVisitHistory(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void mouseClickClose(MouseEvent e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Label exitLabel \u003d (Label) e.getSource();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        exitLabel.setUnderline(true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void mouseExit(MouseEvent e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Label exitLabel \u003d (Label) e.getSource();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        exitLabel.setUnderline(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void mouseEnterClose(MouseEvent e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.info(\"User pressed \u0027close\u0027. Profile panel closing..\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.info(\"Profile panel successfully closed.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Fills the Profile Window with the parameters from the specified patient."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param patient Patient to display in the Profile Window"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setup(Patient patient, Logic logic) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert patient !\u003d null || logic !\u003d null : \"Patient and logic cannot be null\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Name patientName \u003d patient.getName();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Set\u003cAllergy\u003e patientAllergy \u003d patient.getAllergies();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Phone patientPhone \u003d patient.getPhone();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Email patientEmail \u003d patient.getEmail();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Address patientAddress \u003d patient.getAddress();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        BloodType patientBloodType \u003d patient.getBloodType();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Sex patientSex \u003d patient.getSex();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        IcNumber patientIcNumber \u003d patient.getIcNumber();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        name.setText(PatientProfileUtil.convertNameToString(patientName));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        allergy.setText(PatientProfileUtil.convertAllergiesToString(patientAllergy));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        phone.setText(PatientProfileUtil.convertPhoneToString(patientPhone));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        email.setText(PatientProfileUtil.convertEmailToString(patientEmail));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        address.setText(PatientProfileUtil.convertAddressToString(patientAddress));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        bloodType.setText(PatientProfileUtil.convertBloodTypeToString(patientBloodType));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        sex.setText(PatientProfileUtil.convertSexToString(patientSex));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        icNumber.setText(PatientProfileUtil.convertIcToString(patientIcNumber));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture thisProfilePic \u003d patient.getProfilePicture();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        File profilePic \u003d new File(thisProfilePic.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assert profilePic !\u003d null : \"Profile picture cannot be null\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(profilePic);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Image finalProfilePic \u003d new Image(fileInputStream);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            profilePicture.setImage(finalProfilePic);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            error.getMessage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        VisitHistory visitHistory \u003d patient.getVisitHistory();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cVisit\u003e observableHistory \u003d visitHistory.getObservableVisits();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        populateVisitHistory(observableHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Fills profile window with patient\u0027s visit history."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param observableHistory Observable list of patient\u0027s visit history."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void populateVisitHistory(ObservableList\u003cVisit\u003e observableHistory) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitHistory.setItems(observableHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        visitHistory.setCellFactory(listView -\u003e new ProfileVisitHistoryCell());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Class to display {@code Visit} using a {@code ProfileVisitCard}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    class ProfileVisitHistoryCell extends ListCell\u003cVisit\u003e {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        protected void updateItem(Visit visit, boolean empty) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            super.updateItem(visit, empty);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (visit \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                ProfileVisitCard visitPanel \u003d new ProfileVisitCard(visit, String.valueOf(getIndex() + 1));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                setGraphic(visitPanel.getRoot());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Displays the Profile Panel."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.info(\"Showing Profile Panel\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if ProfileWindow is being displayed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Hides the ProfileWindow."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Focuses on ProfileWindow."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 228,
      "eugene3231": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/stethoscope.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VisitFormWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import javafx.scene.input.KeyCodeCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.SaveVisitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Instantiates a window for logging visit details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "public class VisitFormWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final String FXML \u003d \"VisitFormWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int INVALID_VISIT_INDEX \u003d -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea diagnosis;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea prescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextArea comment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Button button;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String visitDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String feedbackMessage \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private int visitIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates VisitFormWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param root Stage to use for VisitFormWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public VisitFormWindow(EventHandler\u003cWindowEvent\u003e e, Stage root) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        root.setOnHidden(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates VisitFormWindow."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public VisitFormWindow(EventHandler\u003cWindowEvent\u003e e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this(e, new Stage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Displays VisitFormWindow."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        logger.fine(\"Displaying Visit Form Window..\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            KeyCode userInput \u003d event.getCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (userInput \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                this.hide();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if VisitFormWindow is being displayed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Hides VisitFormWindow."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Removes all parameters in VisitFormWindow."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void flushParameters() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        prescription.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        diagnosis.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        comment.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Focuses on the Diagnosis tab in VisitFormWindow."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        diagnosis.requestFocus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Saves visit and exits VisitFormWindow."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected void saveVisit(ActionEvent actionEvent) throws CommandException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String prescriptionString \u003d prescription.getText();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String diagnosisString \u003d diagnosis.getText();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String commentString \u003d comment.getText();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        SaveVisitCommand saveCommand \u003d new SaveVisitCommand(patientIndex, visitDate, diagnosisString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            prescriptionString, commentString, visitIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult commandResult \u003d logic.execute(saveCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.feedbackMessage \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.hide();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.feedbackMessage \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setVisitDetails(Logic logic, String visitDate, int patientIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitDate \u003d visitDate;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitIndex \u003d INVALID_VISIT_INDEX;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setPreviousVisitDetails(Logic logic, Visit visit, int visitIndex, int patientIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitIndex \u003d visitIndex;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.visitDate \u003d visit.getVisitDate().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String prescriptionToSet \u003d visit.getPrescription();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String diagnosisToSet \u003d visit.getDiagnosis();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String commentToSet \u003d visit.getComment();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        prescription.setText(prescriptionToSet);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        diagnosis.setText(diagnosisToSet);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        comment.setText(commentToSet);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        setAcceleratorForSaving(button);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void setAcceleratorForSaving(Button button) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (button \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            System.err.println(\"Button is null.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert button !\u003d null : \"Button cannot be null.\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (button.getScene() !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            // Do nothing."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new IllegalArgumentException(\"setSaveAccelerator must be called when a button is attached \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    + \"to a scene\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        button.getScene().getAccelerators().put(new KeyCodeCombination(KeyCode.S, KeyCodeCombination.CONTROL_DOWN),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            new Runnable() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                @FXML public void run() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    button.fire();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            });"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String getFeedbackMessage() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this.feedbackMessage;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 178,
      "eugene3231": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/skin/CustomEightDaySkin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Copyright (c) 2011-2020, JFXtras"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * All rights reserved."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Redistribution and use in source and binary forms, with or without"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * modification, are permitted provided that the following conditions are met:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *    Redistributions of source code must retain the above copyright"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *       notice, this list of conditions and the following disclaimer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *    Redistributions in binary form must reproduce the above copyright"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *       notice, this list of conditions and the following disclaimer in the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *       documentation and/or other materials provided with the distribution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *    Neither the name of the organization nor the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *       names of its contributors may be used to endorse or promote products"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *       derived from this software without specific prior written permission."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * DISCLAIMED. IN NO EVENT SHALL \u003cCOPYRIGHT HOLDER\u003e BE LIABLE FOR ANY"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.ui.skin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author ktaekwon000-reused"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from jfxtras library with minor modification"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.css.CssMetaData;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.css.SimpleStyleableObjectProperty;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.css.Styleable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.SkinBase;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Slider;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import jfxtras.css.CssMetaDataForSkinProperty;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import jfxtras.css.converters.IntegerConverter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import jfxtras.internal.scene.control.skin.agenda.base24hour.AgendaSkinTimeScale24HourAbstract;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import jfxtras.scene.control.agenda.Agenda;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Tom Eugelink"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class CustomEightDaySkin extends AgendaSkinTimeScale24HourAbstract\u003cCustomEightDaySkin\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CustomEightDaySkin(Agenda control) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(control);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    final private int daysBackDefault \u003d -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    final private int daysForwardDefault \u003d 6;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void reconstruct() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super.reconstruct();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assign a calendar to each day, so it knows what it must draw."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003cLocalDate\u003e determineDisplayedLocalDates()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // get slider positions"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        int lStartOffset \u003d daysBackDefault;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        int lEndOffset \u003d daysForwardDefault;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate lStartLocalDate \u003d getSkinnable().getDisplayedLocalDateTime().toLocalDate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // determine displayed calendars"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String lKey \u003d lStartOffset + \" / \"  + lEndOffset + \" / \" + lStartLocalDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!lKey.equals(displayedLocalDatesKey)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            // determine displayed calendars"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            displayedLocalDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d lStartOffset; i \u003c lEndOffset + 1; i++) { // + 1 \u003d always show today"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                displayedLocalDates.add(lStartLocalDate.plusDays(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            displayedLocalDatesKey \u003d lKey;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // done"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return displayedLocalDates;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private String displayedLocalDatesKey \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDate\u003e displayedLocalDates;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    // StyleableProperties"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * daysBeforeFurthestProperty"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ObjectProperty\u003cInteger\u003e daysBeforeFurthestProperty() { return daysBeforeFurthestProperty; }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cInteger\u003e daysBeforeFurthestProperty \u003d new SimpleStyleableObjectProperty\u003cInteger\u003e(StyleableProperties.DAYS_BEFORE_FURTHEST_CSSMETADATA, StyleableProperties.DAYS_BEFORE_FURTHEST_CSSMETADATA.getInitialValue(null)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t{ // anonymous constructor"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\taddListener( (invalidationEvent) -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t\tif (daysBeforeFurthestProperty.get() \u003e 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t\t\tdaysBeforeFurthestProperty.set(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t\t}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t});"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public final void setDaysBeforeFurthest(int value) { daysBeforeFurthestProperty.set(value); }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int getDaysBeforeFurthest() { return daysBeforeFurthestProperty.get(); }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public final CustomEightDaySkin withDaysBeforeFurthest(int value) { setDaysBeforeFurthest(value); return this; }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * daysAfterFurthestProperty"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ObjectProperty\u003cInteger\u003e daysAfterFurthestProperty() { return daysAfterFurthestProperty; }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cInteger\u003e daysAfterFurthestProperty \u003d new SimpleStyleableObjectProperty\u003cInteger\u003e(StyleableProperties.DAYS_AFTER_FURTHEST_CSSMETADATA, StyleableProperties.DAYS_AFTER_FURTHEST_CSSMETADATA.getInitialValue(null)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t{ // anonymous constructor"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\taddListener( (invalidationEvent) -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t\tif (daysAfterFurthestProperty.get() \u003c 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t\t\tdaysAfterFurthestProperty.set(0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t\t}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t\t});"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "//\t\t}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public final void setDaysAfterFurthest(int value) { daysAfterFurthestProperty.set(value); }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int getDaysAfterFurthest() { return daysAfterFurthestProperty.get(); }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public final CustomEightDaySkin withDaysAfterFurthest(int value) { setDaysAfterFurthest(value); return this; }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    // -------------------------"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class StyleableProperties"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private static final CssMetaData\u003cAgenda, Integer\u003e DAYS_BEFORE_FURTHEST_CSSMETADATA \u003d new CssMetaDataForSkinProperty\u003cAgenda, CustomEightDaySkin, Integer\u003e(\"-fxx-days-before-furthest\", IntegerConverter.getInstance(), -9 ) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            protected ObjectProperty\u003cInteger\u003e getProperty(CustomEightDaySkin s) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                return s.daysBeforeFurthestProperty;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private static final CssMetaData\u003cAgenda, Integer\u003e DAYS_AFTER_FURTHEST_CSSMETADATA \u003d new CssMetaDataForSkinProperty\u003cAgenda, CustomEightDaySkin, Integer\u003e(\"-fxx-days-after-furthest\", IntegerConverter.getInstance(), 9 ) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            protected ObjectProperty\u003cInteger\u003e getProperty(CustomEightDaySkin s) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                return s.daysAfterFurthestProperty;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private static final List\u003cCssMetaData\u003c? extends Styleable, ?\u003e\u003e STYLEABLES;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        static  {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            final List\u003cCssMetaData\u003c? extends Styleable, ?\u003e\u003e classCssMetaData \u003d new ArrayList\u003cCssMetaData\u003c? extends Styleable, ?\u003e\u003e(AgendaSkinTimeScale24HourAbstract.getClassCssMetaData());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            classCssMetaData.add(DAYS_BEFORE_FURTHEST_CSSMETADATA);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            classCssMetaData.add(DAYS_AFTER_FURTHEST_CSSMETADATA);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            STYLEABLES \u003d Collections.unmodifiableList(classCssMetaData);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The CssMetaData associated with this class, which may include the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * CssMetaData of its super classes."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cCssMetaData\u003c? extends Styleable, ?\u003e\u003e getClassCssMetaData() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return StyleableProperties.STYLEABLES;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method should delegate to {@link Node#getClassCssMetaData()} so that"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * a Node\u0027s CssMetaData can be accessed without the need for reflection."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The CssMetaData associated with this node, which may include the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * CssMetaData of its super classes."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCssMetaData\u003c? extends Styleable, ?\u003e\u003e getCssMetaData() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClassCssMetaData();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 28,
      "-": 155
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003cHBox id\u003d\"appointmentCardPane\" fx:id\u003d\"appointmentCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            \u003cLabel fx:id\u003d\"icNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$icNumber\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$duration\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 33,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "  \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 8
    }
  },
  {
    "path": "src/main/resources/view/CalendarDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import jfxtras.scene.control.agenda.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003cStackPane fx:id\u003d\"calendarPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 21
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ".label-bright-shortcuts {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    -fx-font-size: 8pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "#filterField, #patientListPanel, #patientWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "#allergies {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "#allergies .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".text-area .scroll-bar:vertical {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-pref-width: 1;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".text-area .scroll-bar:horizontal {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-pref-height: 1;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 11,
      "Michaeliaaa": 1,
      "eugene3231": 7,
      "-": 347,
      "gsmoon97": 2
    }
  },
  {
    "path": "src/main/resources/view/EmptyVisitHistoryWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cImage url\u003d\"@/images/info_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cLabel fx:id\u003d\"text\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cButton fx:id\u003d\"button\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Back\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "afroneth": 39
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/* Following css was edited from https://stackoverflow.com/questions/19788661/change-javafx-tab-default-look */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".tab-pane"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".tab{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".tab-pane .tab"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/* The following CSS is from jfxtras source code. Pasted for modification. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-font-family: \"Roboto Condensed Light\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .Week {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: WHITE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .HourLabel {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: BLACK;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .HourLine {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: LIGHTGRAY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .HalfHourLine {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: LIGHTGRAY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke-dash-array: 4 4 4 4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .DayHeader {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-color:LIGHTGRAY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-width: 0px 0px 0px 1px;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: WHITE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .DayHeader .weekend {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-text-fill: BLACK;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "*/"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .Day {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-color:LIGHTGRAY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-width: 0px 0px 0px 1px;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .weekend {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: #eeeeee90;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .today {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .Appointment {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-color: WHITE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .AppointmentTimeLabel {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: BLACK;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .AppointmentLabel {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: BLACK;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group0 { -fx-background-color: #AC725E; -fx-fill: #AC725E; }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group1 { -fx-background-color: #D06B64; -fx-fill: #D06B64; }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group2 { -fx-background-color: #F83A22; -fx-fill: #F83A22; }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group3 { -fx-background-color: #FA573C; -fx-fill: #FA573C; }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group4 { -fx-background-color: #FF7537; -fx-fill: #FF7537; }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group5 { -fx-background-color: #FFAD46; -fx-fill: #FFAD46; }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group6 { -fx-background-color: #42D692; -fx-fill: #42D692; }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group7 { -fx-background-color: #16A765; -fx-fill: #16A765; }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group8 { -fx-background-color: #7BD148; -fx-fill: #7BD148; }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group9 { -fx-background-color: #B3DC6C; -fx-fill: #B3DC6C; }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group10 { -fx-background-color: #FBE983; -fx-fill: #FBE983; }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group11 { -fx-background-color: #FAD165; -fx-fill: #FAD165; }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group12 { -fx-background-color: #92E1C0; -fx-fill: #92E1C0; }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group13 { -fx-background-color: #9FE1E7; -fx-fill: #9FE1E7; }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group14 { -fx-background-color: #9FC6E7; -fx-fill: #9FC6E7; }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group15 { -fx-background-color: #4986E7; -fx-fill: #4986E7; }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group16 { -fx-background-color: #9A9CFF; -fx-fill: #9A9CFF; }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group17 { -fx-background-color: #B99AFF; -fx-fill: #B99AFF; }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group18 { -fx-background-color: #C2C2C2; -fx-fill: #C2C2C2; }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group19 { -fx-background-color: #CABDBF; -fx-fill: #CABDBF; }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group20 { -fx-background-color: #CCA6AC; -fx-fill: #CCA6AC; }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group21 { -fx-background-color: #F691B2; -fx-fill: #F691B2; }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group22 { -fx-background-color: #CD74E6; -fx-fill: #CD74E6; }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group23 { -fx-background-color: #A47AE2; -fx-fill: #A47AE2; }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/* same colors as the bar chart"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group0 { -fx-background-color: #f9d900; }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group1 { -fx-background-color: #a9e200; }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group2 { -fx-background-color: #22bad9; }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group3 { -fx-background-color: #0181e2; }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group4 { -fx-background-color: #2f357f; }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group5 { -fx-background-color: #860061; }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group6 { -fx-background-color: #c62b00; }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".group7 { -fx-background-color: #ff5700; }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .DurationDragger {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: #00000040;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .MenuIcon {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: #00000040;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .GhostRectangle {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: #00000080;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke-width: 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke-dash-array: 4 4 4 4;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .Selected {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -xfx-color: -fx-focused-base;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-insets: -1.4, 0, 1, 2;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-radius: 6.4, 5, 4, 3;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .Now {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: #FF000088;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: WHITE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".Agenda .History {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-fill: #FFFFFF70;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".AgendaPopup {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-insets: 0 0 -1 0,0,1,2;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-background-radius: 5,5,4,3;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-padding: 0.766667em 0.733333em 0.75em 0.733333em;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-text-fill: -fx-text-base-color;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".AgendaPopup .AppointmentGroups {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ".AgendaPopup .AppointmentGroup {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-color: WHITE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 187,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1200\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CliniCal\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \u003cImage url\u003d\"@/images/stethoscope.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cTabPane prefWidth\u003d\"340\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "              \u003ctabs\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003cTab text\u003d\"Overview\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    \u003cHBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                      \u003cVBox fx:id\u003d\"appointmentList\" minWidth\u003d\"250\" prefWidth\u003d\"250\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"calendarDisplayPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"900\" minWidth\u003d\"900\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003cTab text\u003d\"Patients\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    \u003cVBox fx:id\u003d\"patientList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"460.0\" minHeight\u003d\"120.0\" prefHeight\u003d\"190.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 21,
      "Michaeliaaa": 1,
      "eugene3231": 12,
      "-": 47,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" onDragOver\u003d\"#dragPictureOver\" onDragDropped\u003d\"#dropPicture\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  \u003cImageView fx:id\u003d\"profilePicture\" fitHeight\u003d\"240.0\" fitWidth\u003d\"240.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"allergies\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "      \u003cLabel fx:id\u003d\"icNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$icNumber\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "      \u003cLabel fx:id\u003d\"sex\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$sex\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "      \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "      \u003cLabel fx:id\u003d\"visitHistory\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$visitHistory\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afroneth": 3,
      "-": 34,
      "gsmoon97": 5
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ProfileVisitCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cHBox fx:id\u003d\"profileVisitCard\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cVBox id\u003d\"profileVisitViewCell\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"isProfile-list-cell\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cLabel fx:id\u003d\"profileDate\" maxWidth\u003d\"500.0\" styleClass\u003d\"cell_med_label_ul\" text\u003d\"\\$date\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label_bold\" text\u003d\"Diagnosis:\" underline\u003d\"true\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cLabel fx:id\u003d\"profileDiagnosis\" maxWidth\u003d\"500.0\" styleClass\u003d\"text-field-visit\" text\u003d\"\\$diagnosis\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label_bold\" text\u003d\"Prescription:\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            \u003cLabel fx:id\u003d\"profilePrescription\" maxWidth\u003d\"500.0\" styleClass\u003d\"text-field-visit\" text\u003d\"\\$prescription\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label_bold\" text\u003d\"Remarks:\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cLabel fx:id\u003d\"profileComment\" maxWidth\u003d\"500.0\" styleClass\u003d\"text-field-visit\" text\u003d\"\\$remarks\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afroneth": 60,
      "eugene3231": 2
    }
  },
  {
    "path": "src/main/resources/view/ProfileVisitPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cfx:root minWidth\u003d\"450\" resizable\u003d\"false\" title\u003d\"Visitation List for Edit/Delete\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cImage url\u003d\"@/images/stethoscope.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cVBox styleClass\u003d\"background\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cLabel styleClass\u003d\"label-bright-header\" text\u003d\"List of Visits\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cListView fx:id\u003d\"visitHistoryView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "afroneth": 33
    }
  },
  {
    "path": "src/main/resources/view/ProfileWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003cfx:root fx:id\u003d\"Profile\" minHeight\u003d\"660\" minWidth\u003d\"650\" title\u003d\"Patient Profile\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \u003cImage url\u003d\"@/images/stethoscope.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "         \u003cVBox fx:id\u003d\"profilePanel\" minHeight\u003d\"750.0\" minWidth\u003d\"650.0\" prefHeight\u003d\"750.0\" prefWidth\u003d\"650.0\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "               \u003cHBox maxHeight\u003d\"120.0\" minHeight\u003d\"120.0\" prefHeight\u003d\"120.0\" prefWidth\u003d\"782.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003cVBox maxHeight\u003d\"120.0\" maxWidth\u003d\"55.0\" minHeight\u003d\"120.0\" minWidth\u003d\"55.0\" prefHeight\u003d\"120.0\" prefWidth\u003d\"874.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"RIGHT\" maxWidth\u003d\"39.0\" minWidth\u003d\"39.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"39.0\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003cHBox maxWidth\u003d\"500.0\" minWidth\u003d\"500.0\" prefHeight\u003d\"115.0\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"RIGHT\" maxHeight\u003d\"120.0\" maxWidth\u003d\"439.0\" minHeight\u003d\"120.0\" minWidth\u003d\"123.0\" prefHeight\u003d\"120.0\" prefWidth\u003d\"189.0\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cImageView fx:id\u003d\"profilePicture\" fitHeight\u003d\"113.0\" fitWidth\u003d\"159.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                 \u003cInsets /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"RIGHT\" maxHeight\u003d\"120.0\" maxWidth\u003d\"200.0\" minHeight\u003d\"120.0\" minWidth\u003d\"113.0\" prefHeight\u003d\"120.0\" prefWidth\u003d\"118.0\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003cVBox maxHeight\u003d\"120.0\" minHeight\u003d\"120.0\" prefHeight\u003d\"120.0\" prefWidth\u003d\"1024.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cLabel fx:id\u003d\"exitButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"RIGHT\" maxWidth\u003d\"250.0\" minWidth\u003d\"41.0\" onMouseClicked\u003d\"#mouseEnterClose\" onMouseEntered\u003d\"#mouseClickClose\" onMouseExited\u003d\"#mouseExit\" prefHeight\u003d\"21.0\" prefWidth\u003d\"250.0\" styleClass\u003d\"label-bright\" text\u003d\"close\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "               \u003cVBox prefHeight\u003d\"247.0\" prefWidth\u003d\"615.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" maxWidth\u003d\"198.0\" minWidth\u003d\"125.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"Name: \" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"name\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" maxWidth\u003d\"198.0\" minWidth\u003d\"125.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"Phone:\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                 \u003cInsets /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                              \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"phone\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" maxWidth\u003d\"198.0\" minWidth\u003d\"125.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"IC:\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"icNumber\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" maxWidth\u003d\"198.0\" minWidth\u003d\"125.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"Email:\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"email\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" maxWidth\u003d\"198.0\" minWidth\u003d\"125.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"Sex:\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"sex\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" maxWidth\u003d\"198.0\" minWidth\u003d\"125.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"Blood type:\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"bloodType\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" maxWidth\u003d\"198.0\" minWidth\u003d\"125.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"Allergies:\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"allergy\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\"\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cLabel maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" minWidth\u003d\"125.0\" maxWidth\u003d\"198.0\" prefWidth\u003d\"450.0\" styleClass\u003d\"label-bright\" text\u003d\"Address:\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"address\" editable\u003d\"false\" maxHeight\u003d\"35\" minHeight\u003d\"35\" prefHeight\u003d\"35\" styleClass\u003d\"text-field\" text\u003d\"nil\" /\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "               \u003cLabel prefHeight\u003d\"44.0\" prefWidth\u003d\"114.0\" style\u003d\"-fx-font-size: 20;\" styleClass\u003d\"label-header\" text\u003d\"Visits:\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                     \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "               \u003cListView fx:id\u003d\"visitHistory\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-border-color: white;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "               \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "               \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 26,
      "afroneth": 108,
      "eugene3231": 44
    }
  },
  {
    "path": "src/main/resources/view/VisitFormWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "\u003cfx:root minWidth\u003d\"450.0\" resizable\u003d\"false\" title\u003d\"Visitation Log\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cImage url\u003d\"@/images/stethoscope.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"275.0\" minWidth\u003d\"308.0\" prefWidth\u003d\"503.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003cVBox fx:id\u003d\"visitRecordForm\" layoutY\u003d\"5.0\" styleClass\u003d\"background\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003cHBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                  \u003cLabel prefHeight\u003d\"21.0\" prefWidth\u003d\"122.0\" styleClass\u003d\"label-bright\" text\u003d\"Diagnosis:\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                            \u003cTextArea fx:id\u003d\"diagnosis\" prefHeight\u003d\"65.0\" prefWidth\u003d\"483.0\" promptText\u003d\"Fill in patient\u0027s diagnosis here\u0026#13;\u0026#10;  e.g. Fever, Flu for past 3 days\" styleClass\u003d\"text-field-visit\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003c/VBox.margin\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                            \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Prescription:\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                            \u003cTextArea fx:id\u003d\"prescription\" prefHeight\u003d\"65.0\" prefWidth\u003d\"483.0\" promptText\u003d\"Fill in patient\u0027s prescription here\u0026#13;\u0026#10;    e.g. Paracetamol\" styleClass\u003d\"text-field-visit\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003c/VBox.margin\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Comments:\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003cTextArea fx:id\u003d\"comment\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" promptText\u003d\"Fill in any additional comments here\u0026#13;\u0026#10;    e.g. Has difficulty swallowing tablets and pills\" styleClass\u003d\"text-field-visit\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003c/VBox.margin\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003cHBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                      \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"21.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"label-bright-shortcuts\" text\u003d\"Previous box (SHIFT + Tab)\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                    \u003cButton fx:id\u003d\"button\" minWidth\u003d\"144.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#saveVisit\" prefWidth\u003d\"144.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                              \u003cgraphic\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                 \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" minWidth\u003d\"126.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"126.0\" styleClass\u003d\"label-bright\" text\u003d\"Save (Ctrl + S)\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                              \u003c/graphic\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                      \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"21.0\" prefWidth\u003d\"198.0\" styleClass\u003d\"label-bright-shortcuts\" text\u003d\"Next box (CTRL + Tab)\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "afroneth": 55,
      "eugene3231": 24
    }
  },
  {
    "path": "src/test/data/JsonCliniCalStorageTest/invalidAndValidPatientCliniCal.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    \"name\": \"Valid Patient\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S1234567A\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    \"name\": \"Patient With Invalid Phone Field\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S1234567A\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ ],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"appointments\" : []"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 2,
      "Michaeliaaa": 2,
      "afroneth": 3,
      "eugene3231": 2,
      "-": 5,
      "gsmoon97": 12
    }
  },
  {
    "path": "src/test/data/JsonCliniCalStorageTest/invalidPatientCliniCal.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    \"name\": \"Patient with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S1234567A\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"red\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"appointments\" : []"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "Michaeliaaa": 1,
      "afroneth": 1,
      "eugene3231": 1,
      "-": 4,
      "gsmoon97": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableCliniCalTest/duplicatePatientCliniCal.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S1234567A\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\": [ \"penicillin\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"color\" : \"green\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S1234567A\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"green\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"appointments\" : []"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "Michaeliaaa": 1,
      "afroneth": 1,
      "-": 8,
      "gsmoon97": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableCliniCalTest/invalidPatientCliniCal.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S1234567A\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"appointments\" : []"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "Michaeliaaa": 1,
      "eugene3231": 1,
      "-": 5,
      "gsmoon97": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableCliniCalTest/typicalPatientsCliniCal.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"_comment\": \"CliniCal save file which contains the same Patient and Appointment values as in TypicalPatients#getTypicalCliniCal()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S4623454A\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"visitDate\" : \"15/05/2020\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"patientName\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"diagnosis\" : \"Headache\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"prescription\" : \"Aspirin\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"comment\" : \"No need for follow up\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\" : [ \"aspirin\" ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S7435696B\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"visitDate\" : \"27/03/2019\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"patientName\" : \"Benson Meier\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"diagnosis\" : \"Depression\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"prescription\" : \"Antifreeze\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"comment\" : \"\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"B+\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\" : [ \"penicillin\", \"sulfa\" ],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S8864424C\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"visitDate\" : \"05/10/2018\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"patientName\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"diagnosis\" : \"Obesity\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"prescription\" : \"Peloton\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"comment\" : \"Need to check daily\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"O+\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"G3011359D\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"visitDate\" : \"10/12/2017\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"patientName\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"diagnosis\" : \"Back Pain\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"prescription\" : \"Painkiller\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"comment\" : \"\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"O+\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\" : [ \"aspirin\" ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S6131369E\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"visitDate\" : \"18/08/2016\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"patientName\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"diagnosis\" : \"COVID-19\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"prescription\" : \"Remdesivir\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"comment\" : \"Need to be quarantined immediately\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"AB+\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S6787656F\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"visitDate\" : \"25/01/2017\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"patientName\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"diagnosis\" : \"Fever\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"prescription\" : \"Paracetamol\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"comment\" : \"Dislikes swallowing pills\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"icNumber\": \"S2444153G\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    \"visitHistory\" : [ {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"visitDate\" : \"13/09/2018\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"patientName\" : \"George Best\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"diagnosis\" : \"Sprained ankle\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"prescription\" : \"Painkillers\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "      \"comment\" : \"Follow up in 2 weeks\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"profilePicture\" : \"data/stock_picture.png\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"bloodType\": \"B+\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \"color\" : \"None\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"appointments\" : []"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 7,
      "Michaeliaaa": 1,
      "eugene3231": 49,
      "-": 29,
      "gsmoon97": 45
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"cliniCalFilePath\" : \"clinical.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "  \"cliniCalFilePath\" : \"clinical.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/stethoscope.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/PatientProfileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Tests methods for PatientProfileUtil."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class PatientProfileUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Tests methods that converts patient\u0027s parameters into String."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * We have a total of 3 equivalence partitions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * We partitioned null values as one invalid equivalence partition (EP1)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Valid parameters as one valid equivalence partition (EP2)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Empty (but not null) values as one valid equivalence partition (EP3)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * EP3 is only designed for parameters that can be empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertNameToString --------------------"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertNameToString_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Name patientName \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s name cannot be null.\", ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertNameToString(patientName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertNameToString_validNameInput_correctResult() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Name name \u003d new Name(\"Bob the Builder\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"Bob the Builder\", PatientProfileUtil.convertNameToString(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertAllergiesToString --------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertAllergiesToString_nullAllergySet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s allergies set cannot be null.\", ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertAllergiesToString(allergySet));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertAllergiesToString_validAllergySet_correctResult() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        allergySet.add(new Allergy(\"Paracetamol\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"Paracetamol; \", PatientProfileUtil.convertAllergiesToString(allergySet));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 3 - Valid parameters that are empty"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertAllergiesToString_validEmptyAllergySet_correctResult() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"-\", PatientProfileUtil.convertAllergiesToString(allergySet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertPhoneToString --------------------"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertPhoneToString_nullPhone_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Phone patientPhone \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s phone cannot be null.\", ()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertPhoneToString(patientPhone));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertPhoneToString_validPhoneInput_correctResult() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Phone patientPhone \u003d new Phone(\"94214567\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"94214567\", PatientProfileUtil.convertPhoneToString(patientPhone));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertEmailToString --------------------"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertEmailToString_nullEmail_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Email patientEmail \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s email cannot be null.\", ()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertEmailToString(patientEmail));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertEmailToString_validEmailInput_correctResult() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Email patientEmail \u003d new Email(\"bobthebuilder@hotmail.com\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"bobthebuilder@hotmail.com\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                PatientProfileUtil.convertEmailToString(patientEmail));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertAddressToString --------------------"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertAddressToString_nullAddress_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Address patientAddress \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s address cannot be null.\", ()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertAddressToString(patientAddress));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertAddressToString_validAddressInput_correctResult() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Address patientAddress \u003d new Address(\"123 High Lane\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"123 High Lane\", PatientProfileUtil.convertAddressToString(patientAddress));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertIcToString --------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertIcToString_nullIc_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        IcNumber patientIc \u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s IC number cannot be null.\", ()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertIcToString(patientIc));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertIcToString_validIcInput_correctResult() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        IcNumber patientIc \u003d new IcNumber(\"S9822413E\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"S9822413E\", PatientProfileUtil.convertIcToString(patientIc));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertBloodTypeToString --------------------"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertBloodTypeToString_nullBloodType_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        BloodType patientBloodType \u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s blood type cannot be null.\", ()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertBloodTypeToString(patientBloodType));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertBloodTypeToString_validBloodTypeInput_correctResult() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        BloodType patientBloodType \u003d new BloodType(\"A+\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"A+\", PatientProfileUtil.convertBloodTypeToString(patientBloodType));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    //-------------------- Tests for convertSexToString --------------------"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 1 - Null values"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertSexToString_nullSex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Sex patientSex \u003d null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, \"Patient\u0027s sex cannot be null.\", ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e PatientProfileUtil.convertSexToString(patientSex));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // EP 2 - Valid parameters"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void convertSexToString_validSexInput_correctResult() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Sex patientSex \u003d new Sex(\"F\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Assertions.assertEquals(\"F\", PatientProfileUtil.convertSexToString(patientSex));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Query word is subset of sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/VEventUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APP1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalVEvents.FIRST_VEVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalVEvents.SECOND_VEVENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalVEvents.VEVENT1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.VEventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class VEventUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //---------------- Tests for appsToVEventMapper --------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void appsToVEventMapper_nullAppointmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e VEventUtil.appsToVEventsMapper(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void appsToVEventMapper_list_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        List\u003cVEvent\u003e converted \u003d VEventUtil.appsToVEventsMapper(Collections.singletonList(APP1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        List\u003cVEvent\u003e expected \u003d Collections.singletonList(VEVENT1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(converted.size(), 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(VEventUtil.isSameVEvent(converted.get(0), expected.get(0)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //---------------- Tests for appToVEventMapper --------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void appToVEventMapper_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e VEventUtil.appToVEventMapper(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void appToVEventMapper_appointment_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        VEvent converted \u003d VEventUtil.appToVEventMapper(APP1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(VEventUtil.isSameVEvent(VEVENT1, converted));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //---------------- Tests for isSameVEvent --------------------------------------"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void isSameVEvent() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(VEventUtil.isSameVEvent(FIRST_VEVENT, FIRST_VEVENT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VEventUtil.isSameVEvent(FIRST_VEVENT, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different patient name -\u003e false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VEvent editedFirst \u003d new VEventBuilder(FIRST_VEVENT).withPatientName(VALID_PATIENT_NAME_SECOND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VEventUtil.isSameVEvent(FIRST_VEVENT, editedFirst));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different start time -\u003e false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new VEventBuilder(FIRST_VEVENT).withStartTime(VALID_START_TIME_SECOND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VEventUtil.isSameVEvent(FIRST_VEVENT, editedFirst));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different end time -\u003e false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new VEventBuilder(FIRST_VEVENT).withEndTime(VALID_END_TIME_SECOND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VEventUtil.isSameVEvent(FIRST_VEVENT, editedFirst));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different object, same patient name, start and end time -\u003e true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new VEventBuilder(SECOND_VEVENT).withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST).withEndTime(VALID_END_TIME_FIRST).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(VEventUtil.isSameVEvent(FIRST_VEVENT, editedFirst));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 21,
      "gsmoon97": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.storage.JsonCliniCalStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonCliniCalStorage cliniCalStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new JsonCliniCalStorage(temporaryFolder.resolve(\"cliniCal.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cliniCalStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runImageTransfer_invalidCommandFormat_throwsNullException() throws NullPointerException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withAllergies().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        File profilePic \u003d new File(\"f/data/stock_picture.png\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e logic.runImageTransfer(expectedPatient, profilePic));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_validCommandString_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_validCommandObject_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Command saveVisitCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertCommandObjectSuccess(saveVisitCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // Setup LogicManager with JsonCliniCalIoExceptionThrowingStub"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonCliniCalStorage cliniCalStorage \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new JsonCliniCalIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCliniCal.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cliniCalStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ICNUMBER_DESC_AMY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + SEX_DESC_AMY + BLOODTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withAllergies().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void getCliniCalFilePath_getFilePath_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getCliniCalFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void getCliniCal_getFilePath_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getCliniCal());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void getGuiSettings_getFilePath_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getGuiSettings());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void assertCommandObjectSuccess(Command inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                            Model expectedModel) throws CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static class JsonCliniCalIoExceptionThrowingStub extends JsonCliniCalStorage {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        private JsonCliniCalIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void saveCliniCal(ReadOnlyCliniCal cliniCal, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 8,
      "afroneth": 43,
      "-": 139,
      "gsmoon97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPatient), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient patientInList \u003d model.getCliniCal().getPatientList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(new AddCommand(patientInList), model, AddCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 9,
      "-": 32,
      "gsmoon97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public Path getCliniCalFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setCliniCalFilePath(Path cliniCalFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public void setCliniCal(ReadOnlyCliniCal cliniCal) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public ReadOnlyCliniCal getCliniCal() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public void commitCliniCal(String command) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public boolean canUndoCliniCal() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public void undoCliniCal() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public String getUndoCommand() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public String getRedoCommand() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public boolean canRedoCliniCal() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public void redoCliniCal() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        public ReadOnlyCliniCal getCliniCal() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            return new CliniCal();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        public void commitCliniCal(String command) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            // Called by AddCommand#execute"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 11,
      "Michaeliaaa": 54,
      "eugene3231": 35,
      "-": 157,
      "gsmoon97": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddProfilePictureCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class AddProfilePictureCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private File profilePicture \u003d new File(\"data/stock_picture.png\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Null filepath."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProfilePictureCommand(null,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                                                    INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Null patient index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProfilePictureCommand(profilePicture, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Out of bounds patient index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        AddProfilePictureCommand addProfilePictureCommand \u003d new AddProfilePictureCommand(profilePicture,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                                                         outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertCommandFailure(addProfilePictureCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Edits filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * but smaller than size of clinical"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Asserts that outOfBoundIndex is still in bounds of clinical list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCliniCal().getPatientList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        AddProfilePictureCommand addProfilePictureCommand \u003d new AddProfilePictureCommand(profilePicture,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                                outOfBoundIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertCommandFailure(addProfilePictureCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddVisitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class AddVisitCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String DATE_1 \u003d \"7/17/2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String DATE_2 \u003d \"8/18/2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ReadOnlyCliniCal sampleClinical \u003d TypicalPatients.getTypicalCliniCal();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Model model \u003d new ModelManager(sampleClinical, new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_nullVisit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitCommand(null, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_unfilteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int outOfBoundInt \u003d model.getFilteredPatientList().size() + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(outOfBoundInt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        AddVisitCommand addVisitCommand \u003d new AddVisitCommand(DATE_1, outOfBoundIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(addVisitCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Edits filtered patient list in the scenario where index is greater than size of filtered list, but"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * lesser than size of patient list in CliniCal"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_filteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfFirstPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfSecondPatient \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.showPatientAtIndex(model, indexOfFirstPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d indexOfSecondPatient;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Assert that outOfBoundIndex is still in bounds of size of patient list in CliniCal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ReadOnlyCliniCal modelClinical \u003d model.getCliniCal();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e sampleClinical \u003d modelClinical.getPatientList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfPatientList \u003d sampleClinical.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c sizeOfPatientList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        AddVisitCommand addVisitCommand \u003d new AddVisitCommand(DATE_1, outOfBoundIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(addVisitCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfFirstPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfSecondPatient \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        AddVisitCommand testCommand \u003d new AddVisitCommand(DATE_1, indexOfFirstPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Null value. Returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(testCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same object. Returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(testCommand.equals(new AddVisitCommand(DATE_1, indexOfFirstPatient)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different command. Returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(testCommand.equals(new ListCommand()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different index. Returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(testCommand.equals(new AddVisitCommand(DATE_1, indexOfSecondPatient)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different date. Returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(testCommand.equals(new AddVisitCommand(DATE_2, indexOfFirstPatient)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void execute_emptyCliniCal_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void execute_nonEmptyCliniCal_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedModel.setCliniCal(new CliniCal());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "gsmoon97": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearHistoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class ClearHistoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        ClearHistoryCommand clearHistoryCommand \u003d new ClearHistoryCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandSuccess(clearHistoryCommand, model, ClearHistoryCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                false, false)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // different idx value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // different idx value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null, null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                   1, 1)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // different idx value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null, null)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // different date value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", \"true\", 1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // different idx value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null, 1).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // different date value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", \"false\", 1).hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void getterMethods() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Test for all false parameters"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult firstCommand \u003d new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        false, false, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(firstCommand.isDisplayProfile(), false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(firstCommand.isAddVisit(), false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(firstCommand.isDisplayVisitHistory(), false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(firstCommand.isEditVisit(), false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(firstCommand.isExit(), false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(firstCommand.isShowHelp(), false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Test for display profile parameter"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult secondCommand \u003d new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                false, false, true, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(secondCommand.isDisplayProfile(), true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(secondCommand.isAddVisit(), false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(secondCommand.isDisplayVisitHistory(), false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(secondCommand.isEditVisit(), false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(secondCommand.isExit(), false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(secondCommand.isShowHelp(), false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(secondCommand.isDisplayProfile(), false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Test for valid visit date for patient with index 2"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult thirdCommand \u003d new CommandResult(\"feedback\", \"10/11/2020\", 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(thirdCommand.getPatientProfile(), TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(thirdCommand.getFeedbackToUser(), \"test\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(thirdCommand.getVisitIndex(), 10);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(thirdCommand.getPatientIndex(), 5);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(thirdCommand.getVisitDate(), \"9/11/2020\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertNotEquals(thirdCommand.getPreviousVisit(), new Visit(\"10/11/2020\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(thirdCommand.getPatientIndex(), 2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(thirdCommand.getVisitDate(), \"10/11/2020\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void showHelp() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"help\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(commandResult.isShowHelp(), false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"exit\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(commandResult.isShowHelp(), false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 68,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_PATIENTIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_PATIENTNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APP_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLORTAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ICNUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.model.appointment.AppointmentDateTime.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.EditAppointmentDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // for Patient"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_ICNUMBER_AMY \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_ICNUMBER_BOB \u003d \"S2222222B\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String VALID_PROFILE_PICTURE_AMY \u003d \"data/stock_picture.png\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String VALID_PROFILE_PICTURE_BOB \u003d \"data/stock_picture.png\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_SEX_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_SEX_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_BLOODTYPE_AMY \u003d \"A+\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_BLOODTYPE_BOB \u003d \"B+\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_ALLERGY_ASPIRIN \u003d \"aspirin\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_ALLERGY_PENICILLIN \u003d \"penicillin\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String VALID_COLORTAG_ORANGE \u003d \"orange\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String VALID_COLORTAG_RED \u003d \"red\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String ICNUMBER_DESC_AMY \u003d \" \" + PREFIX_ICNUMBER + VALID_ICNUMBER_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String ICNUMBER_DESC_BOB \u003d \" \" + PREFIX_ICNUMBER + VALID_ICNUMBER_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String PROFILE_PICTURE_DESC_AMY \u003d \" \" + PREFIX_FILE_PATH + VALID_PROFILE_PICTURE_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String PROFILE_PICTURE_DESC_BOB \u003d \" \" + PREFIX_FILE_PATH + VALID_PROFILE_PICTURE_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String SEX_DESC_AMY \u003d \" \" + PREFIX_SEX + VALID_SEX_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String SEX_DESC_BOB \u003d \" \" + PREFIX_SEX + VALID_SEX_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String BLOODTYPE_DESC_AMY \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String BLOODTYPE_DESC_BOB \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String ALLERGY_DESC_AMY \u003d \" \" + PREFIX_ALLERGY + VALID_ALLERGY_ASPIRIN;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String ALLERGY_DESC_BOB \u003d \" \" + PREFIX_ALLERGY + VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String COLORTAG_DESC_ORANGE \u003d \" \" + PREFIX_COLORTAG + VALID_COLORTAG_ORANGE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String COLORTAG_DESC_RED \u003d \" \" + PREFIX_COLORTAG + VALID_COLORTAG_RED;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_ICNUMBER_DESC \u003d \" \" + PREFIX_ICNUMBER"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"S1234567!\"; // \u0027!\u0027 not allowed in ic numbers"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_SEX_DESC \u003d \" \" + PREFIX_SEX + \"MF\"; // \u0027MF\u0027 not allowed in sex"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_BLOODTYPE_DESC \u003d \" \" + PREFIX_BLOODTYPE + \"C+\"; // \u0027C\u0027 not allowed in blood types"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_ALLERGY_DESC \u003d \" \" + PREFIX_ALLERGY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            + \"penicillin*\"; // \u0027*\u0027 not allowed in allergies"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String INVALID_PROFILE_PICTURE_AMY \u003d \"data/nosuchpictureexists.png\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String INVALID_COLORTAG_DESC \u003d \" \" + PREFIX_COLORTAG + \"gibberish\"; // non-color name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_FIRST;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_SECOND;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // for Visit"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final LocalDate VALID_VISITDATE_ONE \u003d LocalDate.of(2019, 3, 19);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final LocalDate VALID_VISITDATE_TWO \u003d LocalDate.of(2018, 7, 6);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_DIAGNOSIS_ONE \u003d \"Hyperlipidemia\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_DIAGNOSIS_TWO \u003d \"Reflux esophagitis\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_PRESCRIPTION_ONE \u003d \"Vicodin\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_PRESCRIPTION_TWO \u003d \"Synthroid\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_COMMENT_ONE \u003d \"Need immediate attention\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_COMMENT_TWO \u003d \"No need to follow up\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // for Appointment"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDSTART_1 \u003d LocalDateTime.now().plusDays(1).plusMinutes(10)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDEND_1 \u003d LocalDateTime.now().plusDays(1).plusMinutes(40)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDSTART_2 \u003d LocalDateTime.now().plusDays(1).plusMinutes(60)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALIDEND_2 \u003d LocalDateTime.now().plusDays(1).plusMinutes(100)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_PATIENT_NAME_FIRST \u003d \"Fiona Apple\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_PATIENT_NAME_SECOND \u003d \"Seth MacFarlane\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_PATIENT_IC_FIRST \u003d \"S9631111F\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_PATIENT_IC_SECOND \u003d \"G1984861R\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_START_TIME_FIRST \u003d VALIDSTART_1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_START_TIME_SECOND \u003d VALIDSTART_2;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_END_TIME_FIRST \u003d VALIDEND_1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_END_TIME_SECOND \u003d VALIDEND_2;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_DURATION_FIRST \u003d \"\" + Duration.between("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            LocalDateTime.parse(VALIDSTART_1, DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            LocalDateTime.parse(VALIDEND_1, DATE_TIME_FORMATTER)).toMinutes();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String VALID_DURATION_SECOND \u003d \"\" + Duration.between("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            LocalDateTime.parse(VALIDSTART_2, DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            LocalDateTime.parse(VALIDEND_2, DATE_TIME_FORMATTER)).toMinutes();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String PATIENTNAME_DESC_FIRST \u003d \" \" + PREFIX_APP_PATIENTNAME + VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String PATIENTNAME_DESC_SECOND \u003d \" \" + PREFIX_APP_PATIENTNAME + VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String PATIENTIC_DESC_FIRST \u003d \" \" + PREFIX_APP_PATIENTIC + VALID_PATIENT_IC_FIRST;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String PATIENTIC_DESC_SECOND \u003d \" \" + PREFIX_APP_PATIENTIC + VALID_PATIENT_IC_SECOND;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START_TIME_DESC_FIRST \u003d \" \" + PREFIX_APP_STARTTIME + VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START_TIME_DESC_SECOND \u003d \" \" + PREFIX_APP_STARTTIME + VALID_START_TIME_SECOND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DURATION_DESC_FIRST \u003d \" \" + PREFIX_APP_DURATION + VALID_DURATION_FIRST;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DURATION_DESC_SECOND \u003d \" \" + PREFIX_APP_DURATION + VALID_DURATION_SECOND;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // \u0027@\u0027 not allowed in Name"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_PATIENTNAME_DESC \u003d \" \" + PREFIX_APP_PATIENTNAME + \"Jane@\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in IcNumber"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_PATIENTIC_DESC \u003d \" \" + PREFIX_APP_PATIENTIC + \"\u00261234567Z\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // \u0027!\u0027 not allowed in AppointmentDateTime"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_APP_STARTTIME + \"2020!11!11 11!50\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // negative number not allowed in duration"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String INVALID_DURATION_DESC \u003d \" \" + PREFIX_APP_DURATION + \"-50\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withIcNumber(VALID_ICNUMBER_AMY).withAddress(VALID_ADDRESS_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withProfilePicture(VALID_PROFILE_PICTURE_AMY).withSex(VALID_SEX_AMY).withBloodType(VALID_BLOODTYPE_AMY)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_ASPIRIN)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withIcNumber(VALID_ICNUMBER_BOB).withAddress(VALID_ADDRESS_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withProfilePicture(VALID_PROFILE_PICTURE_BOB).withSex(VALID_SEX_BOB).withBloodType(VALID_BLOODTYPE_BOB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        DESC_FIRST \u003d new EditAppointmentDescriptorBuilder().withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_FIRST)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withDuration(VALID_DURATION_FIRST)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        DESC_SECOND \u003d new EditAppointmentDescriptorBuilder().withPatientName(VALID_PATIENT_NAME_SECOND)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_SECOND)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_SECOND)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withDuration(VALID_DURATION_SECOND)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * - the clinical, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal expectedCliniCal \u003d new CliniCal(actualModel.getCliniCal());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedCliniCal, actualModel.getCliniCal());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * - {@code expectedModel} \u003cbr\u003e matches {@code actualModel}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static void assertCommandPass(Command command, Model expectedModel,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                         String expectedMessage, Model actualModel) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * {@code model}\u0027s clinical."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Deletes the last patient in {@code model}\u0027s filtered list from {@code model}\u0027s CliniCal."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static void deleteLastPatient(Model model) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ObservableList\u003cPatient\u003e listOfPatients \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        Index lastPatientIndex \u003d Index.fromZeroBased(listOfPatients.size() - 1);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        Patient lastPatient \u003d listOfPatients.get(lastPatientIndex.getZeroBased());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.deletePatient(lastPatient);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String deleteLastInput \u003d \"delete\" + lastPatientIndex.getOneBased();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.commitCliniCal(deleteLastInput);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 6,
      "Michaeliaaa": 14,
      "afroneth": 14,
      "eugene3231": 11,
      "-": 96,
      "gsmoon97": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        showNoPatient(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of clinical list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCliniCal().getPatientList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 26,
      "-": 77,
      "gsmoon97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteVisitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DeleteVisitCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int INVALID_VISIT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ReadOnlyCliniCal sampleCliniCal \u003d TypicalPatients.getTypicalCliniCal();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Model model \u003d new ModelManager(sampleCliniCal, new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_nullValue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteVisitCommand(null, 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_invalidVisitIndex_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        DeleteVisitCommand deleteVisitCommand \u003d new DeleteVisitCommand(indexOfPatient, INVALID_VISIT_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e filteredPatientList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int indexOfPatientAsInt \u003d indexOfPatient.getZeroBased();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        VisitHistory visitHistory \u003d filteredPatientList.get(indexOfPatientAsInt).getVisitHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfVisitHistory \u003d visitHistory.getVisits().size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        DeleteVisitCommand deleteCommand \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            sizeOfVisitHistory + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_VISIT_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteVisitCommand, model, Messages.MESSAGE_INVALID_VISIT_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfFirstPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfSecondPatient \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        DeleteVisitCommand firstCommand \u003d new DeleteVisitCommand(indexOfFirstPatient, 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        DeleteVisitCommand secondCommand \u003d new DeleteVisitCommand(indexOfSecondPatient, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Null value. Returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same object. Returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same object. Returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(secondCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same values. Returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        DeleteVisitCommand firstCommandCopy \u003d new DeleteVisitCommand(indexOfFirstPatient, 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different command. Returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(firstCommand.equals(listCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different type of input. Returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(firstCommand.equals(\"test\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different type of input. Returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(firstCommand.equals(10));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different patient index. Returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 76,
      "eugene3231": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withProfilePicture(VALID_PROFILE_PICTURE_BOB).withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withProfilePicture(VALID_PROFILE_PICTURE_BOB).withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, new EditPatientDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        .withProfilePicture(VALID_PROFILE_PICTURE_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PATIENT, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // edit patient in filtered list into a duplicate in clinical"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient patientInList \u003d model.getCliniCal().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .withName(VALID_NAME_BOB).withProfilePicture(VALID_PROFILE_PICTURE_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * but smaller than size of clinical"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of clinical list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCliniCal().getPatientList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        .withProfilePicture(VALID_PROFILE_PICTURE_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand.EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PATIENT, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PATIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PATIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 51,
      "afroneth": 7,
      "-": 104,
      "gsmoon97": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPatientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ICNUMBER_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class EditPatientDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand.EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different icNumber -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withIcNumber(VALID_ICNUMBER_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different sex -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withSex(VALID_SEX_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different bloodType -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withBloodType(VALID_BLOODTYPE_BOB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different allergies -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAllergies(VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 8,
      "-": 46,
      "gsmoon97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditVisitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class EditVisitCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int EMPTY_INDEX \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int VALID_INDEX \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int INVALID_INDEX \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_nullValue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditVisitCommand(null, 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_unfilteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int outOfBoundInt \u003d model.getFilteredPatientList().size() + 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(outOfBoundInt);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        EditVisitCommand editVisitCommand \u003d new EditVisitCommand(outOfBoundIndex, EMPTY_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editVisitCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Edits filtered patient list in the scenario where index is greater than size of filtered list, but"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * lesser than size of patient list in CliniCal"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_filteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.showPatientAtIndex(model, indexOfPatient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ReadOnlyCliniCal modelClinical \u003d model.getCliniCal();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e sampleClinical \u003d modelClinical.getPatientList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfPatientList \u003d sampleClinical.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Assert that outOfBoundIndex is still in bounds of size of patient list in CliniCal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c sizeOfPatientList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        EditVisitCommand editVisitCommand \u003d new EditVisitCommand(outOfBoundIndex, EMPTY_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editVisitCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_invalidVisitIndex_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfSecondPatient \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        EditVisitCommand editVisitCommand \u003d new EditVisitCommand(indexOfPatient, INVALID_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // To check index out of bounds"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        EditVisitCommand editCommand \u003d new EditVisitCommand(indexOfSecondPatient,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                model.getFilteredPatientList().get(indexOfSecondPatient.getZeroBased()).getVisitHistory()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                      .getVisits().size() + 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_VISIT_HISTORY_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editVisitCommand, model, Messages.MESSAGE_INVALID_VISIT_HISTORY_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfSecondPatient \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        final EditVisitCommand command \u003d new EditVisitCommand(indexOfPatient, EMPTY_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Null value. Returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same values. Returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        EditVisitCommand commandWithSameValues \u003d new EditVisitCommand(indexOfPatient, EMPTY_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(command.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different visit index. Returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        EditVisitCommand commandWithDifferentIndex \u003d new EditVisitCommand(indexOfPatient, VALID_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(command.equals(commandWithDifferentIndex));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different patient index. Returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(command.equals(new EditVisitCommand(indexOfSecondPatient, EMPTY_INDEX)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same object. Returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different type of command. Returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(command.equals(new ListCommand()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                false, false, false, false, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_zeroKeywords_noPatientFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_multipleKeywords_multiplePatientsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 14,
      "-": 66,
      "gsmoon97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                true, false, false, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.history.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"help\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void execute_history_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        HistoryCommand historyCommand \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"help\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandSuccess(historyCommand, model, String.format(CommandHistory.STRING, \"\\n -\\thelp\"), model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void execute_emptyHistory_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        HistoryCommand historyCommand \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertCommandSuccess(historyCommand, model, \"There is no command history.\", model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void execute_nonEmptyHistory_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        HistoryCommand historyCommand \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandSuccess(historyCommand, model, \"Here is your command history:\", model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 37,
      "afroneth": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 3,
      "-": 33,
      "gsmoon97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ProfileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ProfileCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ReadOnlyCliniCal sampleClinical \u003d TypicalPatients.getTypicalCliniCal();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Model model \u003d new ModelManager(sampleClinical, new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_nullValue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProfileCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_unfilteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e observableList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfObservableList \u003d observableList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(sizeOfObservableList + 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfileCommand command \u003d new ProfileCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(command, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Edits filtered patient list in the scenario where index is greater than size of filtered list, but"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * lesser than size of patient list in CliniCal"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_filteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfFirstPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.showPatientAtIndex(model, indexOfFirstPatient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfSecondPatient \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d indexOfSecondPatient;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ReadOnlyCliniCal modelClinical \u003d model.getCliniCal();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e sampleClinical \u003d modelClinical.getPatientList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfPatientList \u003d sampleClinical.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Assert that outOfBoundIndex is still in bounds of size of patient list in CliniCal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c sizeOfPatientList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfileCommand profileCommand \u003d new ProfileCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(profileCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfFirstPatient \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index indexOfSecondPatient \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        final ProfileCommand command \u003d new ProfileCommand(indexOfFirstPatient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Null value. Returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same object. Returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different types of command. Returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(command.equals(new ListCommand()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different patient index. Returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(command.equals(new ProfileCommand(indexOfSecondPatient)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteLastPatient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.undoCliniCal();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.undoCliniCal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        model.undoCliniCal();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.undoCliniCal();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.undoCliniCal();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.undoCliniCal();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.redoCliniCal();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, String.format(RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            expectedModel.getRedoCommand()), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.redoCliniCal();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, String.format(RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            expectedModel.getRedoCommand()), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.redoCliniCal();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, String.format(RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            expectedModel.getRedoCommand()), expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SaveVisitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class SaveVisitCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final int NEW_VISIT \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Visit visit \u003d TypicalVisits.VISIT_1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_nullValue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SaveVisitCommand(1, null,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                   null, null, null, 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_unfilteredListSaveVisit_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient firstPerson \u003d model.getFilteredPatientList().get(TypicalIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(firstPerson)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                .withVisitHistory(TypicalVisits.getTypicalVisitHistoryAlice()).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d new SaveVisitCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_PATIENT.getOneBased(), \"27/03/2019\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                visit.getPrescription(), visit.getDiagnosis(), visit.getComment(), NEW_VISIT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String expectedMessage \u003d String.format(SaveVisitCommand.MESSAGE_SAVE_VISIT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Model newModel \u003d model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        expectedModel.setPatient(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandPass(saveVisitCommand, model, expectedMessage, newModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_unfilteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e filteredPatientList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfList \u003d filteredPatientList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(sizeOfList + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int indexInInt \u003d outOfBoundIndex.getOneBased();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String prescription \u003d visit.getPrescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String diagnosis \u003d visit.getDiagnosis();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String comment \u003d visit.getComment();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d new SaveVisitCommand(indexInInt, \"27/03/2019\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                                 prescription, diagnosis, comment, NEW_VISIT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(saveVisitCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Edits filtered patient list in the scenario where index is greater than size of filtered list, but"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * lesser than size of patient list in CliniCal"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute_filteredListInvalidPatientIndex_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index firstPatientIndex \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.showPatientAtIndex(model, firstPatientIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ReadOnlyCliniCal modelClinical \u003d model.getCliniCal();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cPatient\u003e sampleClinical \u003d modelClinical.getPatientList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int sizeOfPatientList \u003d sampleClinical.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Assert that outOfBoundIndex is still in bounds of size of patient list in CliniCal"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c sizeOfPatientList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String prescription \u003d visit.getPrescription();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String diagnosis \u003d visit.getDiagnosis();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String comment \u003d visit.getComment();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d new SaveVisitCommand(outOfBoundIndex.getOneBased(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        \"27/03/2019\", prescription, diagnosis, comment, NEW_VISIT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        CommandTestUtil.assertCommandFailure(saveVisitCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d new SaveVisitCommand(1, \"08/10/2020\", \"cancer\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                      \"pain pills\", \"monitor closely\", NEW_VISIT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Null value. Returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveVisitCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same object. Returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand saveCommand \u003d new SaveVisitCommand(1, \"08/10/2020\", \"cancer\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                 \"pain pills\", \"monitor closely\", NEW_VISIT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(saveVisitCommand.equals(saveCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different type of input. Returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveVisitCommand.equals(\"test\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different type of input. Returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveVisitCommand.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different patient index. Returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand differentIndex \u003d new SaveVisitCommand(2, \"08/10/2020\", \"cancer\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    \"pain pills\", \"monitor closely\", NEW_VISIT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveCommand.equals(differentIndex));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different visit date. Returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand differentDate \u003d new SaveVisitCommand(1, \"10/08/2020\", \"cancer\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                   \"pain pills\", \"monitor closely\", NEW_VISIT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveCommand.equals(differentDate));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different diagnosis. Returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand differentDiagnosis \u003d new SaveVisitCommand(1, \"10/08/2020\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"covid-19\", \"pain pills\", \"monitor closely\", NEW_VISIT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveCommand.equals(differentDiagnosis));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different prescription. Returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand differentPrescription \u003d new SaveVisitCommand(1, \"10/08/2020\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                             \"cancer\", \"panadol\", \"monitor closely\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                     NEW_VISIT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveCommand.equals(differentPrescription));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different comment. Returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        SaveVisitCommand differentComment \u003d new SaveVisitCommand(1, \"10/08/2020\", \"cancer\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                      \"pain pills\", \"hospitalisation required\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                 NEW_VISIT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(saveCommand.equals(differentComment));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteLastPatient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        deleteLastPatient(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.undoCliniCal();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.getUndoCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, String.format(UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            expectedModel.getUndoCommand()), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.undoCliniCal();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, String.format(UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            expectedModel.getUndoCommand()), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedModel.undoCliniCal();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, String.format(UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            expectedModel.getUndoCommand()), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/appointment/AddAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_IC_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_IC_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void constructor_nullAppointment_throwsAssertionError() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new AddAppointmentCommand(null, null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddAppointmentCommandTest.ModelStubAcceptingAppointmentAdded modelStub \u003d new AddAppointmentCommandTest"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                .ModelStubAcceptingAppointmentAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment validAppointment \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_FIRST)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withEndTime(VALID_END_TIME_FIRST)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandResult commandResult \u003d new AddAppointmentCommand(validAppointment).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_conflictingAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment validAppointment \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_FIRST)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withEndTime(VALID_END_TIME_FIRST)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(validAppointment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddAppointmentCommandTest.ModelStub modelStub \u003d new AddAppointmentCommandTest"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                .ModelStubWithAppointment(validAppointment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(CommandException.class, AddAppointmentCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                .MESSAGE_CONFLICTING_APP, () -\u003e addAppointmentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment aliceAppointment \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_FIRST)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withEndTime(VALID_END_TIME_FIRST)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment bobAppointment \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_SECOND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_SECOND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_SECOND)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withEndTime(VALID_END_TIME_SECOND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddAppointmentCommand addAliceAppointmentCommand \u003d new AddAppointmentCommand(aliceAppointment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddAppointmentCommand addBobAppointmentCommand \u003d new AddAppointmentCommand(bobAppointment);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Assertions.assertTrue(addAliceAppointmentCommand.equals(addAliceAppointmentCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddAppointmentCommand addAliceCommandCopy \u003d new AddAppointmentCommand(aliceAppointment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Assertions.assertTrue(addAliceAppointmentCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Assertions.assertFalse(addAliceAppointmentCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Assertions.assertFalse(addAliceAppointmentCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Assertions.assertFalse(addAliceAppointmentCommand.equals(addBobAppointmentCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public Path getCliniCalFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setCliniCalFilePath(Path cliniCalFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setCliniCal(ReadOnlyCliniCal cliniCal) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public ReadOnlyCliniCal getCliniCal() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void commitCliniCal(String command) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean canUndoCliniCal() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void undoCliniCal() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public String getUndoCommand() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public String getRedoCommand() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean canRedoCliniCal() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void redoCliniCal() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private class ModelStubWithAppointment extends AddAppointmentCommandTest.ModelStub {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        private final Appointment appointment;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        ModelStubWithAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return this.appointment.isSameAppointmentTime(appointment);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private class ModelStubAcceptingAppointmentAdded extends AddAppointmentCommandTest.ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return appointmentsAdded.stream().anyMatch(appointment::isSameAppointmentTime);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            appointmentsAdded.add(appointment);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public ReadOnlyCliniCal getCliniCal() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return new CliniCal();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public void commitCliniCal(String command) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            // Called by AddCommand#execute"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 264,
      "gsmoon97": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/appointment/DeleteAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalCliniCalWithAppointments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class DeleteAppointmentCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCalWithAppointments(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                .get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_SUCCESS, appointmentToDelete);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCliniCal(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedModel.deleteAppointment(appointmentToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteAppointmentCommand deleteFirstCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteAppointmentCommand deleteSecondCommand \u003d new DeleteAppointmentCommand(INDEX_SECOND_APPOINTMENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        DeleteAppointmentCommand deleteFirstCommandCopy \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 65,
      "gsmoon97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/appointment/EditAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_IC_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_IC_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalCliniCalWithAppointments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.EditAppointmentDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * and unit tests for EditAppointmentCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class EditAppointmentCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCliniCalWithAppointments(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment editedAppointment \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(editedAppointment).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                editedAppointment);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index indexLastAppointment \u003d Index.fromOneBased(model.getFilteredAppointmentList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment lastAppointment \u003d model.getFilteredAppointmentList().get(indexLastAppointment.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        AppointmentBuilder appointmentInList \u003d new AppointmentBuilder(lastAppointment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment editedAppointment \u003d appointmentInList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_FIRST)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withEndTime(VALID_END_TIME_FIRST)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_FIRST)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withDuration(VALID_DURATION_FIRST)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(indexLastAppointment, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                editedAppointment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedModel.setAppointment(lastAppointment, editedAppointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new EditAppointmentDescriptor());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment editedAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                editedAppointment);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CliniCal(model.getCliniCal()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void execute_duplicateAppointmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment firstAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(firstAppointment).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_APPOINTMENT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertCommandFailure(editAppointmentCommand, model, EditAppointmentCommand.MESSAGE_CONFLICTING_APPOINTMENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void execute_invalidAppointmentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_SECOND)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_SECOND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertCommandFailure(editAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        final EditAppointmentCommand standardCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, DESC_FIRST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor copyDescriptor \u003d new EditAppointmentDescriptor(DESC_FIRST);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand commandWithSameValues \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                copyDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_SECOND_APPOINTMENT, DESC_FIRST)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, DESC_SECOND)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/appointment/EditAppointmentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_IC_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.EditAppointmentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class EditAppointmentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptorWithSameValues \u003d new EditAppointmentDescriptor(DESC_FIRST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(DESC_FIRST.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(DESC_FIRST.equals(DESC_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_FIRST.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_FIRST.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_FIRST.equals(DESC_SECOND));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different patientName -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor editedFirst \u003d new EditAppointmentDescriptorBuilder(DESC_FIRST)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_SECOND).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_FIRST.equals(editedFirst));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different patientIc -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new EditAppointmentDescriptorBuilder(DESC_FIRST).withPatientIc(VALID_PATIENT_IC_SECOND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_FIRST.equals(editedFirst));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different startTime -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new EditAppointmentDescriptorBuilder(DESC_FIRST).withStartTime(VALID_START_TIME_SECOND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_FIRST.equals(editedFirst));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new EditAppointmentDescriptorBuilder(DESC_FIRST).withDuration(VALID_DURATION_SECOND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(DESC_FIRST.equals(editedFirst));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ICNUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLORTAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ICNUMBER_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEX_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_ASPIRIN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ICNUMBER_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).withAllergies(VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + ICNUMBER_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // multiple ic numbers - last ic number accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_AMY + ICNUMBER_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_AMY + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // multiple sex - last sex accepted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_AMY + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // multiple blood types - last blood type accepted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_AMY + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // multiple allergies - all accepted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient expectedPatientMultipleAllergies \u003d new PatientBuilder(BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_ASPIRIN, VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_AMY + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new AddCommand(expectedPatientMultipleAllergies));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // zero allergies"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withAllergies().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ICNUMBER_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_AMY + SEX_DESC_AMY + BLOODTYPE_DESC_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // missing icNumber prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_ICNUMBER_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_ICNUMBER_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid icNumber"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_ICNUMBER_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                IcNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + INVALID_EMAIL_DESC + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid sex"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_SEX_DESC + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid bloodType"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + EMAIL_DESC_BOB + SEX_DESC_BOB + INVALID_BLOODTYPE_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid allergy"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + INVALID_ALLERGY_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Allergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        // invalid colorTag"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + INVALID_COLORTAG_DESC,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                ColorTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ICNUMBER_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + INVALID_EMAIL_DESC + SEX_DESC_BOB + BLOODTYPE_DESC_BOB,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + VALID_PHONE_BOB + ICNUMBER_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SEX_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_BOB,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 3,
      "Michaeliaaa": 9,
      "eugene3231": 2,
      "-": 82,
      "gsmoon97": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddProfilePictureCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROFILE_PICTURE_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.AddProfilePictureCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class AddProfilePictureCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfilePictureCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String INVALID_FILEPATH_DESC \u003d \"Test string\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private AddProfilePictureCommandParser parser \u003d new AddProfilePictureCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, VALID_PROFILE_PICTURE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"2\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"-7\" + VALID_PROFILE_PICTURE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_PROFILE_PICTURE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"1 random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"1 z/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // invalid name and filepath"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"2\" + INVALID_FILEPATH_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parse_invalidPicture_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // invalid photo with blank filepath"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PROFILE_PICTURE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parse_invalidPictureFilePath_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // invalid photo with blank filepath"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String invalidFilePath \u003d \"f/data/nonexistentfile.png\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertParseFailure(parser, \"1\" + invalidFilePath, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddVisitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.AddVisitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class AddVisitCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final AddVisitCommandParser parser \u003d new AddVisitCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void parse_validArgs_returnsAddVisitCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String visitDate \u003d LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, \"1\", new AddVisitCommand(visitDate, INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, \"2\", new AddVisitCommand(visitDate, INDEX_SECOND_PATIENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, \"3\", new AddVisitCommand(visitDate, INDEX_THIRD_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, \"-1\" , String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AddVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AddVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AddVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CliniCalParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class CliniCalParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final CliniCalParser parser \u003d new CliniCalParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                + INDEX_FIRST_PATIENT.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PATIENT, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(parser.parseCommand(\"history\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 3\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 15,
      "afroneth": 4,
      "eugene3231": 14,
      "-": 85,
      "gsmoon97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteVisitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.DeleteVisitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class DeleteVisitCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private DeleteVisitCommandParser parser \u003d new DeleteVisitCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void parse_validArgs_returnsDeleteVisitCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // Valid visit index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String userinput1 \u003d INDEX_FIRST_PATIENT.getOneBased() + \" \" + PREFIX_VISIT_INDEX + \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, userinput1 , new DeleteVisitCommand(INDEX_FIRST_PATIENT, 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // No visit index given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String userinput2 \u003d INDEX_FIRST_PATIENT.getOneBased() + \" \" + PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, userinput2 , new DeleteVisitCommand(INDEX_FIRST_PATIENT, -1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String userinput3 \u003d INDEX_FIRST_PATIENT.getOneBased() + \" \" + PREFIX_VISIT_INDEX + \"aa\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, userinput3 , String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            DeleteVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COLORTAG_DESC_ORANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLORTAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ICNUMBER_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEX_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_ASPIRIN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLORTAG_ORANGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ICNUMBER_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String ALLERGY_EMPTY \u003d \" \" + PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1 z/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ICNUMBER_DESC,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                IcNumber.MESSAGE_CONSTRAINTS); // invalid ic number"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SEX_DESC, Sex.MESSAGE_CONSTRAINTS); // invalid sex"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BLOODTYPE_DESC,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                BloodType.MESSAGE_CONSTRAINTS); // invalid blood type"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ALLERGY_DESC, Allergy.MESSAGE_CONSTRAINTS); // invalid allergy"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COLORTAG_DESC, ColorTag.MESSAGE_CONSTRAINTS); // invalid colorTag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // while parsing {@code PREFIX_ALLERGY} alone will reset the tags of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + ALLERGY_DESC_AMY + ALLERGY_DESC_AMY"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + ALLERGY_EMPTY, Allergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + ALLERGY_DESC_AMY + ALLERGY_EMPTY"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + ALLERGY_DESC_AMY, Allergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + ALLERGY_EMPTY + ALLERGY_DESC_AMY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + ALLERGY_DESC_AMY, Allergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + ALLERGY_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + ALLERGY_DESC_AMY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + SEX_DESC_AMY + ICNUMBER_DESC_AMY + BLOODTYPE_DESC_BOB + COLORTAG_DESC_ORANGE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withIcNumber(VALID_ICNUMBER_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withSex(VALID_SEX_AMY).withBloodType(VALID_BLOODTYPE_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_ASPIRIN, VALID_ALLERGY_PENICILLIN).withColorTag(VALID_COLORTAG_ORANGE)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // ic number"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ICNUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withIcNumber(VALID_ICNUMBER_AMY).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // sex"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SEX_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withSex(VALID_SEX_AMY).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // blood type"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BLOODTYPE_DESC_AMY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withBloodType(VALID_BLOODTYPE_AMY).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // allergies"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ALLERGY_DESC_BOB;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAllergies(VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + ALLERGY_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + ALLERGY_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + ALLERGY_DESC_AMY;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_ASPIRIN, VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ALLERGY_EMPTY;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withAllergies().build();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 5,
      "Michaeliaaa": 23,
      "-": 161,
      "gsmoon97": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditVisitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.EditVisitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class EditVisitCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private EditVisitCommandParser parser \u003d new EditVisitCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void parse_validArgs_returnsDeleteVisitCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // Valid visit index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String userinput1 \u003d INDEX_FIRST_PATIENT.getOneBased() + \" \" + PREFIX_VISIT_INDEX + \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, userinput1 , new EditVisitCommand(INDEX_FIRST_PATIENT, 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // No visit index given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String userinput2 \u003d INDEX_FIRST_PATIENT.getOneBased() + \" \" + PREFIX_VISIT_INDEX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, userinput2 , new EditVisitCommand(INDEX_FIRST_PATIENT, -1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String userinput3 \u003d INDEX_FIRST_PATIENT.getOneBased() + \" \" + PREFIX_VISIT_INDEX + \"aa\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, userinput3 , String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            EditVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_ICNUMBER \u003d \"!1234567Z\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_SEX \u003d \"MF\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_BLOODTYPE \u003d \"C+\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_ALLERGY \u003d \"#penicillin\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_ICNUMBER \u003d \"S1234567Z\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_SEX \u003d \"F\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_BLOODTYPE \u003d \"A+\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_ALLERGY_1 \u003d \"aspirin\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_ALLERGY_2 \u003d \"penicillin\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseIcNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIcNumber((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseIcNumber_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_ICNUMBER));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseIcNumber_validValueWithoutWhitespace_returnsIcNumber() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        IcNumber expectedIcNumber \u003d new IcNumber(VALID_ICNUMBER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedIcNumber, ParserUtil.parseIcNumber(VALID_ICNUMBER));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseIcNumber_validValueWithWhitespace_returnsTrimmedIcNumber() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String icNumberWithWhitespace \u003d WHITESPACE + VALID_ICNUMBER + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        IcNumber expectedIcNumber \u003d new IcNumber(VALID_ICNUMBER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedIcNumber, ParserUtil.parseIcNumber(icNumberWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseSex_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSex((String) null));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseSex_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSex(INVALID_SEX));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseSex_validValueWithoutWhitespace_returnsSex() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Sex expectedSex \u003d new Sex(VALID_SEX);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedSex, ParserUtil.parseSex(VALID_SEX));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseSex_validValueWithWhitespace_returnsTrimmedSex() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String sexWithWhitespace \u003d WHITESPACE + VALID_SEX + WHITESPACE;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Sex expectedSex \u003d new Sex(VALID_SEX);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedSex, ParserUtil.parseSex(sexWithWhitespace));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseBloodType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBloodType((String) null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseBloodType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBloodType(INVALID_BLOODTYPE));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseBloodType_validValueWithoutWhitespace_returnsBloodType() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(VALID_BLOODTYPE));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseBloodType_validValueWithWhitespace_returnsTrimmedBloodType() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String bloodTypeWithWhitespace \u003d WHITESPACE + VALID_BLOODTYPE + WHITESPACE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(bloodTypeWithWhitespace));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for null input."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseAllergy_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAllergy(null));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid input."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseAllergy_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergy(INVALID_ALLERGY));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseAllergy_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Allergy expectedAllergy \u003d new Allergy(VALID_ALLERGY_1);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedAllergy, ParserUtil.parseAllergy(VALID_ALLERGY_1));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for valid input."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseAllergy_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_ALLERGY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Allergy expectedAllergy \u003d new Allergy(VALID_ALLERGY_1);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedAllergy, ParserUtil.parseAllergy(tagWithWhitespace));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for invalid allergy with symbol."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseAllergy_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergies(Arrays.asList(VALID_ALLERGY_1,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                INVALID_ALLERGY)));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Valid input test for empty set."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseAllergy_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(ParserUtil.parseAllergies(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Valid input test."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parseAllergy_collectionWithValidAllergies_returnsAllergySet() throws Exception {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Set\u003cAllergy\u003e actualAllergySet \u003d ParserUtil.parseAllergies(Arrays.asList(VALID_ALLERGY_1, VALID_ALLERGY_2));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Set\u003cAllergy\u003e expectedAllergySet \u003d new HashSet\u003cAllergy\u003e(Arrays.asList(new Allergy(VALID_ALLERGY_1),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                new Allergy(VALID_ALLERGY_2)));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(expectedAllergySet, actualAllergySet);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for error in visit index. Non-int input."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseVisitIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e ParserUtil.parseVisitIndex(\"10 a\"));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for exceeded index in visit index."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseVisitIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(ParseException.class, \"The visit index provided is invalid\", ()"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e ParserUtil.parseVisitIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for error in visit date."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseVisit_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(ParseException.class, \"Visits should take date in valid format.\", ()"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            -\u003e ParserUtil.parseVisit(\"test\"));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for error in date."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseDateTime_invalidDateTime_throwsParseException() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                AppointmentDateTime.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                -\u003e ParserUtil.parseDateTime(\"test\"));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for error in date time."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseDuration_invalidDateTime_throwsParseException() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                AppointmentDateTime.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                -\u003e ParserUtil.parseDurationWithStart(\"test\", \"30\"));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Test for error in duration."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseDuration_invalidDuration_throwsParseException() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                MESSAGE_INVALID_DURATION, ()"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                -\u003e ParserUtil.parseDurationWithStart(\"10/10/2030 09:30\", \"test\"));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 3,
      "Michaeliaaa": 8,
      "afroneth": 74,
      "-": 183,
      "gsmoon97": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ProfileCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class ProfileCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final ProfileCommandParser parser \u003d new ProfileCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void parse_validArgs_returnsProfileCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String visitDate \u003d LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ProfileCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, \"2\", new ProfileCommand(INDEX_SECOND_PATIENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseSuccess(parser, \"3\", new ProfileCommand(INDEX_THIRD_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, \"-1\" , String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            ProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            ProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            ProfileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/appointment/DeleteAppointmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class DeleteAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void parse_validArgs_returnsDeleteAppointmentCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                DeleteAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/appointment/EditAppointmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_FIRST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PATIENTIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PATIENTNAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PATIENTIC_DESC_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PATIENTIC_DESC_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PATIENTNAME_DESC_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PATIENTNAME_DESC_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_SECOND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_IC_FIRST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_IC_SECOND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SECOND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.EditAppointmentDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class EditAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, VALID_PATIENT_NAME_FIRST, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\", EditAppointmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PATIENTNAME_DESC_FIRST, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"0\" + PATIENTNAME_DESC_FIRST, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1 z/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid patient name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PATIENTNAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid patient ic"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PATIENTIC_DESC, IcNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_START_TIME_DESC, AppointmentDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid duration"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DURATION_DESC, ParserUtil.MESSAGE_NEGATIVE_INVALID_DURATION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid patient name followed by valid patient ic"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PATIENTNAME_DESC + PATIENTIC_DESC_FIRST,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // valid patient name followed by invalid patient ic. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + PATIENTNAME_DESC_FIRST + INVALID_PATIENTIC_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                IcNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PATIENTNAME_DESC + INVALID_PATIENTIC_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        + VALID_START_TIME_FIRST + VALID_DURATION_FIRST,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PATIENTNAME_DESC_SECOND + PATIENTIC_DESC_SECOND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + START_TIME_DESC_SECOND + DURATION_DESC_SECOND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_SECOND).withPatientIc(VALID_PATIENT_IC_SECOND)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_SECOND).withDuration(VALID_DURATION_SECOND)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PATIENTNAME_DESC_SECOND + PATIENTIC_DESC_SECOND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_SECOND).withPatientIc(VALID_PATIENT_IC_SECOND)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // patient name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_APPOINTMENT;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PATIENTNAME_DESC_FIRST;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // ic number"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PATIENTIC_DESC_FIRST;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditAppointmentDescriptorBuilder().withPatientIc(VALID_PATIENT_IC_FIRST).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // start time"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_TIME_DESC_FIRST;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditAppointmentDescriptorBuilder().withStartTime(VALID_START_TIME_FIRST).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // duration"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DURATION_DESC_FIRST;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditAppointmentDescriptorBuilder().withDuration(VALID_DURATION_FIRST).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PATIENTNAME_DESC_FIRST + PATIENTIC_DESC_FIRST"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + PATIENTNAME_DESC_FIRST + PATIENTIC_DESC_SECOND + PATIENTNAME_DESC_SECOND + PATIENTIC_DESC_SECOND"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + START_TIME_DESC_FIRST + DURATION_DESC_SECOND;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_SECOND).withPatientIc(VALID_PATIENT_IC_SECOND)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withStartTime(VALID_START_TIME_FIRST).withDuration(VALID_DURATION_SECOND)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DURATION_DESC + DURATION_DESC_FIRST;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withDuration(VALID_DURATION_FIRST)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_TIME_DESC_SECOND + INVALID_PATIENTNAME_DESC + DURATION_DESC_FIRST"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                + PATIENTIC_DESC_SECOND + PATIENTNAME_DESC_SECOND;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditAppointmentDescriptorBuilder().withStartTime(VALID_START_TIME_SECOND)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withDuration(VALID_DURATION_FIRST)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientIc(VALID_PATIENT_IC_SECOND)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withPatientName(VALID_PATIENT_NAME_SECOND)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "gsmoon97": 199
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CliniCalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class CliniCalTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private final CliniCal cliniCal \u003d new CliniCal();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(Collections.emptyList(), cliniCal.getPatientList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cliniCal.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void resetData_withValidReadOnlyCliniCal_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal newData \u003d getTypicalCliniCal();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        cliniCal.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(newData, cliniCal);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // Two patients with the same ic number"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCalStub newData \u003d new CliniCalStub(newPatients);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e cliniCal.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cliniCal.hasPatient(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void hasPatient_patientNotInCliniCal_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(cliniCal.hasPatient(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void hasPatient_patientInCliniCal_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        cliniCal.addPatient(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(cliniCal.hasPatient(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInCliniCal_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        cliniCal.addPatient(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(cliniCal.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e cliniCal.getPatientList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * A stub ReadOnlyCliniCal whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static class CliniCalStub implements ReadOnlyCliniCal {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCalStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return appointments;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 7,
      "Michaeliaaa": 12,
      "-": 62,
      "gsmoon97": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APP1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.CliniCalBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(new CliniCal(), new CliniCal(modelManager.getCliniCal()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userPrefs.setCliniCalFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userPrefs.setCliniCalFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setCliniCalFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCliniCalFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setCliniCalFilePath_validPath_setsCliniCalFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        modelManager.setCliniCalFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(path, modelManager.getCliniCalFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void hasPatient_patientNotInCliniCal_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void hasPatient_patientInCliniCal_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void hasAppointment_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAppointment(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void hasAppointment_appointmentNotInCliniCal_returnsFalse() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertFalse(modelManager.hasAppointment(APP1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void hasAppointment_appointmentInCliniCal_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        modelManager.addAppointment(APP1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(modelManager.hasAppointment(APP1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAppointmentList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal cliniCal \u003d new CliniCalBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal differentCliniCal \u003d new CliniCal();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        modelManager \u003d new ModelManager(cliniCal, userPrefs);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(cliniCal, userPrefs);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different cliniCal -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCliniCal, userPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(cliniCal, userPrefs)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        differentUserPrefs.setCliniCalFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(cliniCal, differentUserPrefs)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 20,
      "Michaeliaaa": 13,
      "-": 101,
      "gsmoon97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void setCliniCalFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCliniCalFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "gsmoon97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedCliniCalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.testutil.CliniCalBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "class VersionedCliniCalTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final ReadOnlyCliniCal cliniCalWithAmy \u003d new CliniCalBuilder().withPatient(AMY).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final ReadOnlyCliniCal cliniCalWithAmyBob \u003d new CliniCalBuilder().withPatient(AMY).withPatient(BOB).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private final ReadOnlyCliniCal emptyCliniCal \u003d new CliniCalBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void commit_emptyCliniCal() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.commit(emptyCliniCal, \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCliniCalListStatus(versionedCliniCal,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.singletonList(emptyCliniCal),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            emptyCliniCal,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void commit_multipleCliniCal() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal, cliniCalWithAmy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.commit(cliniCalWithAmyBob, \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCliniCalListStatus(versionedCliniCal,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Arrays.asList(emptyCliniCal, cliniCalWithAmy),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            cliniCalWithAmyBob,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void undo_atEndOfStateList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal, cliniCalWithAmy, cliniCalWithAmyBob);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.undo();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCliniCalListStatus(versionedCliniCal,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.singletonList(emptyCliniCal),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            cliniCalWithAmy,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.singletonList(cliniCalWithAmyBob));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void undo_notAtStartOfStateList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal, cliniCalWithAmy, cliniCalWithAmyBob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCliniCal, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.undo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCliniCalListStatus(versionedCliniCal,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.emptyList(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            emptyCliniCal,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Arrays.asList(cliniCalWithAmy, cliniCalWithAmyBob));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void redo_atStartOfStateList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal, cliniCalWithAmy, cliniCalWithAmyBob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCliniCal, 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.redo();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCliniCalListStatus(versionedCliniCal,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.singletonList(emptyCliniCal),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            cliniCalWithAmy,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.singletonList(cliniCalWithAmyBob));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void redo_notAtEndOfStateList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal, cliniCalWithAmy, cliniCalWithAmyBob);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCliniCal, 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.redo();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertCliniCalListStatus(versionedCliniCal,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Arrays.asList(emptyCliniCal, cliniCalWithAmy),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            cliniCalWithAmyBob,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void canUndo_singleAtStartOfStateList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertFalse(versionedCliniCal.canUndoCliniCal());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void canUndo_multipleAtStartOfStateList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal, cliniCalWithAmy, cliniCalWithAmyBob);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCliniCal, 2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertFalse(versionedCliniCal.canUndoCliniCal());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void canRedo_singleAtEndOfStateList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertFalse(versionedCliniCal.canRedoCliniCal());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void canRedo_multipleAtEndOfStateList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal, cliniCalWithAmy, cliniCalWithAmyBob);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertFalse(versionedCliniCal.canRedoCliniCal());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void getUndoCommand_multiple() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.commit(cliniCalWithAmy, String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AMY));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.undo();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AMY), versionedCliniCal.getUndoCommand());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void getRedoCommand_multiple() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d prepareCliniCalList(emptyCliniCal);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.commit(cliniCalWithAmy, String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AMY));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.undo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        versionedCliniCal.redo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_UNDONE_REDONE_INPUT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            AMY), versionedCliniCal.getRedoCommand());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Asserts that {@code versionedCliniCal} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * states before {@code versionedCliniCal#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * and states after {@code versionedCliniCal#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private void assertCliniCalListStatus(VersionedCliniCal versionedCliniCal,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                             List\u003cReadOnlyCliniCal\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                             ReadOnlyCliniCal expectedCurrentState,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                                             List\u003cReadOnlyCliniCal\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertEquals(new CliniCal(versionedCliniCal.getCurrentCliniCalState()), expectedCurrentState);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        while (versionedCliniCal.canUndoCliniCal()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            versionedCliniCal.undo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        for (ReadOnlyCliniCal expectedCliniCal : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            assertEquals(expectedCliniCal, new CliniCal(versionedCliniCal.getCurrentCliniCalState()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            versionedCliniCal.redo();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        for (ReadOnlyCliniCal expectedCliniCal : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            versionedCliniCal.redo();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            assertEquals(expectedCliniCal, new CliniCal(versionedCliniCal.getCurrentCliniCalState()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertFalse(versionedCliniCal.canRedoCliniCal());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedCliniCal.undo());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Creates and returns a {@code VersionedCliniCal} with the {@code cliniCalStates} added into it, and the"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * {@code VersionedCliniCal#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private VersionedCliniCal prepareCliniCalList(ReadOnlyCliniCal... cliniCalStates) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertFalse(cliniCalStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VersionedCliniCal versionedCliniCal \u003d new VersionedCliniCal((CliniCal) cliniCalStates[0]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        for (int i \u003d 1; i \u003c cliniCalStates.length; i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            versionedCliniCal.commit(cliniCalStates[i], \"\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return versionedCliniCal;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Shifts the {@code versionedCliniCal#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedCliniCal versionedCliniCal, int count) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            versionedCliniCal.undo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 197
    }
  },
  {
    "path": "src/test/java/seedu/address/model/allergy/AllergyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.allergy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class AllergyTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Allergy(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_invalidAllergyName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String invalidAllergyName \u003d \"!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Allergy(invalidAllergyName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void isValidAllergyName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Allergy.isValidAllergyName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class AppointmentDateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AppointmentDateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AppointmentDateTime(null, 60));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_invalidAppointmentDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String invalidAppointmentDateTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentDateTime(invalidAppointmentDateTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentDateTime(invalidAppointmentDateTime, 60));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null appointment datetime"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppointmentDateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid appointment datetime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"202012152336\")); // invalid format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"25/Dec/2020 23:36\")); // invalid month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"55/12/2020 23:36\")); // invalid day"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"55/12/2020 88:36\")); // invalid hour"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"25/12/2020 23:99\")); // invalid minute"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"31/11/2020 01:00\")); // bug found in PE-D"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(AppointmentDateTime.isValidDateTime(\"29/02/2021 00:00\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // valid appointment datetime"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(AppointmentDateTime.isValidDateTime(\"25/12/2025 23:36\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 3,
      "Michaeliaaa": 6,
      "gsmoon97": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.CONFLICTING_APPOINTMENT1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.CONFLICTING_APPOINTMENT2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.FIRST_APP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.NOCONFLICT_APPOINTMENT1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.NOCONFLICT_APPOINTMENT2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.SECOND_APP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void isSameAppointment() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(FIRST_APP.isSameAppointmentTime(FIRST_APP));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.isSameAppointmentTime(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different patient name -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment editedFirst \u003d new AppointmentBuilder(FIRST_APP).withPatientName(VALID_PATIENT_NAME_SECOND).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(FIRST_APP.isSameAppointmentTime(editedFirst));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same patient name and different time -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new AppointmentBuilder(FIRST_APP).withEndTime(VALID_END_TIME_SECOND).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.isSameAppointmentTime(editedFirst));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void compare() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(Appointment.compare(FIRST_APP, SECOND_APP) \u003c\u003d 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(Appointment.compare(SECOND_APP, FIRST_APP) \u003e\u003d 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void hasTimeConflict() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(CONFLICTING_APPOINTMENT1.hasTimeConflict(CONFLICTING_APPOINTMENT2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(CONFLICTING_APPOINTMENT2.hasTimeConflict(CONFLICTING_APPOINTMENT1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertFalse(NOCONFLICT_APPOINTMENT1.hasTimeConflict(NOCONFLICT_APPOINTMENT2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertFalse(NOCONFLICT_APPOINTMENT2.hasTimeConflict(NOCONFLICT_APPOINTMENT1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment firstCopy \u003d new AppointmentBuilder(FIRST_APP).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(FIRST_APP.equals(firstCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(FIRST_APP.equals(FIRST_APP));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.equals(SECOND_APP));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different patient name -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Appointment editedFirst \u003d new AppointmentBuilder(FIRST_APP).withPatientName(VALID_PATIENT_NAME_SECOND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.equals(editedFirst));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different start time -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new AppointmentBuilder(SECOND_APP).withStartTime(VALID_START_TIME_FIRST).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.equals(editedFirst));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different end time -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedFirst \u003d new AppointmentBuilder(FIRST_APP).withEndTime(VALID_END_TIME_SECOND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(FIRST_APP.equals(editedFirst));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 19,
      "gsmoon97": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/UniqueAppointmentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APP1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APP2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.CONFLICTING_APPOINTMENT1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.CONFLICTING_APPOINTMENT2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.appointment.exceptions.ConflictingAppointmentException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class UniqueAppointmentListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void clashes_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.clashes(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void clashes_appointmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertFalse(uniqueAppointmentList.clashes(APP1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void clashes_appointmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(uniqueAppointmentList.clashes(APP1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void clashes_appointmentClashes_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(CONFLICTING_APPOINTMENT1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(uniqueAppointmentList.clashes(CONFLICTING_APPOINTMENT2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void add_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void add_conflictingAppointment_throwsConflictingAppointmentException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(CONFLICTING_APPOINTMENT1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(ConflictingAppointmentException.class, () -\u003e uniqueAppointmentList.add(CONFLICTING_APPOINTMENT2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointment_nullTargetAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(null, APP1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointment_nullEditedAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(APP1, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointment_targetAppointmentNotInList_throwsAppointmentNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.setAppointment(APP1, APP1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointment_editedAppointmentIsSameAppointment_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.setAppointment(APP1, APP1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        expectedUniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointment_editedAppointmentHasSameName_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Appointment editedAppointment \u003d new AppointmentBuilder(APP1).withEndTime(VALID_END_TIME_SECOND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.setAppointment(APP1, editedAppointment);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        expectedUniqueAppointmentList.add(editedAppointment);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList notExpectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        notExpectedUniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertNotEquals(uniqueAppointmentList, notExpectedUniqueAppointmentList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointment_editedAppointmentHasSameTimes_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Appointment editedAppointment \u003d new AppointmentBuilder(APP1).withPatientName(VALID_PATIENT_NAME_FIRST).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.setAppointment(APP1, editedAppointment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        expectedUniqueAppointmentList.add(editedAppointment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList notExpectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        notExpectedUniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertNotEquals(uniqueAppointmentList, notExpectedUniqueAppointmentList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void remove_nullAppointment_throwsAppointmentNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.remove(APP1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void remove_existingAppointment_removesAppointment() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.remove(APP1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(uniqueAppointmentList, expectedUniqueAppointmentList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointments_nullUniqueAppointmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointments((UniqueAppointmentList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointments_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointments((List\u003cAppointment\u003e) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointments_uniqueAppointmentList_replacesOwnListSuccess() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        expectedUniqueAppointmentList.add(APP2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.setAppointments(expectedUniqueAppointmentList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList notExceptedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        notExceptedUniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertNotEquals(notExceptedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointments_list_replacesOwnListSuccess() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d Collections.singletonList(APP2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        uniqueAppointmentList.setAppointments(appointmentList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        expectedUniqueAppointmentList.add(APP2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        UniqueAppointmentList notExpectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        notExpectedUniqueAppointmentList.add(APP1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertNotEquals(notExpectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setAppointments_listWithDuplicateAppointments_throwsConflictingAppointmentException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        List\u003cAppointment\u003e listWithDuplicateAppointments \u003d Arrays.asList(APP1, APP1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(ConflictingAppointmentException.class, () -\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                uniqueAppointmentList.setAppointments(listWithDuplicateAppointments));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                uniqueAppointmentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/model/history/CommandHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void clearHistoryTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(true, CommandHistory.isEmpty());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void isEmptyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(true, CommandHistory.isEmpty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void hasCommandTest1() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"history\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(false, CommandHistory.hasCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(false, CommandHistory.isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void hasCommandTest2() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"list\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"history\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(true, CommandHistory.hasCommand());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(false, CommandHistory.isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void getCommandHistoryTest1() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"history\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"Here is your command history:\", CommandHistory.getCommandHistory());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void getCommandHistoryTest2() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"list\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"clear\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"delete\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"history\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"Here is your command history:\\n\" + \" -\\tdelete\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                + \" -\\tclear\\n\" + \" -\\tlist\", CommandHistory.getCommandHistory());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void peekNextTest1() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void peekNextTest2() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"list\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"history\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"clear\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"clear\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"history\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"list\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void peekNextTest3() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"list\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"history\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"clear\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"clear\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"history\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"list\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"list\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"list\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void peekPrevTest1() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"\", CommandHistory.peekPrev());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void peekPrevTest2() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"list\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"\", CommandHistory.peekPrev());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    void peekPrevTest3() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.clearHistory();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"list\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"history\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        CommandHistory.addUsedCommand(\"clear\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"clear\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"history\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"list\", CommandHistory.peekNext());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"history\", CommandHistory.peekPrev());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"clear\", CommandHistory.peekPrev());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(\"\", CommandHistory.peekPrev());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(Address.isValidAddress(\"N/A\")); // N/A is a valid placeholder"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "-": 35,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/BloodTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class BloodTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BloodType(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_invalidBloodType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String invalidBloodType \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BloodType(invalidBloodType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void isValidBloodType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null bloodType"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BloodType.isValidBloodType(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // blank bloodType"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"+\")); // missing ABO system"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A\")); // missing RHD system"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\" A+\")); // leading space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A+ \")); // trailing space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A +\")); // space between ABO system and RHD system"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"C+\")); // invalid alphabet in ABO system"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"1+\")); // digit in ABO system"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"!+\")); // special character in ABO system"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"AA\")); // two invalid alphabets in ABO system"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A1\")); // digit in RHD system"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A@\")); // invalid special character in RHD system"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A!@\")); // two special characters in RHD system"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // valid bloodType"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"A+\")); // A RhD positive"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"B+\")); // B RhD positive"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"O+\")); // O RhD positive"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"AB+\")); // AB RhD positive"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"A-\")); // A RhD negative"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"B-\")); // B RhD negative"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"O-\")); // O RhD negative"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"AB-\")); // AB RhD negative"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"a+\")); // lower-case alphabet in ABO system"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"N/A\")); // N/A is a valid placeholder"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(Email.isValidEmail(\"N/A\")); // N/A is a valid placeholder"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "-": 60,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/IcNumberTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class IcNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IcNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String invalidIcNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IcNumber(invalidIcNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void isValidIcNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null icNumber"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IcNumber.isValidIcNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // blank icNumber"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S234567Z\")); // missing first character"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"SZ\")); // missing 7 digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S12334567\")); // missing last character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\" S1234567Z\")); // leading space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S1234567Z \")); // trailing space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"A1234567Z\")); // invalid alphabet in first character"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"01234567Z\")); // digit in first character"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"!1234567Z\")); // special character in first character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"SS1234567Z\")); // two alphabets in first character"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S 1234567Z\")); // space after first character"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S12345678Z\")); // 8 digits"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S123 4567Z\")); // space between 7 digits"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S123A567Z\")); // alphabet in 7 digits"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S12345670\")); // digit in last character"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S1234567@\")); // special character in last character"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S1234567ZZ\")); // two alphabets in last character"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(IcNumber.isValidIcNumber(\"S1234567 Z\")); // space before last character"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // valid icNumber"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(IcNumber.isValidIcNumber(\"S1234567Z\")); // S in first character"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(IcNumber.isValidIcNumber(\"T1234567Z\")); // T in first character"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(IcNumber.isValidIcNumber(\"F1234567Z\")); // F in first character"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(IcNumber.isValidIcNumber(\"G1234567Z\")); // G in first character"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(IcNumber.isValidIcNumber(\"s1234567z\")); // lower-case alphabets only"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(IcNumber.isValidIcNumber(\"S7777777Z\")); // same number digits"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Keywords match email and address, but does not match name and phone"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"a12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 10,
      "afroneth": 2,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ICNUMBER_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getAllergies().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void isSamePatient() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different name and ic number -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withIcNumber(VALID_ICNUMBER_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same name, same ic number, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different icNumber -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withIcNumber(VALID_ICNUMBER_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different sex -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withSex(VALID_SEX_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different bloodType -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withBloodType(VALID_BLOODTYPE_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different allergies -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAllergies(VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 17,
      "-": 57,
      "gsmoon97": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/ProfilePictureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ProfilePictureTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Null file path"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProfilePicture(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void isValidFilePath() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Null file path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ProfilePicture.isValidFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Valid test for toString"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void toString_validInput_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(\"data/pictures\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String filePath \u003d profilePicture.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(\"data/pictures\", filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/SexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class SexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Sex(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void constructor_invalidSex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String invalidSex \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Sex(invalidSex));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void isValidSex() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null sex"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Sex.isValidSex(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // blank sex"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\" M\")); // leading space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\"M \")); // trailing space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\"A\")); // invalid alphabet"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\"1\")); // digit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\"!\")); // special character"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(Sex.isValidSex(\"MF\")); // two alphabets"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // valid sex"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(Sex.isValidSex(\"M\")); // male"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(Sex.isValidSex(\"F\")); // female"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(Sex.isValidSex(\"N/A\")); // N/A is a valid placeholder"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "Michaeliaaa": 166,
      "gsmoon97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/ColorTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class ColorTagTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void constructor_redColor_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String colorName \u003d \"red\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ColorTag colorTag \u003d new ColorTag(colorName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag.originalColor, colorName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag.toString(), colorName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag.cssColor, \"rgba(178,0,0,1)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag, new ColorTag(\"rgba(255,0,0,1)\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void constructor_none_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ColorTag colorTag \u003d new ColorTag();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag.originalColor, \"None\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag.toString(), \"None\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag.cssColor, \"transparent\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(colorTag, new ColorTag(\"None\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(colorTag.isPlaceholder());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ColorTag(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String invalidColorName \u003d \"gibberish\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ColorTag(invalidColorName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void isValidColorName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(ColorTag.isValidColorName(\"red\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(ColorTag.isValidColorName(\"None\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertFalse(ColorTag.isValidColorName(\"gibberish\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertFalse(ColorTag.isValidColorName(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ColorTag.isValidColorName(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/visit/VisitHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class VisitHistoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VisitHistory visitHistory \u003d TypicalVisits.getTypicalVisitHistory1();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Null value. Returns false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(visitHistory.equals(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same object. Returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(visitHistory.equals(visitHistory));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Same values. Returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VisitHistory visitHistoryCopy \u003d new VisitHistory(visitHistory.getVisits());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(visitHistory.equals(visitHistoryCopy));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different types. Returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(visitHistory.equals(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different types. Returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(visitHistory.equals(\"test\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Different visit history. Returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VisitHistory otherVisitHistory \u003d TypicalVisits.getTypicalVisitHistory2();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(visitHistory.equals(otherVisitHistory));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 10,
      "gsmoon97": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/visit/VisitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIAGNOSIS_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRESCRIPTION_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITDATE_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.VISIT_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.testutil.VisitBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class VisitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(VISIT_1.equals(VISIT_1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Visit visitCopy \u003d new VisitBuilder(VISIT_1).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertTrue(VISIT_1.equals(visitCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different visitDate -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Visit editedVisit \u003d new VisitBuilder(VISIT_1).withVisitDate(VALID_VISITDATE_ONE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(editedVisit));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different patientName -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedVisit \u003d new VisitBuilder(VISIT_1).withPatientName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(editedVisit));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different diagnosis -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedVisit \u003d new VisitBuilder(VISIT_1).withDiagnosis(VALID_DIAGNOSIS_ONE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(editedVisit));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different diagnosis -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedVisit \u003d new VisitBuilder(VISIT_1).withPrescription(VALID_PRESCRIPTION_ONE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(editedVisit));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different diagnosis -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        editedVisit \u003d new VisitBuilder(VISIT_1).withComment(VALID_COMMENT_ONE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(editedVisit));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // different visitList -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Visit otherVisit \u003d TypicalVisits.VISIT_2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(VISIT_1.equals(otherVisit));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void getterMethods() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Valid date 19xx"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String date19xxx \u003d \"10/10/1920\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Valid date 2xxx"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String date2xxx \u003d \"10/10/2020\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Invalid Day"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String invalidDay \u003d \"35/10/2020\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Invalid Month"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String invalidMonth \u003d \"10/35/2020\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Invalid Year"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String invalidYear \u003d \"10/35/1800\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Invalid type of date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String invalidType \u003d \"test\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Visit visit \u003d new Visit(date2xxx);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean testValid19xx \u003d visit.isValidVisitDate(date19xxx);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean testValid2xxx \u003d visit.isValidVisitDate(date2xxx);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean testDay \u003d visit.isValidVisitDate(invalidDay);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean testMonth \u003d visit.isValidVisitDate(invalidMonth);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean testYear \u003d visit.isValidVisitDate(invalidYear);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean testType \u003d visit.isValidVisitDate(invalidType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(testValid19xx, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(testValid2xxx, true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(testDay, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(testMonth, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(testYear, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(testType , false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 38,
      "gsmoon97": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_ICNUMBER \u003d \"!1234567Z\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final String INVALID_VISITDATE \u003d \"32/13/2020\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final String INVALID_VISITDIAGNOSIS \u003d \"no fever\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final String INVALID_VISITPRESCRIPTION \u003d \"vitamin c\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final String INVALID_VISITCOMMENT \u003d \"patient is male\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String INVALID_PROFILEPICTURE \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_SEX \u003d \"MF\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_BLOODTYPE \u003d \"C+\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String INVALID_ALLERGY \u003d \"#penicillin\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final String INVALID_COLORTAG \u003d \"gibberish\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_ICNUMBER \u003d BENSON.getIcNumber().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private static final List\u003cJsonAdaptedVisit\u003e VALID_VISITHISTORY \u003d BENSON.getVisitHistory().getVisits().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        .map(JsonAdaptedVisit::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_PROFILEPICTURE \u003d \"data/stock_picture.png\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_SEX \u003d BENSON.getSex().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final String VALID_BLOODTYPE \u003d BENSON.getBloodType().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final List\u003cJsonAdaptedAllergy\u003e VALID_ALLERGIES \u003d BENSON.getAllergies().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .map(JsonAdaptedAllergy::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final String VALID_COLORTAG \u003d BENSON.getColorTag().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_invalidIcNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d IcNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_nullIcNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IcNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        INVALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                null, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, INVALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, null, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Invalid picture input"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void toModelType_invalidPicture_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, VALID_EMAIL, INVALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String expectedMessage \u003d ProfilePicture.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Null picture input"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void toModelType_nullPicture_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ProfilePicture.class.getSimpleName());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_invalidSex_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        INVALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d Sex.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_nullSex_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                null, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Sex.class.getSimpleName());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_invalidBloodType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, INVALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d BloodType.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_nullBloodType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, null, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BloodType.class.getSimpleName());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void toModelType_invalidAllergies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        List\u003cJsonAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        invalidAllergies.add(new JsonAdaptedAllergy(INVALID_ALLERGY));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                        VALID_SEX, VALID_BLOODTYPE, invalidAllergies, VALID_COLORTAG);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void toModelType_invalidColor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, INVALID_COLORTAG);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        String expectedMessage \u003d ColorTag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void toModelType_nullColor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, VALID_VISITHISTORY,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, null);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ColorTag.class.getSimpleName());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void toModelType_invalidVisitHistory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        List\u003cJsonAdaptedVisit\u003e invalidVisits \u003d new ArrayList\u003c\u003e(VALID_VISITHISTORY);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        invalidVisits.add(new JsonAdaptedVisit(INVALID_VISITDATE, INVALID_NAME, INVALID_VISITDIAGNOSIS,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            INVALID_VISITPRESCRIPTION, INVALID_VISITCOMMENT));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ICNUMBER, invalidVisits,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                VALID_ADDRESS, VALID_EMAIL, VALID_PROFILEPICTURE,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "                VALID_SEX, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_COLORTAG);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 12,
      "Michaeliaaa": 23,
      "afroneth": 16,
      "eugene3231": 42,
      "-": 66,
      "gsmoon97": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCliniCalStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class JsonCliniCalStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCliniCalStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void readCliniCal_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCliniCal(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCliniCal\u003e readCliniCal(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new JsonCliniCalStorage(Paths.get(filePath)).readCliniCal(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertFalse(readCliniCal(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCliniCal(\"notJsonFormatCliniCal.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void readCliniCal_invalidPatientCliniCal_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCliniCal(\"invalidPatientCliniCal.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void readCliniCal_invalidAndValidPatientCliniCal_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCliniCal(\"invalidAndValidPatientCliniCal.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void readAndSaveCliniCal_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCliniCal.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal original \u003d getTypicalCliniCal();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonCliniCalStorage jsonCliniCalStorage \u003d new JsonCliniCalStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        jsonCliniCalStorage.saveCliniCal(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ReadOnlyCliniCal readBack \u003d jsonCliniCalStorage.readCliniCal(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(original, new CliniCal(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        jsonCliniCalStorage.saveCliniCal(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        readBack \u003d jsonCliniCalStorage.readCliniCal(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(original, new CliniCal(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        jsonCliniCalStorage.saveCliniCal(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        readBack \u003d jsonCliniCalStorage.readCliniCal().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(original, new CliniCal(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void saveCliniCal_nullCliniCal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCliniCal(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Saves {@code cliniCal} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private void saveCliniCal(ReadOnlyCliniCal cliniCal, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            new JsonCliniCalStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                    .saveCliniCal(cliniCal, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void saveCliniCal_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCliniCal(new CliniCal(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCliniCalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class JsonSerializableCliniCalTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCliniCalTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsCliniCal.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientCliniCal.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientCliniCal.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonSerializableCliniCal dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                JsonSerializableCliniCal.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal cliniCalFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal typicalPatientsCliniCal \u003d TypicalPatients.getTypicalCliniCal();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        assertEquals(cliniCalFromFile.getPatientList(), typicalPatientsCliniCal.getPatientList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonSerializableCliniCal dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                JsonSerializableCliniCal.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonSerializableCliniCal dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                JsonSerializableCliniCal.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCliniCal.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 3,
      "eugene3231": 3,
      "-": 26,
      "gsmoon97": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        userPrefs.setCliniCalFilePath(Paths.get(\"clinical.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalCliniCal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.ReadOnlyCliniCal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        JsonCliniCalStorage cliniCalStorage \u003d new JsonCliniCalStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        storageManager \u003d new StorageManager(cliniCalStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void cliniCalReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * {@link JsonCliniCalStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCliniCalStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal original \u003d getTypicalCliniCal();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        storageManager.saveCliniCal(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ReadOnlyCliniCal retrieved \u003d storageManager.readCliniCal().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertEquals(original, new CliniCal(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public void getCliniCalFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        assertNotNull(storageManager.getCliniCalFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void placePlaceholderPicture() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        storageManager.initializePlaceholderImage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Path path \u003d getTempFilePath(\"stock_picture.png\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(Files.exists(path));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertTrue(FileUtils.contentEquals("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                new File(this.getClass().getResource(\"/images/stock_picture.png\").toURI()), path.toFile()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void doNotOverwriteExistingPlaceholderPicture() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Path path \u003d getTempFilePath(\"stock_picture.png\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Files.createFile(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        storageManager.initializePlaceholderImage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(path.toFile().length(), 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 24,
      "-": 54,
      "gsmoon97": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppointmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.model.appointment.AppointmentDateTime.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class to help with building Appointment objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class AppointmentBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Danny Williams\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String DEFAULT_IC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d LocalDateTime.now().plusMinutes(10).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d LocalDateTime.now().plusMinutes(40).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Name patientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private IcNumber patientIC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private AppointmentDateTime startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private AppointmentDateTime endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Creates a {@code AppointmentBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public AppointmentBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientName \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        patientIC \u003d new IcNumber(DEFAULT_IC);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        startTime \u003d new AppointmentDateTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        endTime \u003d new AppointmentDateTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public AppointmentBuilder(Appointment appointmentToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientName \u003d appointmentToCopy.getPatientName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientIC \u003d appointmentToCopy.getPatientIc();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        startTime \u003d appointmentToCopy.getStartTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        endTime \u003d appointmentToCopy.getEndTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code patientName} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public AppointmentBuilder withPatientName(String patientName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientName \u003d new Name(patientName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Sets the {@code patientIC} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public AppointmentBuilder withPatientIc(String patientIC) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.patientIC \u003d new IcNumber(patientIC);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code startTime} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public AppointmentBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.startTime \u003d new AppointmentDateTime(startTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code endTime} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public AppointmentBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.endTime \u003d new AppointmentDateTime(endTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Builds {@code Appointment} with the given fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Appointment build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return new Appointment(patientName, patientIC, startTime, endTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 12,
      "gsmoon97": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CliniCalBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class to help with building CliniCal objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " *     {@code CliniCal ab \u003d new CliniCalBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class CliniCalBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private CliniCal cliniCal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CliniCalBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        cliniCal \u003d new CliniCal();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CliniCalBuilder(CliniCal cliniCal) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.cliniCal \u003d cliniCal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Adds a new {@code Patient} to the {@code CliniCal} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CliniCalBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        cliniCal.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public CliniCal build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return cliniCal;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAppointmentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.AppointmentDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class EditAppointmentDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private EditAppointmentCommand.EditAppointmentDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentDescriptorBuilder(EditAppointmentCommand.EditAppointmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns an {@code EditAppointmentDescriptor} with fields containing {@code appointment}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentDescriptorBuilder(Appointment appointment) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setPatientName(appointment.getPatientName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setPatientIc(appointment.getPatientIc());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setStartTime(appointment.getStartTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setDuration(appointment.getDuration());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAppointmentDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentDescriptorBuilder withPatientName(String patientName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setPatientName(new Name(patientName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code IcNumber} of the {@code EditAppointmentDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentDescriptorBuilder withPatientIc(String patientIc) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setPatientIc(new IcNumber(patientIc));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code AppointmentDateTime} of the {@code EditAppointmentDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentDescriptorBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setStartTime(new AppointmentDateTime(startTime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code int} of the {@code EditAppointmentDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentDescriptorBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setDuration(Integer.parseInt(duration));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditAppointmentCommand.EditAppointmentDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private EditCommand.EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public EditPatientDescriptorBuilder(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setIcNumber(patient.getIcNumber());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor.setAddress(patient.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setEmail(patient.getEmail());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setSex(patient.getSex());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setBloodType(patient.getBloodType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setAllergies(patient.getAllergies());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        descriptor.setVisitHistory(patient.getVisitHistory());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code IcNumber} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditPatientDescriptorBuilder withIcNumber(String icNumber) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setIcNumber(new IcNumber(icNumber));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public EditPatientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditPatientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sets the {@code Profile Picture} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public EditPatientDescriptorBuilder withProfilePicture(String profilePic) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(profilePic);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        descriptor.setProfilePicture(profilePicture);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code Sex} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditPatientDescriptorBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setSex(new Sex(sex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code BloodType} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditPatientDescriptorBuilder withBloodType(String bloodtype) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setBloodType(new BloodType(bloodtype));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditPatientDescriptorBuilder withAllergies(String... allergies) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d Stream.of(allergies).map(Allergy::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setAllergies(allergySet);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code ColorTag} of the {@code EditPatientDescriptor} that we\u0027re building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditPatientDescriptorBuilder withColorTag(String colorName) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ColorTag colorTag \u003d new ColorTag(colorName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.setColorTag(colorTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Parses the {@code visithistory} into a {@code VisitHistory} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public EditPatientDescriptorBuilder withVisitHistory(VisitHistory visitHistory) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        VisitHistory visitHistory1 \u003d new VisitHistory(visitHistory.getVisits());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        descriptor.setVisitHistory(visitHistory1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public EditCommand.EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 1,
      "Michaeliaaa": 75,
      "afroneth": 9,
      "eugene3231": 13,
      "gsmoon97": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.BloodType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.IcNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import seedu.address.model.patient.ProfilePicture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import seedu.address.model.tag.ColorTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_ICNUMBER \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static final String DEFAULT_PROFILE_PICTURE \u003d \"data/stock_picture.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_SEX \u003d \"F\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_BLOODTYPE \u003d \"A+\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static final VisitHistory DEFAULT_VISIT_HISTORY \u003d new VisitHistory(new ArrayList\u003cVisit\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private IcNumber icNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private BloodType bloodType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private ColorTag colorTag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    private VisitHistory visitHistory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        icNumber \u003d new IcNumber(DEFAULT_ICNUMBER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        profilePicture \u003d new ProfilePicture(DEFAULT_PROFILE_PICTURE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sex \u003d new Sex(DEFAULT_SEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        bloodType \u003d new BloodType(DEFAULT_BLOODTYPE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        allergies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        colorTag \u003d new ColorTag();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        visitHistory \u003d DEFAULT_VISIT_HISTORY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        icNumber \u003d patientToCopy.getIcNumber();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        address \u003d patientToCopy.getAddress();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        email \u003d patientToCopy.getEmail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        profilePicture \u003d patientToCopy.getProfilePicture();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sex \u003d patientToCopy.getSex();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        bloodType \u003d patientToCopy.getBloodType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        allergies \u003d new HashSet\u003c\u003e(patientToCopy.getAllergies());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        colorTag \u003d patientToCopy.getColorTag();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        visitHistory \u003d patientToCopy.getVisitHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code IcNumber} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public PatientBuilder withIcNumber(String icNumber) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.icNumber \u003d new IcNumber(icNumber);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code Address} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Sets the {@code Email} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public PatientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sets the {@code Profile Picture} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public PatientBuilder withProfilePicture(String profilePic) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.profilePicture \u003d new ProfilePicture(profilePic);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code Sex} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public PatientBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.sex \u003d new Sex(sex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code BloodType} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public PatientBuilder withBloodType(String bloodType) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.bloodType \u003d new BloodType(bloodType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Parses the {@code Allergy} into a {@code Set\u003cAllergy\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public PatientBuilder withAllergies(String ... allergies) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Sets the {@code ColorTag} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public PatientBuilder withColorTag(String colorTag) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.colorTag \u003d new ColorTag(colorTag);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Sets the {@code VisitHistory} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public PatientBuilder withVisitHistory(VisitHistory visitHistory) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        this.visitHistory \u003d visitHistory;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Builds {@code Patient} with the given fields."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new Patient(name, phone, icNumber, visitHistory, address, email, profilePicture,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                sex, bloodType, allergies, colorTag);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 12,
      "Michaeliaaa": 78,
      "afroneth": 13,
      "eugene3231": 16,
      "gsmoon97": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ICNUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.allergy.Allergy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns an add command string for adding the {@code patient}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static String getAddCommand(Patient patient) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns the part of command string for the given {@code patient}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sb.append(PREFIX_ICNUMBER + patient.getIcNumber().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sb.append(PREFIX_SEX + patient.getSex().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        sb.append(PREFIX_BLOODTYPE + patient.getBloodType().type + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patient.getAllergies().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            s -\u003e sb.append(PREFIX_ALLERGY + s.allergyName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.getIcNumber().ifPresent(icNumber -\u003e sb.append(PREFIX_ICNUMBER).append(icNumber.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.getSex().ifPresent(sex -\u003e sb.append(PREFIX_SEX).append(sex.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        descriptor.getBloodType().ifPresent(bloodType -\u003e sb.append(PREFIX_BLOODTYPE).append(bloodType.type)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        if (descriptor.getAllergies().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            Set\u003cAllergy\u003e allergies \u003d descriptor.getAllergies().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            if (allergies.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                sb.append(PREFIX_ALLERGY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                allergies.forEach(s -\u003e sb.append(PREFIX_ALLERGY).append(s.allergyName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 14,
      "-": 37,
      "gsmoon97": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAppointments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_FIRST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SECOND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.model.appointment.AppointmentDateTime.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class containing a list of {@code Appointment} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class TypicalAppointments {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START1 \u003d LocalDateTime.now().plusMinutes(10).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END1 \u003d LocalDateTime.now().plusMinutes(50).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START2 \u003d LocalDateTime.now().plusMinutes(60).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END2 \u003d LocalDateTime.now().plusMinutes(90).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START3 \u003d LocalDateTime.now().plusMinutes(100).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END3 \u003d LocalDateTime.now().plusMinutes(150).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START4 \u003d LocalDateTime.now().plusMinutes(170).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END4 \u003d LocalDateTime.now().plusMinutes(200).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START5 \u003d LocalDateTime.now().plusMinutes(240).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END5 \u003d LocalDateTime.now().plusMinutes(300).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Appointment APP1 \u003d new AppointmentBuilder().withPatientName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START1).withEndTime(END1).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Appointment APP2 \u003d new AppointmentBuilder().withPatientName(\"Benson Meier\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START2).withEndTime(END2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Appointment APP3 \u003d new AppointmentBuilder().withPatientName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START3).withEndTime(END3).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Appointment APP4 \u003d new AppointmentBuilder().withPatientName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START4).withEndTime(END4).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Appointment APP5 \u003d new AppointmentBuilder().withPatientName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START5).withEndTime(END5).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // Manually added - Appointment\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Appointment FIRST_APP \u003d new AppointmentBuilder().withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(VALID_START_TIME_FIRST).withEndTime(VALID_END_TIME_FIRST).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Appointment SECOND_APP \u003d new AppointmentBuilder().withPatientName(VALID_PATIENT_NAME_SECOND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(VALID_START_TIME_SECOND).withEndTime(VALID_END_TIME_SECOND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    // Appointments for checking conflicts"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final Appointment CONFLICTING_APPOINTMENT1 \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"Conflict One\").withStartTime(START1).withEndTime(START2).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final Appointment CONFLICTING_APPOINTMENT2 \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"Conflict Two\").withStartTime(END1).withEndTime(END2).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final Appointment NOCONFLICT_APPOINTMENT1 \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"NoConflict One\").withStartTime(START1).withEndTime(END1)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final Appointment NOCONFLICT_APPOINTMENT2 \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"NoConflict One\").withStartTime(START2).withEndTime(END2)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private TypicalAppointments() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns an {@code CliniCal} with all the typical appointments."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static CliniCal getTypicalCliniCalWithAppointments() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal ab \u003d new CliniCal();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        for (Appointment appointment : getTypicalAppointments()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            ab.addAppointment(appointment);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static List\u003cAppointment\u003e getTypicalAppointments() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APP1, APP2, APP3, APP4, APP5));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 9,
      "gsmoon97": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 5,
      "-": 9,
      "gsmoon97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_ASPIRIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ICNUMBER_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ICNUMBER_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.CliniCal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"S4623454A\").withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"F\").withBloodType(\"A+\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withAllergies(\"aspirin\").withColorTag(\"None\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitHistory(TypicalVisits.getTypicalVisitHistoryAlice()).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"S7435696B\").withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"M\").withBloodType(\"B+\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withAllergies(\"penicillin\", \"sulfa\").withColorTag(\"None\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitHistory(TypicalVisits.getTypicalVisitHistoryBenson()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"S8864424C\").withAddress(\"wall street\").withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"M\").withBloodType(\"O+\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withColorTag(\"None\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitHistory(TypicalVisits.getTypicalVisitHistoryCarl()).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"G3011359D\").withAddress(\"10th street\").withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"M\").withBloodType(\"O+\").withAllergies(\"aspirin\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withColorTag(\"None\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitHistory(TypicalVisits.getTypicalVisitHistoryDaniel()).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"S6131369E\").withAddress(\"michegan ave\").withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"F\").withBloodType(\"AB+\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitHistory(TypicalVisits.getTypicalVisitHistoryElle()).withColorTag(\"None\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"S6787656F\").withAddress(\"little tokyo\").withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"F\").withBloodType(\"A+\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitHistory(TypicalVisits.getTypicalVisitHistoryFiona()).withColorTag(\"None\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"S2444153G\").withAddress(\"4th street\").withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"M\").withBloodType(\"B+\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitHistory(TypicalVisits.getTypicalVisitHistoryGeorge()).withColorTag(\"None\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"S1678497H\").withAddress(\"little india\").withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"M\").withBloodType(\"O+\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withColorTag(\"None\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(\"G8775328I\").withAddress(\"chicago ave\").withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(\"data/stock_picture.png\").withSex(\"F\").withBloodType(\"AB+\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withColorTag(\"None\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(VALID_ICNUMBER_AMY).withAddress(VALID_ADDRESS_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(VALID_PROFILE_PICTURE_AMY).withSex(VALID_SEX_AMY).withBloodType(VALID_BLOODTYPE_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withAllergies(VALID_ALLERGY_ASPIRIN).withColorTag(\"None\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withIcNumber(VALID_ICNUMBER_BOB).withAddress(VALID_ADDRESS_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withProfilePicture(VALID_PROFILE_PICTURE_BOB).withSex(VALID_SEX_BOB).withBloodType(VALID_BLOODTYPE_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withAllergies(VALID_ALLERGY_PENICILLIN).withColorTag(\"None\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns an {@code CliniCal} with all the typical patients."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static CliniCal getTypicalCliniCal() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        CliniCal ab \u003d new CliniCal();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "            ab.addPatient(patient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 17,
      "eugene3231": 12,
      "-": 35,
      "gsmoon97": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVEvents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_FIRST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_SECOND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NAME_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.model.appointment.AppointmentDateTime.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class containing a list of {@code Appointment} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class TypicalVEvents {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START1 \u003d LocalDateTime.now().plusMinutes(10).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END1 \u003d LocalDateTime.now().plusMinutes(50).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START2 \u003d LocalDateTime.now().plusMinutes(60).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END2 \u003d LocalDateTime.now().plusMinutes(90).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START3 \u003d LocalDateTime.now().plusMinutes(100).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END3 \u003d LocalDateTime.now().plusMinutes(150).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START4 \u003d LocalDateTime.now().plusMinutes(170).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END4 \u003d LocalDateTime.now().plusMinutes(200).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String START5 \u003d LocalDateTime.now().plusMinutes(240).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String END5 \u003d LocalDateTime.now().plusMinutes(300).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final VEvent VEVENT1 \u003d new VEventBuilder().withPatientName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START1).withEndTime(END1).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final VEvent VEVENT2 \u003d new VEventBuilder().withPatientName(\"Benson Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START2).withEndTime(END2).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final VEvent VEVENT3 \u003d new VEventBuilder().withPatientName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START3).withEndTime(END3).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final VEvent VEVENT4 \u003d new VEventBuilder().withPatientName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START4).withEndTime(END4).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final VEvent VEVENT5 \u003d new VEventBuilder().withPatientName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(START5).withEndTime(END5).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    // Manually added - VEvent\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final VEvent FIRST_VEVENT \u003d new VEventBuilder().withPatientName(VALID_PATIENT_NAME_FIRST)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(VALID_START_TIME_FIRST).withEndTime(VALID_END_TIME_FIRST).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final VEvent SECOND_VEVENT \u003d new VEventBuilder().withPatientName(VALID_PATIENT_NAME_SECOND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withStartTime(VALID_START_TIME_SECOND).withEndTime(VALID_END_TIME_SECOND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private TypicalVEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //     * Returns an {@code CliniCal} with all the typical appointments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //    public static CliniCal getTypicalCliniCal() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //        CliniCal ab \u003d new CliniCal();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //        for (VEvent vEvent : getTypicalVEvents()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //            ab.addVEvent(vEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static List\u003cVEvent\u003e getTypicalVEvents() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(VEVENT1, VEVENT2, VEVENT3, VEVENT4, VEVENT5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVisits.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.visit.VisitHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class TypicalVisits {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Visit VISIT_1 \u003d new VisitBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitDate(LocalDate.of(2020, 5, 15))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withDiagnosis(\"Headache\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPrescription(\"Aspirin\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withComment(\"No need for follow up\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Visit VISIT_2 \u003d new VisitBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitDate(LocalDate.of(2019, 3, 27))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withDiagnosis(\"Depression\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPrescription(\"Antifreeze\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withComment(\"\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Visit VISIT_3 \u003d new VisitBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withVisitDate(LocalDate.of(2018, 10, 5))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withDiagnosis(\"Obesity\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPrescription(\"Peloton\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withComment(\"Need to check daily\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Visit VISIT_4 \u003d new VisitBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withVisitDate(LocalDate.of(2017, 12, 10))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withDiagnosis(\"Back Pain\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPrescription(\"Painkiller\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withComment(\"\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Visit VISIT_5 \u003d new VisitBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withVisitDate(LocalDate.of(2016, 8, 18))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPatientName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withDiagnosis(\"COVID-19\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withPrescription(\"Remdesivir\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .withComment(\"Need to be quarantined immediately\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Visit VISIT_6 \u003d new VisitBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitDate(LocalDate.of(2017, 1, 25))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withPatientName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withDiagnosis(\"Fever\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withPrescription(\"Paracetamol\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withComment(\"Dislikes swallowing pills\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final Visit VISIT_7 \u003d new VisitBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withVisitDate(LocalDate.of(2018, 9, 13))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withPatientName(\"George Best\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withDiagnosis(\"Sprained ankle\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withPrescription(\"Painkillers\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "            .withComment(\"Follow up in 2 weeks\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private TypicalVisits() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns a VisitHistory {@code CliniCal} with all the typical visits from the same patient."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static VisitHistory getTypicalVisitHistory1() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Arrays.asList(VISIT_1, VISIT_6));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Returns a VisitHistory {@code CliniCal} with all the typical visits from the same patient."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static VisitHistory getTypicalVisitHistory2() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Arrays.asList(VISIT_2, VISIT_7));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns a VisitHistory {@code CliniCal} with all the typical visits from the same patient."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory getTypicalVisitHistoryAlice() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Collections.singletonList(VISIT_1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     * Returns a VisitHistory {@code CliniCal} with all the typical visits from the same patient."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory getTypicalVisitHistoryBenson() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Collections.singletonList(VISIT_2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory getTypicalVisitHistoryCarl() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Collections.singletonList(VISIT_3));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory getTypicalVisitHistoryDaniel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Collections.singletonList(VISIT_4));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory getTypicalVisitHistoryElle() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Collections.singletonList(VISIT_5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory getTypicalVisitHistoryFiona() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Collections.singletonList(VISIT_6));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugene3231"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    public static VisitHistory getTypicalVisitHistoryGeorge() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        ArrayList\u003cVisit\u003e typicalVisits \u003d new ArrayList\u003c\u003e(Collections.singletonList(VISIT_7));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "        return new VisitHistory(typicalVisits);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugene3231"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugene3231": 55,
      "gsmoon97": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VEventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class to help with building VEvent objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class VEventBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Danny Williams\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"02/02/2020 14:20\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Michaeliaaa"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"02/02/2020 14:35\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Creates a {@code VEventBuilder} with the default details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEventBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientName \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        startTime \u003d DEFAULT_START_TIME;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        endTime \u003d DEFAULT_END_TIME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Initializes the VEventBuilder with the data of {@code vEventToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEventBuilder(VEvent vEventToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientName \u003d vEventToCopy.getSummary().getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        startTime \u003d LocalDateTime.parse(vEventToCopy.getDateTimeStart().getValue().toString())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "                .format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        endTime \u003d LocalDateTime.parse(vEventToCopy.getDateTimeEnd().getValue().toString()).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code patientName} of the {@code VEvent} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEventBuilder withPatientName(String patientName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code startTime} of the {@code VEvent} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEventBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code endTime} of the {@code VEvent} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEventBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Builds {@code VEvent} with the given fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VEvent build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        VEvent resultVEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        resultVEvent.setSummary(patientName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        resultVEvent.setDateTimeStart(LocalDateTime.parse(startTime, DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        resultVEvent.setDateTimeEnd(LocalDateTime.parse(endTime, DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return resultVEvent;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Michaeliaaa": 3,
      "gsmoon97": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VisitBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import static seedu.address.testutil.PatientBuilder.DEFAULT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " * A utility class to help with building Visit objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "public class VisitBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final LocalDate DEFAULT_VISIT_DATE \u003d LocalDate.of(2020, 11, 11);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_VISIT_DIAGNOSIS \u003d \"Asthma\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_VISIT_PRESCRIPTION \u003d \"Nasal Spray\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public static final String DEFAULT_VISIT_COMMENT \u003d \"Follow up in 2 weeks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private LocalDate visitDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private Name patientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String prescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Creates a {@code VisitBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        visitDate \u003d DEFAULT_VISIT_DATE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientName \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        diagnosis \u003d DEFAULT_VISIT_DIAGNOSIS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        prescription \u003d DEFAULT_VISIT_PRESCRIPTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        comment \u003d DEFAULT_VISIT_COMMENT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Initializes the VisitBuilder with the data of {@code visitToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitBuilder(Visit visitToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        visitDate \u003d visitToCopy.getVisitDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        patientName \u003d visitToCopy.getPatientName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        diagnosis \u003d visitToCopy.getDiagnosis();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        prescription \u003d visitToCopy.getPrescription();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        comment \u003d visitToCopy.getComment();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code visitDate} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitBuilder withVisitDate(LocalDate date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.visitDate \u003d date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code patientName} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitBuilder withPatientName(String patientName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.patientName \u003d new Name(patientName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code diagnosis} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitBuilder withDiagnosis(String diagnosis) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code prescription} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitBuilder withPrescription(String prescription) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.prescription \u003d prescription;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Sets the {@code comment} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public VisitBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     * Builds {@code Patient} with the given fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    public Visit build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "        return new Visit(visitDate, patientName, diagnosis, prescription, comment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gsmoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gsmoon97": 96
    }
  }
]
