[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "# McScheduler"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F10-4/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "McScheduler is a **one-stop solution for McDonald\u0027s Shift Managers to manage shift scheduling and worker"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "contact/compensation, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "With the McScheduler, McDonald\u0027s Shift Managers can easily access all information needed for shift-work assignment."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "This is a team brownfield project, developed during a Software Engineering introductory module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "For the detailed documentation of this project, see the **[McScheduler Product Website](https://ay2021s1-cs2103-f10-4.github.io/tp/)**."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "This project is based on the *AddressBook-Level3* project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "wakululuu": 13,
      "WangZijun97": 2,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Foo Kai En"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003cimg src\u003d\"images/wakululuu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[[github](https://github.com/wakululuu)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "[[portfolio](team/wakululuu.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "* Responsibilities: Code quality, testing (secondary)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Guo Bohao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "\u003cimg src\u003d\"images/plosslaw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "[[github](http://github.com/plosslaw)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "[[portfolio](team/plosslaw.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Sigmund Chianasta"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003cimg src\u003d\"images/sigmund-c.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "[[github](http://github.com/sigmund-c)] [[portfolio](team/sigmund-c.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* Role: Developer, Coordinator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Tan Su Yin"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "\u003cimg src\u003d\"images/tnsyn.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[[github](http://github.com/tnsyn)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "[[portfolio](team/tnsyn.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* Responsibilities: Integration"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "### Wang Zijun"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cimg src\u003d\"images/wangzijun97.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "[[github](http://github.com/WangZijun97)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "[[portfolio](team/WangZijun97.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* Responsibilities: Documentation"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 5,
      "plosslaw": 5,
      "tnsyn": 4,
      "sigmund-c": 8,
      "WangZijun97": 4,
      "-": 33
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* is a McDonalds shift manager"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* has a need to manage a significant number of worker contacts"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* has a need to manage a large amount of work shifts"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Value proposition**: McScheduler provides a one-stop solution for McDonald\u0027s shift manager\u0027s needs for shift scheduling and worker contact/compensation. All relevant information is easily available to help streamline the management process. "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "It is also easy for the manager to contact workers and manage their hours and pay."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                                                         | So that I can…​                                                        |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------------------------------------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | add a new worker                                                                     | track the worker\u0027s data and schedule their work                        |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | delete a worker                                                                      | only see workers who are still with McDonald\u0027s                         |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | view the contact details of workers                                                  | contact them easily                                                    |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | edit details of any worker                                                           | have the most up-to-date information if I need to contact a worker     |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | assign roles to workers                                                              | put them in shifts based on the work that they are trained to do       |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | view a list of all workers                                                           | know who are the workers I can assign shifts to                        |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | add new shifts                                                                       | assign people to those shifts                                          |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | see all available shifts                                                             | know which shifts need a worker                                        |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | set the number of workers of each type I need for each shift                         | the scheduling is based on the number of workers needed for each role  |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | assign workers to shifts                                                             | fill shift positions                                                   |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | add roles that need to be filled in each shift                                       | assign workers into those roles based on what is needed                |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | set a range of the number of workers that I need on a day                            | have better flexibilities when scheduling the workers                  |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | delete a shift                                                                       | remove unwanted shifts                                                 |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | edit details of a shift                                                              | make changes in the system when they occur                             |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* * *`  | user                                       | unassign workers from shifts                                                         |                                                                        |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* *`    | new user                                   | see a tutorial on how to work the key functions                                      | know how to use the App                                                |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* *`    | user                                       | see a reminder of how to use the app and the details of the various commands         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `* *`    | user                                       | generate the weekly work shift schedule                                              | let the workers know when to report for their shifts                   |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `*`      | user                                       | login                                                                                |                                                                        |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "| `*`      | user                                       | see the worker\u0027s service rating                                                      | decide who to give more work opportunities to                          |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "(For all use cases below, the **System** is the `McScheduler` and the **Actor** is the `user`, unless specified otherwise)."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Please note that inclusions are marked using `inline  code` due to the absence of underline in GitHub MarkDown."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Add a worker (UC-001)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to add worker."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler adds worker."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 1a. The given worker information has missing or wrong data."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 1a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Delete a worker (UC-002)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list workers."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to delete a specific worker in the list."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler deletes the worker."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Edit a worker\u0027s information (UC-003)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list workers."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to edit a specific worker in the list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler edits the worker."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3b. No information is given or the information is invalid."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Add a shift (UC-004)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to add a shift."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler adds the shift."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 1a. The shift information is missing or invalid (wrong values)."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 1a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Delete a shift (UC-005)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to delete a specific shift on the list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler deletes the shift."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Edit a shift\u0027s information (UC-006)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to edit a specific shift in the list."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler edits the shift."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 3b. No information is given or the information is invalid."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 3b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Assign worker to a shift (UC-007)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to list workers."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "5. User requests to assign worker at a specific position on the workers\u0027 list to a shift on a specific position on the shifts\u0027 list."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "6. McScheduler assigns specified worker to specified shift."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list of shifts is empty."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 4a. The list of workers is empty."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5a. At least one of the given indexes are invalid."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5b. The worker is unable to fulfil any role required for given shift."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use case: Unassign worker from a shift (UC-008)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User requests to list shifts."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler shows a list of shifts."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User requests to list workers."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler shows a list of workers."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "5. User requests to unassign worker at a specific position on the workers\u0027 list to a shift on a specific position on the shifts\u0027 list."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "6. McScheduler unassigns specified worker to specified shift."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 2a. The list of shifts is empty."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 4a. The list of workers is empty."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5a. At least one of the given indexes are invalid."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5a1. McScheduler shows an error message."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* 5b. The worker is not assigned to the given shift."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * 5b1. McScheduler shows an error message."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "#### Use Case: Add new worker to a shift (UC-009)"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. User `adds a worker (UC-001)`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2. McScheduler adds worker."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3. User `assigns worker to a shift (UC-007)`."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4. McScheduler assigns worker to shift."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "2.  Should be able to hold up to 1000 workers and 1000 shifts without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "3.  Should be able to save up to 1000 workers and 1000 shifts worth of data that persists over sessions."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "4.  Data should be saved after every change."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "5.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "6.  A fresh new user should be able to figure out how to use the App easily."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Role**: A position that a worker is able to fill based on their skill set (e.g Cashier, Cleaner, Burger Flipper)"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Service Rating**: A rating given based on how well the worker performs at their work"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 220,
      "-": 353
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McScheduler is a **one-stop solution for McDonald\u0027s Shift Managers to manage shift scheduling and worker contact/compensation, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). With the McScheduler, all information needed for shift-work assignment is made available easily to streamline the work of McDonald\u0027s Shift Managers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "1. Download the latest `mcscheduler.jar` from [here](https://github.com/AY2021S1-CS2103-F10-4/tp/releases)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for McScheduler."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "   * **`worker list`** : Lists all workers in the McScheduler."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "   * **`worker add`**`n/John hp/98765432 a/21 Lower Kent Ridge Rd, Singapore 119077 r/Cashier p/7` : Adds a cashier named John whose pay is $7/hr. His phone number is 98765432 and he lives at 21 Lower Kent Ridge Rd, Singapore 119077."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "   * **`worker delete`**`3` : Deletes the 3rd worker shown in the worker list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "   * **`shift add`**`d/Wed t/AM r/Cashier-2 r/Cleaner-3` : Adds a shift on Wednesday morning, which requires 2 workers to fill the cashier role and 3 workers to fill the cleaner role."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "   * **`assign`**`s/3 w/2 r/Cashier` : Assign the 2nd worker on the list to the 3rd shift on the list as a Cashier."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  e.g. in `worker delete WORKER_INDEX`, `WORKER_INDEX` is a parameter for the index of the worker (in the worker list) you want to delete from the application which can be used as `worker delete 4`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  e.g `n/NAME [r/ROLE]` can be used as `n/John Doe r/Cashier` or as `n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  e.g. `[r/ROLE-NUMBER_NEEDED]…​` can be used as ` ` (i.e. 0 times), `r/Cashier-3`, `r/Cashier-1 r/Cleaner-2` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Adding a worker: `worker add`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Adds a new worker into the McScheduler."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker add n/NAME hp/PHONE_NUMBER a/ADDRESS [p/HOURLY_PAY] [r/ROLE]...`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "A worker can have any number of roles (including 0) that are added by multiple r/ arguments."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The pay is given as hourly pay rate."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker add n/John hp/98765432 a/21 Lower Kent Ridge Rd, Singapore 119077 r/Cashier p/7` Adds a cashier named John whose pay is $7/hr. His phone number is 98765432 and he lives at 21 Lower Kent Ridge Rd, Singapore 119077."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker add n/Tom hp/87654321 a/22 Bong Keng Road, #01–01 r/Burger Flipper r/Cleaner p/7.50` Adds a worker named Tom who is able to be a Burger Flipper or a Cleaner, whose pay is $7.50/hr. His phone number is 87654321 and he lives at Bong Keng Road, #01–01."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Listing all workers: `worker list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shows a list of all workers in the McScheduler."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker list`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Editing a worker: `worker edit`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Edits an existing worker in the McScheduler."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker edit WORKER_INDEX [hp/PHONE_NUMBER] [a/ADDRESS] [n/NAME] [p/HOURLY_PAY] [r/ROLE]...`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Edits the worker at the specified `WORKER_INDEX`. The worker index refers to the index number shown in the displayed worker list. The worker index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* When editing roles, the existing roles of the worker will be removed i.e adding of roles is not cumulative."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* You can remove all the worker’s roles by typing `r/` without specifying any roles after it."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "*  `worker edit 1 n/John r/Cleaner` Edits the name and worker role of the 1st worker to be John and Cleaner respectively."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "*  `worker edit 2 n/Betsy Crower p/7` Edits the name and pay of the 2nd person to be Betsy Crower and $7/hr respectively."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "\u003c!-- ### Locating workers by name: `worker find`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Finds workers whose names contain any of the given keywords."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  ![result for \u0027worker find alex david\u0027](images/findAlexDavidResult.png) --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Deleting a worker: `worker delete`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Deletes a worker from the McScheduler."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `worker delete WORKER_INDEX`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Deletes the worker at the specified `WORKER_INDEX`. The index refers to the index number shown in the displayed worker list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `worker delete 4` Deletes the 4th worker shown in the worker list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Adding a shift: `shift add`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Adds a new shift to the McScheduler."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift add d/DAY t/TIME [r/ROLE-NUMBER_NEEDED]...`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Adds a shift on the specified ​day at the specified time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The day specified should be 1 of these values: **Mon, Tue, Wed, Thur, Fri, Sat, Sun**."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The time specified should be 1 of these values: **AM/PM**."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Each role should be accompanied by the number needed, and this number **must be a positive integer** 1, 2, 3..."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `shift add d/Wed t/AM r/Cashier-2 r/Cleaner-3` Adds a shift on Wednesday morning, which requires 2 workers to fill the cashier role and 3 workers to fill the cleaner role."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `shift add d/Mon t/PM` Adds a shift on Monday afternoon with no specified roles yet."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Listing all shifts: `shift list`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shows a list of all shifts (including all details about the shifts such as their day, time and list of workers) in the McScheduler."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift list`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Editing a shift: `shift edit`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Edits the details of an existing shift in the McScheduler."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift edit SHIFT_INDEX [d/DAY] [t/TIME] [r/ROLE-NUMBER_NEEDED]...`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Edits the shift at the specified `SHIFT_INDEX`. The shift index refers to the index number shown in the displayed shift list. The shift index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The day specified should be 1 of these values: **Mon, Tue, Wed, Thur, Fri, Sat, Sun**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The time specified should be 1 of these values: **AM/PM**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Each role should be accompanied by the number needed, and this number **must be 0 (0 will remove the role from the shift) or a positive integer** 1, 2, 3..."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `shift edit 3 r/Cashier-3 r/Cleaner-2` Edits the 3rd shift on the list such that it now has 3 cashier roles and 2 cleaner roles."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `shift edit 1 d/Mon t/PM r/Cleaner-1` Edits the 1st shift such that it is now on Monday afternoon, with 1 cleaner role"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `shift edit 2 r/Cleaner-0` Edits the 2nd shift such that it now has no cleaner roles"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Deleting a shift: `shift delete`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Deletes a shift from the McScheduler."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `shift delete SHIFT_INDEX`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Deletes the shift at the specified `SHIFT_INDEX`. The index refers to the index number shown in the displayed shift list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `shift delete 4` Deletes the 4th shift on the list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Assign worker to shift: `assign`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Assigns a worker to a particular shift."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `assign s/SHIFT_INDEX w/WORKER_INDEX r/ROLE`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Assigns a worker to shift the specified SHIFT_INDEX. The worker will be at the specified WORKER_INDEX in the worker list. Both indexes must be a positive integer."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The order of specifying does not matter, as long ‘s/’ is attached to the SHIFT_INDEX and ‘w/’ is attached to the WORKER_INDEX. \u003cbr\u003e e.g. `assign s/4 w/1` is equivalent to `assign w/1 s/4 `"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The assigned worker will fill up the given ROLE in the shift."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* If the worker is already in the shift, they will be reassigned to the given role if possible."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * This is equivalent to unassign followed by assign."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* An error message will be displayed in the following situations:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * The shift does not have the role."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * The role is already completely filled up in the shift."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * The worker is unable to fulfil the role."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `assign s/3 w/2 r/Cashier` Assign the 2nd worker on the list to the 3rd shift on the list as a Cashier."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "### Remove worker from shift: `unassign`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Removes a worker from a particular shift."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Format: `unassign s/SHIFT_INDEX w/WORKER_INDEX`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* Unassigns a worker to the shift at the specified `SHIFT_ INDEX` of the shift list. The worker unassigned will be the worker at the specified `WORKER_INDEX` in the worker list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* The order of specifying does not matter, as long \u0027s/\u0027 is attached to the `SHIFT_INDEX` and \u0027w/\u0027 is attached to the `WORKER_INDEX`. \u003cbr\u003e e.g. `unassign s/4 w/1` is equivalent to `unassign w/1 s/4`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* `unassign s/4 w/1` Removes the 1st worker from the 4th shift."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "McScheduler data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "\u003c!-- ### \u003cInsert new feature\u003e `[coming in v2.0]`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "_{explain the feature here}_ --\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous McScheduler home folder."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Data | Action | Format, Examples"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "-----|--------|------------------"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Worker | **Add** | `worker add n/NAME hp/PHONE_NUMBER a/ADDRESS [r/ROLE] [p/HOURLY_PAY]​` \u003cbr\u003e e.g., `worker add n/John hp/98765432 a/21 Lower Kent Ridge Rd, Singapore 119077 r/Cashier p/7`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Worker | **Delete** | `worker delete WORKER_INDEX​` \u003cbr\u003e e.g., `worker delete 4`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Worker | **Edit** | `worker edit WORKER_INDEX [n/NAME] [hp/PHONE_NUMBER] [a/ADDRESS] [r/ROLE] [p/HOURLY_PAY]​` \u003cbr\u003e e.g., `worker edit 2 n/Betsy Crower p/7`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Worker | **List** | `worker list`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shift | **Add** | `shift add d/DAY t/TIME [r/ROLE-NUMBER_NEEDED]...​` \u003cbr\u003e e.g., `shift add d/Wed t/AM r/Cashier-2 r/Cleaner-3`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shift | **Delete** | `shift delete SHIFT_INDEX​` \u003cbr\u003e e.g., `shift delete 4`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shift | **Edit** | `shift edit SHIFT_INDEX [d/DAY] [t/TIME] [r/ROLE-NUMBER_NEEDED]...` \u003cbr\u003e e.g., `shift edit 1 d/Mon t/PM r/Cleaner-1`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Shift | **List** | `shift list`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "General | **Assign** | `assign s/SHIFT_INDEX w/WORKER_INDEX r/ROLE​` \u003cbr\u003e e.g., `assign s/3 w/2 r/Cashier`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "General | **Unassign** | `unassign s/SHIFT_INDEX w/WORKER_INDEX` \u003cbr\u003e e.g., `unassign s/4 w/1`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "General | **Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 142,
      "-": 118
    }
  },
  {
    "path": "docs/team/WangZijun97.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "title: Zijun\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "## Project: McScheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "McScheduler is a one-stop solution for McDonald\u0027s Shift Managers  to manage shift scheduling and worker contact/compensation. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "**The following text contains placeholders for reference**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 48
    }
  },
  {
    "path": "docs/team/plosslaw.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 46
    }
  },
  {
    "path": "docs/team/sigmund-c.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 46
    }
  },
  {
    "path": "docs/team/tnsyn.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "## Project: McScheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tnsyn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tnsyn"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "tnsyn": 46
    }
  },
  {
    "path": "docs/team/wakululuu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX \u003d \"The shift index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of shifts */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    ObservableList\u003cShift\u003e getFilteredShiftList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e getFilteredShiftList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return model.getFilteredShiftList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShiftEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE_REQUIREMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SHIFTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Edits the details of an existing shift in the App."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftEditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"shift-edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the shift identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"[\" + PREFIX_SHIFT_DAY + \"DAY] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"[\" + PREFIX_SHIFT_TIME + \"TIME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"[\" + PREFIX_ROLE_REQUIREMENT + \"ROLE-QUANTITY_NEEDED]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_SHIFT_DAY + \"Wed \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + PREFIX_ROLE_REQUIREMENT + \"Cashier-5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_EDIT_SHIFT_SUCCESS \u003d \"Edited Shift: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHIFT \u003d \"This shift already exists in the App\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final EditShiftDescriptor editShiftDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a ShiftEditCommand from the given required information."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param index of the shift in the filtered shift list to edit."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param editShiftDescriptor detaiils to edit the shift with."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftEditCommand(Index index, EditShiftDescriptor editShiftDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireAllNonNull(index, editShiftDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.editShiftDescriptor \u003d new EditShiftDescriptor(editShiftDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        List\u003cShift\u003e lastShownList \u003d model.getFilteredShiftList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift shiftToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift editedShift \u003d createEditedShift(shiftToEdit, editShiftDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!shiftToEdit.isSameShift(editedShift) \u0026\u0026 model.hasShift(editedShift)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHIFT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        model.setShift(shiftToEdit, editedShift);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        model.updateFilteredShiftList(PREDICATE_SHOW_ALL_SHIFTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SHIFT_SUCCESS, editedShift));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private static Shift createEditedShift(Shift shiftToEdit, EditShiftDescriptor editShiftDescriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert shiftToEdit !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftDay updatedDay \u003d editShiftDescriptor.getShiftDay().orElse(shiftToEdit.getShiftDay());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftTime updatedTime \u003d editShiftDescriptor.getShiftTime().orElse(shiftToEdit.getShiftTime());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Set\u003cRoleRequirement\u003e updatedRoleRequirements \u003d editShiftDescriptor.getRoleRequirements()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .orElse(shiftToEdit.getRoleRequirements());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Shift(updatedDay, updatedTime, updatedRoleRequirements);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof ShiftEditCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftEditCommand s \u003d (ShiftEditCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return index.equals(s.index)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 editShiftDescriptor.equals(s.editShiftDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static class EditShiftDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private ShiftDay day;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private ShiftTime time;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private Set\u003cRoleRequirement\u003e roleRequirements;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public EditShiftDescriptor() {}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * A new {@code Set} is created for {@code roleRequirements} internally in"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * {@link EditShiftDescriptor#setRoleRequirements(Set)}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public EditShiftDescriptor(EditShiftDescriptor toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            setShiftDay(toCopy.day);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            setShiftTime(toCopy.time);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            setRoleRequirements(toCopy.roleRequirements);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(day, time, roleRequirements);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setShiftDay(ShiftDay day) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cShiftDay\u003e getShiftDay() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return Optional.ofNullable(day);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setShiftTime(ShiftTime time) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cShiftTime\u003e getShiftTime() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Sets {@code roleRequirements} to this object\u0027s {@code roleRequirements}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * A defensive copy of {@code roleRequirements} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setRoleRequirements(Set\u003cRoleRequirement\u003e roleRequirements) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.roleRequirements \u003d (roleRequirements !\u003d null) ? new HashSet\u003c\u003e(roleRequirements) : null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Returns an unmodifiable role requirements set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code roleRequirements} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public Optional\u003cSet\u003cRoleRequirement\u003e\u003e getRoleRequirements() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return (roleRequirements !\u003d null)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(roleRequirements))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (!(other instanceof EditShiftDescriptor)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            EditShiftDescriptor e \u003d (EditShiftDescriptor) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return getShiftDay().equals(e.getShiftDay())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u0026\u0026 getShiftTime().equals(e.getShiftTime())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u0026\u0026 getRoleRequirements().equals(e.getRoleRequirements());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.logic.commands.ShiftEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        case ShiftEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new ShiftEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Prefix PREFIX_SHIFT_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Prefix PREFIX_SHIFT_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final Prefix PREFIX_ROLE_REQUIREMENT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.tag.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String day} into a {@code ShiftDay}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static ShiftDay parseShiftDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedShiftDay \u003d day.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftDay.isValidDay(trimmedShiftDay)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(ShiftDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ShiftDay(day);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String time} into a {@code ShiftTime}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static ShiftTime parseShiftTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedShiftTime \u003d time.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftTime.isValidTime(trimmedShiftTime)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(ShiftTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ShiftTime((time));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String role} into a {@code Role}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!Role.isValidTagName(trimmedRole)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Role(trimmedRole);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses a {@code String roleRequirement} into a {@code RoleRequirement}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the given {@code roleRequirement} is invalid."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static RoleRequirement parseRoleRequirement(String roleRequirement) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(roleRequirement);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String trimmedRoleRequirement \u003d roleRequirement.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!RoleRequirement.isValidRoleRequirement(trimmedRoleRequirement)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(RoleRequirement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new RoleRequirement(trimmedRoleRequirement);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e roleRequirements} into a {@code Set\u003cRoleRequirement\u003e}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Set\u003cRoleRequirement\u003e parseRoleRequirements("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Collection\u003cString\u003e roleRequirements) throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(roleRequirements);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final Set\u003cRoleRequirement\u003e roleRequirementSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (String roleRequirementString : roleRequirements) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            roleRequirementSet.add(parseRoleRequirement(roleRequirementString));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return roleRequirementSet;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 77,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShiftEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE_REQUIREMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHIFT_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHIFT_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.logic.commands.ShiftEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.logic.commands.ShiftEditCommand.EditShiftDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Parses input arguments and creates a new ShiftEditCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftEditCommandParser implements Parser\u003cShiftEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShiftEditCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return ShiftEditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SHIFT_DAY, PREFIX_SHIFT_TIME, PREFIX_ROLE_REQUIREMENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShiftEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        EditShiftDescriptor editShiftDescriptor \u003d new EditShiftDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SHIFT_DAY).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            editShiftDescriptor.setShiftDay(ParserUtil.parseShiftDay(argMultimap.getValue(PREFIX_SHIFT_DAY).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SHIFT_TIME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            editShiftDescriptor.setShiftTime(ParserUtil.parseShiftTime(argMultimap.getValue(PREFIX_SHIFT_TIME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        parseRoleRequirementsForEdit(argMultimap.getAllValues(PREFIX_ROLE_REQUIREMENT))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .ifPresent(editShiftDescriptor::setRoleRequirements);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!editShiftDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ParseException(ShiftEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ShiftEditCommand(index, editShiftDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses non-empty {@code Collection\u003cString\u003e roleRequirements} into a {@code Set\u003cRoleRequirement\u003e}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If {@code roleRequirements} only contains an empty string element,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * it will be parsed into an empty {@code Set\u003cRoleRequirement\u003e}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Optional\u003cSet\u003cRoleRequirement\u003e\u003e parseRoleRequirementsForEdit("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Collection\u003cString\u003e roleRequirements) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert roleRequirements !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (roleRequirements.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Collection\u003cString\u003e roleRequirementsSet \u003d roleRequirements.size() \u003d\u003d 1 \u0026\u0026 roleRequirements.contains(\"\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                : roleRequirements;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Optional.of(ParserUtil.parseRoleRequirements(roleRequirementsSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.UniqueShiftList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson and .isSameShift comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final UniqueShiftList shifts;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts \u003d new UniqueShiftList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShifts(List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shifts.setShifts(shifts);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        setShifts(newData.getShiftList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // shift-level methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a shift with the same identity as {@code shift} exists in the App."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(shift);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shifts.contains(shift);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Adds a shift to the App."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The person must not already exist in the App."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.add(shift);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Replaces the given shift {@code target} in the list with {@code editedShift}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code target} must exist in the App."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift identity of {@code editedShift} must not be the same as another existing shift in the App."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(editedShift);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.setShift(target, editedShift);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Removes given shift from the App."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param key Shift to be removed. Must exist in the App."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void removeShift(Shift key) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.remove(key);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons; \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + shifts.asUnmodifiableObservableList().size() + \" shifts\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e getShiftList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shifts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 52,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    Predicate\u003cShift\u003e PREDICATE_SHOW_ALL_SHIFTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a shift with the same identity as {@code shift} exists in the App."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    boolean hasShift(Shift shift);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Deletes the given shift."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Shift must exist in the App."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void deleteShift(Shift target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Adds the given shift."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Shift must not already exist in the App."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void addShift(Shift shift);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Replaces the given shift {@code target} with {@code editedShift}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code target} must already exist in the App."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * There must be no shift with the same identity as {@code editedShift} that exists in the App."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void setShift(Shift target, Shift editedShift);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Updates the filter of the filtered shift list to filter by the given {@code predicate}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    void updateFilteredShiftList(Predicate\u003cShift\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns an unmodifiable view of the filtered shift list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    ObservableList\u003cShift\u003e getFilteredShiftList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 38,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final FilteredList\u003cShift\u003e filteredShifts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        filteredShifts \u003d new FilteredList\u003c\u003e(this.addressBook.getShiftList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // Person related methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // Shift related methods"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(shift);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return addressBook.hasShift(shift);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void deleteShift(Shift target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        addressBook.removeShift(target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        addressBook.addShift(shift);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        updateFilteredShiftList(PREDICATE_SHOW_ALL_SHIFTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireAllNonNull(target, editedShift);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        addressBook.setShift(target, editedShift);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Shift List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e getFilteredShiftList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return filteredShifts;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void updateFilteredShiftList(Predicate\u003cShift\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        filteredShifts.setPredicate(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 41,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    List\u003cShift\u003e getShiftList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/shift/RoleRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.tag.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Role Requirement for a shift in the App."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class RoleRequirement {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Role Requirements must be of the form \u003cRole\u003e \u003cQuantity\u003e \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            + \"(e.g. \\\u0027Cashier 1\\\u0027)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".* \\\\d*$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public RoleRequirement(Role role, int quantity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireAllNonNull(role, quantity);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * String version constructor for easy parsing of sample data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Todo: Extend to use this for storage data or adapt to use the regular constructor."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public RoleRequirement(String roleRequirementInfo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(roleRequirementInfo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        checkArgument(isValidRoleRequirement(roleRequirementInfo), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        int index \u003d roleRequirementInfo.lastIndexOf(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.role \u003d new Role(roleRequirementInfo.substring(0, index));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.quantity \u003d Integer.parseInt(roleRequirementInfo.substring(index + 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a given string is a valid role requirement"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean isValidRoleRequirement(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if both role requirements are about the same role"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a weaker notion of equality between the two role requirements."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean isSameRoleRequirement(RoleRequirement otherRoleRequirement) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (otherRoleRequirement \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return otherRoleRequirement !\u003d null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherRoleRequirement.getRole().equals(getRole());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true only if both role requirements are about the same role and of the same quantity."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a stronger notion of equality between two role requirements."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof RoleRequirement"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 role.equals(((RoleRequirement) other).role)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 role.equals(((RoleRequirement) other).quantity));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Objects.hash(role, quantity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        builder.append(\" Role Required: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(getRole())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(\" x \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(getQuantity());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/shift/Shift.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Shift in the App."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Shift {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftDay shiftDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ShiftTime shiftTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Set\u003cRoleRequirement\u003e roleRequirements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Every field must be present and not null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Shift(ShiftDay shiftDay, ShiftTime shiftTime, Set\u003cRoleRequirement\u003e roleRequirements) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireAllNonNull(shiftDay, shiftTime, roleRequirements);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shiftDay \u003d shiftDay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shiftTime \u003d shiftTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.roleRequirements.addAll(roleRequirements);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftDay getShiftDay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftDay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftTime getShiftTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns an immutable role requirements set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Set\u003cRoleRequirement\u003e getRoleRequirements() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Collections.unmodifiableSet(roleRequirements);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if both shifts have the same identity fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a weaker notion of equality between two shifts."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean isSameShift(Shift otherShift) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (otherShift \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return otherShift !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherShift.getShiftDay().equals(getShiftDay())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherShift.getShiftTime().equals(getShiftTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if both shifts have the same identity and data fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This defines a stronger notion of equality between two shifts."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof Shift)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Shift otherShift \u003d (Shift) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return otherShift.getShiftDay().equals(getShiftDay())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherShift.getShiftTime().equals(getShiftTime())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 otherShift.getRoleRequirements().equals(getRoleRequirements());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Objects.hash(shiftDay, shiftTime, roleRequirements);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        builder.append(\" Day: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(getShiftDay())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .append(getShiftTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        getRoleRequirements().forEach(builder::append);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/shift/ShiftDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Shift\u0027s day in the App."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDay(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftDay {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    enum DayValue {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        MON,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        TUE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        WED,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        THUR,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        FRI,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        SAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        SUN"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \"Shift day should only contain one of the following values: MON, TUE, WED, THUR, FRI, SAT, SUN\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public final DayValue day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code ShiftDay}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param day A valid day."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftDay(String day) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        day \u003d day.toUpperCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.day \u003d DayValue.valueOf(day);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if a given string is a valid day."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            DayValue.valueOf(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return day.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof ShiftDay"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 day.equals(((ShiftDay) other).day));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return day.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/shift/ShiftTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Shift\u0027s time in the App."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    enum TimeValue {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        AM,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        PM"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \"Shift time should only contain one of the following values: AM, PM\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public final TimeValue time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code ShiftTime}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftTime(String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        time \u003d time.toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.time \u003d TimeValue.valueOf(time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true is a given string is a valid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            TimeValue.valueOf(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return time.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof ShiftTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 time.equals(((ShiftTime) other).time));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/shift/UniqueShiftList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.shift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.exceptions.DuplicateShiftException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.exceptions.ShiftNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * A list of shifts that enforces uniqueness between its elements."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Supports a minimal set of shift operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * @see Shift#isSameShift(Shift)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class UniqueShiftList implements Iterable\u003cShift\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ObservableList\u003cShift\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ObservableList\u003cShift\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns true if the list contains an equivalent shift as {@code toCheck}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean contains(Shift toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameShift);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Adds a shift to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void add(Shift toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DuplicateShiftException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Replaces the shift {@code target} in the list with {@code editedShift}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift identity of {@code editedShift} must not be the same as any other shift in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireAllNonNull(target, editedShift);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ShiftNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!target.isSameShift(editedShift) \u0026\u0026 contains(editedShift)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DuplicateShiftException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.set(index, editedShift);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Removes the equivalent shift from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The shift must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void remove(Shift toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new ShiftNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShifts(UniqueShiftList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setShifts(List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        requireAllNonNull(shifts);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!shiftsAreUnique(shifts)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DuplicateShiftException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        internalList.setAll(shifts);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ObservableList\u003cShift\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Iterator\u003cShift\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof UniqueShiftList"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueShiftList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private boolean shiftsAreUnique(List\u003cShift\u003e shifts) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (int i \u003d 0; i \u003c shifts.size() - 1; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c shifts.size(); j++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                if (shifts.get(i).isSameShift(shifts.get(j))) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/shift/exceptions/DuplicateShiftException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.shift.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Signals that the operation will result in duplicate Shifts (Shifts are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DuplicateShiftException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DuplicateShiftException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(\"Operation would result in duplicate shifts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/shift/exceptions/ShiftNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.shift.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Signals that the operation is unable to find the specified shift."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Role.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a Worker Role in the App."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Guarantees: immutable, name is valid as declared in"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Role extends Tag {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \"Role names should be alphanumeric\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Role(String roleName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(roleName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                || (other instanceof Role"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 tagName.equals(((Role) other).tagName));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Shift[] getSampleShifts() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Shift[] {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            new Shift(new ShiftDay(\"Mon\"), new ShiftTime(\"AM\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                getRoleRequirementSet(\"Cashier 1\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (Shift sampleShift : getSampleShifts()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            sampleAb.addShift(sampleShift);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Set\u003cRoleRequirement\u003e getRoleRequirementSet(String... string) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return Arrays.stream(string)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(RoleRequirement::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRole.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.tag.Role;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Jackson-friendly version of {@link Role}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "class JsonAdaptedRole extends JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code JsonAdaptedRole} with the given {@code roleName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedRole(String roleName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(roleName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Note that {@code Role} objects are also {@code Tag} objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedRole(Tag source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts this Jackson-friendly adapted role object into the model\u0027s {@code Role} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Role toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!Role.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException((Role.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Role(tagName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRoleRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Jackson-friendly version of {@link RoleRequirement}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class JsonAdaptedRoleRequirement {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final JsonAdaptedRole role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code JsonAdaptedRoleRequirement} with the given details"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedRoleRequirement(@JsonProperty(\"role\") JsonAdaptedRole role,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                                      @JsonProperty(\"quantity\") int quantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts a given {@code RoleRequirement} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedRoleRequirement(RoleRequirement source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        role \u003d new JsonAdaptedRole(source.getRole());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts this Jackson-friendly adapted role requirement into the model\u0027s {@code RoleRequirement} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted role requirement."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public RoleRequirement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new RoleRequirement(role.toModelType(), quantity);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedShift.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.RoleRequirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.ShiftTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Jackson-friendly version of {@link Shift}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class JsonAdaptedShift {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Shift\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final List\u003cJsonAdaptedRoleRequirement\u003e roleRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code JsonAdaptedShift} with the given shift information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedShift(@JsonProperty(\"day\") String day, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                            @JsonProperty(\"roleRequirements\") List\u003cJsonAdaptedRoleRequirement\u003e roleRequirements) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (roleRequirements !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.roleRequirements.addAll(roleRequirements);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts a given {@code Shift} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonAdaptedShift(Shift source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        day \u003d source.getShiftDay().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        time \u003d source.getShiftTime().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        roleRequirements.addAll(source.getRoleRequirements().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .map(JsonAdaptedRoleRequirement::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts this shift into the models\u0027 {@code Shift} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Shift toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final List\u003cRoleRequirement\u003e shiftRoleRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (JsonAdaptedRoleRequirement req: roleRequirements) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            shiftRoleRequirements.add(req.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ShiftDay.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftDay.isValidDay(day)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException(ShiftDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final ShiftDay modelDay \u003d new ShiftDay(day);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ShiftTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!ShiftTime.isValidTime(time)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new IllegalValueException((ShiftTime.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final ShiftTime modelTime \u003d new ShiftTime(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final Set\u003cRoleRequirement\u003e modelRoleRequirements \u003d new HashSet\u003c\u003e(shiftRoleRequirements);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new Shift(modelDay, modelTime, modelRoleRequirements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    protected final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHIFT \u003d \"Shifts list contains duplicate shift(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final List\u003cJsonAdaptedShift\u003e shifts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons and shifts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                                       @JsonProperty(\"shifts\") List\u003cJsonAdaptedShift\u003e shifts) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shifts.addAll(shifts);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shifts.addAll(source.getShiftList().stream().map(JsonAdaptedShift::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (JsonAdaptedShift jsonAdaptedShift : shifts) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Shift shift \u003d jsonAdaptedShift.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (addressBook.hasShift(shift)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SHIFT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            addressBook.addShift(shift);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 16,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ShiftListPanel shiftListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private StackPane shiftListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftListPanel \u003d new ShiftListPanel(logic.getFilteredShiftList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftListPanelPlaceholder.getChildren().add(shiftListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftListPanel getShiftListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return shiftListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 11,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    class ShiftListViewCell extends ListCell\u003cShift\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        protected void updateItem(Shift shift, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            super.updateItem(shift, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (empty || shift \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setGraphic(new ShiftCard(shift, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 15,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ShiftCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * An UI component that displays information of a {@code Shift}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private static final String FXML \u003d \"ShiftListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public final Shift shift;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Label dayTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private FlowPane roleRequirements;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a {@code ShiftCard} with the given {@code Shift} and index to display."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftCard(Shift shift, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.shift \u003d shift;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dayTime.setText(shift.getShiftDay().toString() + \" \" + shift.getShiftTime().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shift.getRoleRequirements().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .sorted(Comparator.comparing(roleRequirement -\u003e roleRequirement.getRole().getRole()))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .forEach(roleRequirement -\u003e roleRequirements.getChildren().add(new Label(roleRequirement.toString())));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!(other instanceof ShiftCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ShiftCard card \u003d (ShiftCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u0026\u0026 shift.equals(card.shift);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ShiftListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ShiftListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private static final String FXML \u003d \"ShiftListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ShiftListPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ListView\u003cShift\u003e shiftListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a {@code ShiftListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ShiftListPanel(ObservableList\u003cShift\u003e shiftList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftListView.setItems(shiftList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        shiftListView.setCellFactory(shiftView -\u003e new ShiftListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Shift} using a {@code ShiftCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    class ShiftListViewCell extends ListCell\u003cShift\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        protected void updateItem(Shift shift, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            super.updateItem(shift, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            if (empty || shift \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                setGraphic(new ShiftCard(shift, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 46
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \u003cVBox fx:id\u003d\"shiftList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cStackPane fx:id\u003d\"shiftListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/resources/view/ShiftListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                \u003cLabel fx:id\u003d\"dayTime\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"roleRequirements\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 33
    }
  },
  {
    "path": "src/main/resources/view/ShiftListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cListView fx:id\u003d\"shiftListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public boolean hasShift(Shift shift) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void deleteShift(Shift target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void addShift(Shift shift) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void setShift(Shift target, Shift editedShift) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public void updateFilteredShiftList(Predicate\u003cShift\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public ObservableList\u003cShift\u003e getFilteredShiftList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 31,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import seedu.address.model.shift.Shift;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    //Todo: include shift based tests, then fully implement shift in this stub"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        private final ObservableList\u003cShift\u003e shifts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        public ObservableList\u003cShift\u003e getShiftList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return shifts;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 8,
      "-": 102
    }
  }
]
